var relearn_searchindex = [
  {
    "breadcrumb": "",
    "content": "Learn by doing\nTopics Details Part Topic Part 01 VirtualBox, Vagrant, and Basics of Linux Part 02 Azure Virtual Machine Part 03 Azure CLI Part 04 Azure Image, Azure VM Restore, Virtual Scale Set Part 05 Azure Virtual Network Part 06 Azure Load Balancer Part 07 Azure Monitoring Part 08 Azure Policy Part 09 Azure Storage Part 10 Azure Data Protection Part 11 Azure Entra ID Part 12 Azure App Services Part 13 Azure Kubernetes Services Part 14 Azure ARM Template Part 15 Azure Terraform \u0026 Bicep",
    "description": "Learn by doing\nTopics Details Part Topic Part 01 VirtualBox, Vagrant, and Basics of Linux Part 02 Azure Virtual Machine Part 03 Azure CLI Part 04 Azure Image, Azure VM Restore, Virtual Scale Set Part 05 Azure Virtual Network Part 06 Azure Load Balancer Part 07 Azure Monitoring Part 08 Azure Policy Part 09 Azure Storage Part 10 Azure Data Protection Part 11 Azure Entra ID Part 12 Azure App Services Part 13 Azure Kubernetes Services Part 14 Azure ARM Template Part 15 Azure Terraform \u0026 Bicep",
    "tags": [],
    "title": "Azure documentation",
    "uri": "/azure/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Vagrant Guide Vagrant is an open-source tool for building and managing virtualized environments. It provides easy-to-use workflows for working with different development environments.\nInstallation 1. Install VirtualBox Vagrant requires a provider such as VirtualBox. Download and install it from VirtualBox Downloads.\n2. Install Vagrant Download and install Vagrant from Vagrant Downloads.\nVerify the installation:\nvagrant --version Getting Started with Vagrant 1. Initialize a New Project To create a new Vagrant environment:\nvagrant init bento/ubuntu-24.04 --box-version 202407.23.0 This command creates a Vagrantfile in your project directory, which describes the virtual machine configuration.\n2. Start the Virtual Machine Run the following to launch the VM:\nvagrant up 3. SSH into the Virtual Machine Log into the virtual machine using SSH:\nvagrant ssh 4. Shut Down the Virtual Machine When done, halt the VM:\nvagrant halt Common Commands Command Description vagrant init Initialize a new Vagrant environment. vagrant up Start the Vagrant environment. vagrant ssh SSH into the Vagrant machine. vagrant halt Stop the virtual machine. vagrant destroy Remove the virtual machine. vagrant status Check the status of the virtual machine. vagrant provision Apply changes in the Vagrantfile to the VM. vagrant reload Restart the VM with updated configurations. Basic Vagrantfile Example Below is a sample Vagrantfile:\nVagrant.configure(\"2\") do |config| # Define the box to use config.vm.box = \"hashicorp/bionic64\" # Define the virtual machine's network config.vm.network \"private_network\", type: \"dhcp\" # Share a folder between the host and the guest config.vm.synced_folder \"./data\", \"/vagrant_data\" # Customize VM resources config.vm.provider \"virtualbox\" do |vb| vb.memory = \"1024\" vb.cpus = 2 end end Additional Resources Vagrant Official Documentation Linux Basics Tutorial Introduction to Linux Linux is an open-source operating system widely used in servers, desktops, and embedded systems. It’s known for its stability, security, and versatility. Linux is based on the Unix operating system and provides a command-line interface (CLI) for users to interact with the system.\nBasic Linux Commands Navigating the File System pwd\nPrints the current working directory.\npwd ls\nLists files and directories in the current directory.\nls ls -l # For detailed listing ls -la # for hiddent file starting with . cd\nChanges the current directory.\ncd /path/to/directory cd ~ # Goes to the home directory mkdir\nCreates a new directory.\nmkdir new_directory rmdir\nRemoves an empty directory.\nrmdir directory_name rm\nRemoves files or directories.\nrm file_name rm -r directory_name # Removes a directory and its contents File and Directory Operations touch\nCreates an empty file or updates the timestamp of an existing file.\ntouch new_file.txt cp\nCopies files or directories.\ncp source_file destination_file cp -r source_directory destination_directory # For directories mv\nMoves or renames files or directories.\nmv old_name new_name mv file_name /path/to/destination Viewing File Content cat\nDisplays the contents of a file.\ncat file.txt less\nOpens a file for reading, allowing scrolling through the content.\nless file.txt head\nDisplays the first 10 lines of a file.\nhead file.txt tail\nDisplays the last 10 lines of a file.\ntail file.txt Searching Files and Directories find\nFinds files and directories by name, type, and other attributes.\nfind /path/to/search -name \"filename.txt\" grep\nSearches for a specific pattern inside a file.\ngrep \"search_pattern\" file.txt File Permissions chmod\nChanges file permissions.\nchmod +x file.sh # Adds execute permission chmod 755 file.sh # Sets specific permissions chown\nChanges file owner and group.\nchown user:group file.txt Process Management ps\nLists running processes.\nps aux # Lists all processes top\nDisplays system processes in real-time.\ntop kill\nTerminates a process by its process ID (PID).\nkill PID Package Management (Debian/Ubuntu) apt update\nUpdates the list of available packages.\nsudo apt update apt upgrade\nUpgrades installed packages to their latest versions.\nsudo apt upgrade apt install\nInstalls a new package.\nsudo apt install package_name apt remove\nRemoves an installed package.\nsudo apt remove package_name User and Group Management useradd\nCreates a new user.\nsudo useradd username passwd\nChanges the password for a user.\nsudo passwd username groupadd\nCreates a new group.\nsudo groupadd group_name 3. File System Structure Linux uses a hierarchical file system structure, where everything is under the root directory /. Below are common directories:\n/ - Root directory /home - User home directories /etc - Configuration files /var - Variable files (e.g., logs) /usr - User programs and data /tmp - Temporary files 4. Basic Shell Scripting Create a script\nCreate a new file and add a shebang at the beginning (#!/bin/bash), followed by commands.\nnano script.sh #!/bin/bash echo \"Hello, Linux!\" Make the script executable\nchmod +x script.sh Run the script\n./script.sh Check the currently logged in user whoami Log in with root sudo -s Check memory usages free -m Disk Management Check all disk available fdisk -l lsblk Check block id of a disk blkid Check Disk space df -sh Check disk usgaes du -sh * How to format a disk mkfs.ext4 /dev/sdc How to mount to a directory ? mkdir /data mount /dev/sdc /data Mount this permanenetly vi /etc/fstab /dev/sdc ext4 /data defaults 0 0 Update the fstab mount -a Test after rebooting your Server if you want reboot init 6",
    "description": "Vagrant Guide Vagrant is an open-source tool for building and managing virtualized environments. It provides easy-to-use workflows for working with different development environments.\nInstallation 1. Install VirtualBox Vagrant requires a provider such as VirtualBox. Download and install it from VirtualBox Downloads.\n2. Install Vagrant Download and install Vagrant from Vagrant Downloads.\nVerify the installation:\nvagrant --version Getting Started with Vagrant 1. Initialize a New Project To create a new Vagrant environment:",
    "tags": [],
    "title": "Part 01",
    "uri": "/part01/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure VM Tasks \u0026 Common Interview Topics 1. Azure VM Basics Creating VMs: Understand the basics of creating and configuring VMs using both the Azure portal and Azure CLI. You should know different VM sizes, disk types, and pricing tiers. Start/Stop/Deallocate: Commands to start, stop, and deallocate VMs, and understanding the difference between stopping and deallocating a VM. Resizing a VM: Know how to resize a VM and the impact it has on the underlying infrastructure. 2. VM Networking Public vs Private IP Addresses: Configure and assign static/dynamic public and private IPs to Azure VMs. NSG (Network Security Groups): Configure NSGs to control inbound and outbound traffic for VMs. Load Balancing: Understand how to set up and use Azure Load Balancers for distributing traffic to multiple VMs. VNET and Subnets: Networking for VMs, including Virtual Networks (VNET), subnets, and peering. 3. Disks and Storage Managed vs Unmanaged Disks: Know the difference and implications on performance and cost. Attaching and Detaching Disks: Learn how to attach additional data disks to a VM and detach them when not needed. Disk Performance Tiers: Differences between Standard, Premium, and Ultra disks, and when to use each. 4. VM Images and Snapshots Creating Custom VM Images: Capture a VM as an image and reuse it to deploy new VMs with pre-configured environments. Snapshots: Creating and restoring from snapshots for backups. 5. Automation and Scaling Azure VM Scale Sets: Use VM Scale Sets for auto-scaling applications across multiple VMs. Automation: Use ARM Templates, Terraform, or Azure CLI to automate VM provisioning. Azure DevOps Pipelines: Automate VM creation and deployment as part of a CI/CD pipeline. 6. Azure VM Security Azure Bastion: Secure RDP/SSH access to VMs without exposing public IPs. Disk Encryption: Configure Azure Disk Encryption to secure data at rest. Managed Identities: Implement MSI for secure access to Azure resources without credentials. SSH Key Management: Generate and use SSH keys for Linux VM access, as well as passwordless access for Windows VMs. 7. Backup and Disaster Recovery Azure Backup: Set up Azure Backup for VM snapshots and restoring VMs in case of failure. Azure Site Recovery (ASR): Replicate and failover VMs for disaster recovery scenarios. 8. Troubleshooting Diagnosing VM Issues: Diagnose and troubleshoot VMs that fail to start or have performance issues (check logs, resource utilization, and network connectivity). Monitoring and Alerts: Set up monitoring using Azure Monitor and create alerts based on VM metrics like CPU usage, memory consumption, or disk IOPS. 9. Cost Management Azure Reserved Instances: Understand the concept of reserved VM instances to save on long-term costs. Spot VMs: Use Azure Spot VMs for cost-effective workloads and understand their limitations. VM Pricing: Estimate costs and optimize VMs for pricing based on workload needs. 10. OS-Specific Knowledge Windows VMs: Setting up RDP, enabling WinRM for remote management, configuring updates, and managing licensing. Linux VMs: SSH access, handling Linux kernel updates, and automating tasks with scripts. Common Interview Questions How would you create a virtual machine in Azure and configure it with specific VM size and OS?\nTesting knowledge on Azure CLI, ARM Templates, or Terraform to automate VM creation. What is the difference between deallocating and stopping a VM?\nStopping still incurs costs for resources, while deallocating releases hardware and stops billing for the VM. How do you securely connect to a VM in Azure without exposing public IPs?\nUsage of Azure Bastion, Just-in-Time (JIT) VM access, or private endpoint configurations. Explain Azure VM scale sets and how you would configure autoscaling.\nUnderstand scaling rules, thresholds, and VM image configuration. What are managed identities, and how would you use them in Azure VMs?\nAssigning VMs identity in Azure AD and granting access to Azure resources without credentials. How would you troubleshoot a VM that is not responding or has network connectivity issues?\nDiagnose network security groups, VNET configurations, or use Azure Serial Console for troubleshooting. What are the benefits of using Spot VMs, and in what scenarios would they be appropriate?\nSpot VMs for cost-effective compute resources but with interruption at any time. How would you handle disk performance issues in Azure VMs?\nDiscuss disk types, performance tiers, resizing, and application tuning. What is the difference between Azure Standard HDD, Premium SSD, and Ultra Disks?\nDifferences in IOPS, throughput, latency, and costs. How do you back up and restore Azure VMs?\nAzure Backup configuration, restoring VMs from snapshots, or using recovery services.",
    "description": "Azure VM Tasks \u0026 Common Interview Topics 1. Azure VM Basics Creating VMs: Understand the basics of creating and configuring VMs using both the Azure portal and Azure CLI. You should know different VM sizes, disk types, and pricing tiers. Start/Stop/Deallocate: Commands to start, stop, and deallocate VMs, and understanding the difference between stopping and deallocating a VM. Resizing a VM: Know how to resize a VM and the impact it has on the underlying infrastructure. 2. VM Networking Public vs Private IP Addresses: Configure and assign static/dynamic public and private IPs to Azure VMs. NSG (Network Security Groups): Configure NSGs to control inbound and outbound traffic for VMs. Load Balancing: Understand how to set up and use Azure Load Balancers for distributing traffic to multiple VMs. VNET and Subnets: Networking for VMs, including Virtual Networks (VNET), subnets, and peering. 3. Disks and Storage Managed vs Unmanaged Disks: Know the difference and implications on performance and cost. Attaching and Detaching Disks: Learn how to attach additional data disks to a VM and detach them when not needed. Disk Performance Tiers: Differences between Standard, Premium, and Ultra disks, and when to use each. 4. VM Images and Snapshots Creating Custom VM Images: Capture a VM as an image and reuse it to deploy new VMs with pre-configured environments. Snapshots: Creating and restoring from snapshots for backups. 5. Automation and Scaling Azure VM Scale Sets: Use VM Scale Sets for auto-scaling applications across multiple VMs. Automation: Use ARM Templates, Terraform, or Azure CLI to automate VM provisioning. Azure DevOps Pipelines: Automate VM creation and deployment as part of a CI/CD pipeline. 6. Azure VM Security Azure Bastion: Secure RDP/SSH access to VMs without exposing public IPs. Disk Encryption: Configure Azure Disk Encryption to secure data at rest. Managed Identities: Implement MSI for secure access to Azure resources without credentials. SSH Key Management: Generate and use SSH keys for Linux VM access, as well as passwordless access for Windows VMs. 7. Backup and Disaster Recovery Azure Backup: Set up Azure Backup for VM snapshots and restoring VMs in case of failure. Azure Site Recovery (ASR): Replicate and failover VMs for disaster recovery scenarios. 8. Troubleshooting Diagnosing VM Issues: Diagnose and troubleshoot VMs that fail to start or have performance issues (check logs, resource utilization, and network connectivity). Monitoring and Alerts: Set up monitoring using Azure Monitor and create alerts based on VM metrics like CPU usage, memory consumption, or disk IOPS. 9. Cost Management Azure Reserved Instances: Understand the concept of reserved VM instances to save on long-term costs. Spot VMs: Use Azure Spot VMs for cost-effective workloads and understand their limitations. VM Pricing: Estimate costs and optimize VMs for pricing based on workload needs. 10. OS-Specific Knowledge Windows VMs: Setting up RDP, enabling WinRM for remote management, configuring updates, and managing licensing. Linux VMs: SSH access, handling Linux kernel updates, and automating tasks with scripts. Common Interview Questions How would you create a virtual machine in Azure and configure it with specific VM size and OS?",
    "tags": [],
    "title": "Part 02",
    "uri": "/part02/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure CLI Commands Overview Azure CLI is a command-line tool used to manage Azure resources. You can run Azure CLI commands to automate and streamline your workflows.\nInstallation To install Azure CLI, follow these steps:\nOn Linux (Ubuntu/Debian) curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash On macOS brew update \u0026\u0026 brew install azure-cli On Windows # Download the installer from the official website: https://aka.ms/installazurecliwindows Azure CLI Login Before using Azure CLI, you need to log in to your Azure account.\naz login az login --use-device Managing Azure Resources Create a Resource Group To create a resource group, use the following command:\naz group create --name MyResourceGroup --location eastus Create a Virtual Machine To create a virtual machine (VM) in a resource group:\naz vm create \\ --resource-group MyResourceGroup \\ --name MyVM \\ --image UbuntuLTS \\ --admin-username azureuser \\ --generate-ssh-keys List Virtual Machines To list all the virtual machines in a resource group:\naz vm list --resource-group MyResourceGroup --output table Start a Virtual Machine To start a stopped VM:\naz vm start --resource-group MyResourceGroup --name MyVM Stop a Virtual Machine To stop a running VM:\naz vm stop --resource-group MyResourceGroup --name MyVM Managing Storage Create a Storage Account To create a storage account:\naz storage account create \\ --name mystorageaccount \\ --resource-group MyResourceGroup \\ --location eastus \\ --sku Standard_LRS List Storage Accounts To list all storage accounts:\naz storage account list --resource-group MyResourceGroup --output table Managing Networking Create a Virtual Network To create a virtual network:\naz network vnet create \\ --resource-group MyResourceGroup \\ --name MyVNet \\ --address-prefix 10.0.0.0/16 Create a Subnet To create a subnet in a virtual network:\naz network vnet subnet create \\ --resource-group MyResourceGroup \\ --vnet-name MyVNet \\ --name MySubnet \\ --address-prefix 10.0.0.0/24 Other Useful Commands Show Help for a Command To show help for a specific command:\naz \u003ccommand\u003e --help Get the CLI Version To check the version of the Azure CLI:\naz --version Get the currently logged in user az account list -o table Conclusion Azure CLI is a powerful tool for managing Azure resources through the command line. For more detailed documentation, visit the official Azure CLI documentation here.\nAzure Cloud Shell Azure Authentications Azure Service Principle Azure Managed Identity User Assigned System Assigned",
    "description": "Azure CLI Commands Overview Azure CLI is a command-line tool used to manage Azure resources. You can run Azure CLI commands to automate and streamline your workflows.\nInstallation To install Azure CLI, follow these steps:\nOn Linux (Ubuntu/Debian) curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash On macOS brew update \u0026\u0026 brew install azure-cli On Windows # Download the installer from the official website: https://aka.ms/installazurecliwindows Azure CLI Login Before using Azure CLI, you need to log in to your Azure account.",
    "tags": [],
    "title": "Part 03",
    "uri": "/part03/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Creating an Image of a Azure VM Azure Virtual Machine Scale Set Azure Virtual Machine Restore Point What is “Capture”? In Azure, capture is the process of creating an image from an existing Virtual Machine (VM). This image can be used to deploy new VMs or Virtual Machine Scale Sets (VMSS) with the exact same settings and configurations as the source VM.\nWhy Use Capture? Capturing a VM provides a reusable base configuration, which includes:\nOperating System (OS): The OS and its current state. Installed Applications: Any software installed on the VM. System Settings and Configurations: Preserved settings, such as environment variables, installed packages, and network configurations. Types of Capture OS Disk Snapshot: Captures only the OS disk, useful for backup or duplication without including data disks. Full VM Image: Captures the complete state, including attached data disks, and is ideal for creating multiple identical VMs or scaling with VMSS. Creating an Image of an Azure VM Steps to Capture an Image of a VM (Full VM Snapshot) Navigate to Azure Portal\nOpen the Azure Portal. Locate the Virtual Machine\nGo to Virtual Machines in the portal and select the VM you want to capture. Generalize the VM (If Needed)\nLinux VM: SSH into the VM and run: sudo waagent -deprovision+user -force Windows VM: RDP into the VM and run sysprep: Go to C:\\Windows\\System32\\Sysprep, run sysprep.exe, select Enter System Out-of-Box Experience (OOBE), and check Generalize. Click OK. Stop the VM after generalizing to prepare it for image creation. Capture the Image\nSelect the VM, go to Overview, and click Capture. In the Capture panel, configure the following: Name: Provide a unique name for the image. Resource Group: Select a resource group for the image. Delete VM After Image Creation: Choose this option if you want to automatically delete the VM after creating the image. Review and Create\nClick Review + create, then Create to capture the VM image. Use Image for New Deployments\nThe image will be saved under Images in the selected resource group, allowing you to use it for deploying new VMs based on this configuration. This process captures a full image of the VM, including OS configurations and disk data, making it reusable for future deployments.\nAzure Virtual Machine Scale Sets (VMSS) Azure Virtual Machine Scale Sets (VMSS) allow you to create and manage a group of identical, load-balanced virtual machines that can automatically scale in response to demand. VMSS helps build scalable, resilient applications and services without manual intervention.\nKey Features of VMSS Automatic Scaling\nVMSS can scale the number of VM instances up or down based on: CPU Utilization: Increase instances when CPU usage is high, decrease them when low. Memory Usage: Scale based on memory needs. Custom Metrics: Use custom autoscaling rules specific to your application. This ensures resources match the workload demands, optimizing costs and performance. Load Balancing\nVMSS distributes incoming traffic across all VM instances using an Azure Load Balancer or Application Gateway. This evens out the load, enhancing availability and performance. High Availability and Fault Tolerance\nVMSS can spread VM instances across Availability Zones or Availability Sets for resilience and to prevent single points of failure. Integration with Azure Networking and Storage\nVMSS supports Azure storage for persistent data and integrates with Virtual Networks (VNet), ensuring secure communication and scalability. Custom VM Images\nVMSS can use either standard Azure images or custom images (such as images captured from existing VMs), enabling easy deployment of instances with pre-configured software and settings. Common Use Cases for VMSS Web and Application Hosting\nDeploy large web applications or API services that need to scale with user demand, improving response times and handling high traffic. Big Data and Batch Processing\nRun compute-intensive workloads (e.g., data processing, simulations) that can benefit from parallel processing on multiple VMs. Microservices Architecture\nUse VMSS to scale microservices components individually, each with isolated scaling and deployment options. Creating an Image for Azure Virtual Machine Scale Sets (VMSS) To deploy multiple, identical VMs using a Virtual Machine Scale Set (VMSS), you can capture a VM image as the base configuration. Here’s how to create and use an image with VMSS.\nSteps to Capture an Image for VMSS Navigate to Azure Portal\nOpen the Azure Portal. Create or Customize the Source VM\nDeploy a VM with the desired configuration or customize an existing one (install necessary software, set configurations, etc.). Generalize the VM (If Needed)\nLinux VM: SSH into the VM and run: sudo waagent -deprovision+user -force Windows VM: RDP into the VM and run sysprep: Go to C:\\Windows\\System32\\Sysprep, run sysprep.exe, select Enter System Out-of-Box Experience (OOBE), and check Generalize. Click OK. Stop the VM after generalizing to prepare it for image creation. Capture the Image\nSelect the VM, go to Overview, and click Capture. In the Capture panel: Name: Enter a unique name for the image. Resource Group: Select a resource group for the image. Delete VM After Image Creation: Optionally, check this box if you no longer need the VM. Click Review + create and then Create to capture the VM image. Create a Virtual Machine Scale Set Using the Image\nGo to Virtual Machine Scale Sets in the Azure portal and click Create. Choose your Subscription and Resource Group. Under Image, select My Items and choose the image you created in the previous step. Configure VMSS settings (size, number of instances, networking, etc.) as needed. Complete the VMSS Creation\nAfter configuring, click Review + create and then Create to deploy the scale set using the custom image. This image-based VMSS deployment allows you to create identical, scalable instances across multiple VMs with the same preconfigured settings.\nAzure Virtual Machine Restore Point Overview Azure VM Restore Points allow you to create consistent snapshots of your virtual machines. These restore points capture the state of a VM’s disk(s), which can be used to restore the VM or individual disks in the future.\nFeatures Crash-Consistent and Application-Consistent Snapshots Incremental backups to optimize storage use. Restore entire VM or specific disks. Integration with Azure Backup for automated restore point management. Key Components Restore Point Collection: A container that holds restore points for a VM. Restore Point: A snapshot of the VM’s disks at a specific point in time. Disk Snapshot: A snapshot of an individual disk. Use Cases Disaster recovery. Testing and development using a point-in-time VM snapshot. Rollback changes after updates or application installations. Steps to Create a Restore Point 1. Using the Azure Portal Go to Virtual Machines in the Azure Portal. Select the VM you want to back up. Navigate to Backup \u003e Restore Points. Click + Create to create a restore point. Select Crash-Consistent or Application-Consistent based on your needs. Confirm and create the restore point. Application-consistent Uses the Volume Shadow Copy Service (VSS) to ensure that application data is consistent before creating a restore point. This model is supported for VMs running Windows operating systems.\nCrash-consistent Stores snapshots of all managed disks attached to a VM. This model is available in preview and can be used for agentless VM backups.\n2. Using Azure CLI # Create a restore point collection az restore-point create --resource-group \u003cResourceGroupName\u003e \\ --vm-name \u003cVMName\u003e \\ --name \u003cRestorePointName\u003e Steps to Restore a Virtual Machine 1. Restore Entire VM Navigate to the Restore Points of the desired VM. Select the restore point you want to use. Choose Restore VM. Configure the new VM settings if required. Start the restore process. 2. Restore Individual Disks Navigate to Restore Points. Select the restore point and disk you want to restore. Use the restored disk to replace the original disk or attach it to a new VM. Points: VM restore points are incremental. The first restore point stores a full copy of all disks attached to the VM. For each successive restore point for a VM, only the incremental changes to your disks are backed up. To reduce your costs, you can optionally exclude any disk when you create a restore point for your VM.",
    "description": "Creating an Image of a Azure VM Azure Virtual Machine Scale Set Azure Virtual Machine Restore Point What is “Capture”? In Azure, capture is the process of creating an image from an existing Virtual Machine (VM). This image can be used to deploy new VMs or Virtual Machine Scale Sets (VMSS) with the exact same settings and configurations as the source VM.\nWhy Use Capture? Capturing a VM provides a reusable base configuration, which includes:",
    "tags": [],
    "title": "Part 04",
    "uri": "/part04/index.html"
  },
  {
    "breadcrumb": "",
    "content": "1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.\nClick Add Subnet.\nName: Give a name to your subnet (e.g., FrontEndSubnet). Subnet Address Range: Enter a subnet address range (e.g., 10.0.1.0/24). Click Add to add the subnet.\n(Repeat this step if you want to add more subnets.)\nStep 5: Configure Security (Optional) In the Security tab, you can enable security features:\nBastionHost: Secure RDP/SSH access to VMs without public IP. Firewall: Add Azure Firewall to control traffic to/from the VNet. DDoS protection: Enable Standard DDoS protection for better security. Configure these options as required and proceed to the next step.\nStep 6: Review and Create Review all the settings and ensure that everything is configured correctly. Click Review + Create. Once validation is passed, click Create to deploy the VNet. Step 7: Verify the Virtual Network After the deployment is complete, navigate to Resource Groups and select the resource group where the VNet was created. Click on the Virtual Network to see the details of the newly created VNet. Verify the Address Space, Subnets, and other settings to ensure they are correctly configured. Additional Configurations Step 8: Add Network Security Groups (NSGs) In the VNet page, select Subnets. Click on the desired subnet to attach a Network Security Group (NSG). Select an existing NSG or create a new one to define inbound/outbound rules. Step 9: Enable VNet Peering (Optional) If you want to connect this VNet to another VNet, go to the Peerings section. Click Add Peering. Name: Enter a name for the peering connection. Virtual Network Deployment Model: Select the deployment model (usually Resource Manager). Peering Status: Choose the desired configuration (Allow/Block traffic). Click Add to establish peering. Example VNet Configuration VNet: MyVNet Address Space: 10.0.0.0/16 Subnets: - FrontEndSubnet: 10.0.1.0/24 - BackEndSubnet: 10.0.2.0/24 NSGs: - FrontEndNSG: Applied to FrontEndSubnet - BackEndNSG: Applied to BackEndSubnet Azure VNet Peering Examples Example 1: Peering Between Two VNets in the Same Region Overview VNet1 and VNet2 are located in the same region. The goal is to enable communication between resources in both VNets via VNet peering. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.1.0.0/16 Both VNets should not have overlapping address ranges. Steps to Peer VNet1 with VNet2 Go to VNet1:\nIn the Azure Portal, navigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2. Traffic to Remote Network: Select Allow traffic from VNet1 to VNet2. Traffic Forwarding: Enable Allow Gateway Transit (if using one VNet’s gateway to access the internet). Allow Virtual Network Access: Yes. Click Add. Go to VNet2:\nIn the Azure Portal, navigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1. Traffic to Remote Network: Select Allow traffic from VNet2 to VNet1. Allow Virtual Network Access: Yes. Click Add. Example 2: Peering Between Two VNets in Different Regions (Global VNet Peering) Overview VNet1 is in the East US region. VNet2 is in the West Europe region. We will establish Global VNet Peering between these two VNets. Prerequisites VNet1 Address Space: 10.0.0.0/16 (East US) VNet2 Address Space: 10.2.0.0/16 (West Europe) Both VNets must not have overlapping IP address ranges. Steps to Peer VNet1 (East US) with VNet2 (West Europe) Go to VNet1 (East US):\nIn the Azure Portal, navigate to Virtual Networks and select VNet1 (in the East US region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2 (in the West Europe region). Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Allow Gateway Transit: Enable this if needed (for shared VPN gateways). Click Add. Go to VNet2 (West Europe):\nIn the Azure Portal, navigate to Virtual Networks and select VNet2 (in the West Europe region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1 (in the East US region). Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Allow Gateway Transit: Enable this if needed. Click Add. Example 3: VNet Peering with Different Subscriptions Overview VNet1 and VNet2 are located in different subscriptions. The goal is to peer these VNets for communication. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.3.0.0/16 Both VNets must belong to separate Azure subscriptions, but they must not have overlapping address ranges. Ensure the subscriptions are associated with the same Azure Active Directory (AAD) tenant. Steps to Peer VNet1 with VNet2 Across Subscriptions Go to VNet1 (Subscription A):\nNavigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2 (in a different subscription):\nName: VNet1-to-VNet2 Remote Virtual Network: Use the Resource ID of VNet2. To get the resource ID of VNet2, go to VNet2 in Subscription B, click on Properties, and copy the Resource ID. Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Click Add. Go to VNet2 (Subscription B):\nNavigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1 (in a different subscription):\nName: VNet2-to-VNet1 Remote Virtual Network: Use the Resource ID of VNet1 (from Subscription A). Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Click Add. VNet Peering Considerations: No Overlapping IP Address Ranges: VNets being peered cannot have overlapping address spaces. Data Transfer Costs: Data transferred between peered VNets is charged, especially across regions (Global Peering). Gateway Transit: If you want one VNet to use another VNet’s VPN gateway, enable Gateway Transit during peering setup. Security: Use Network Security Groups (NSGs) to control traffic between peered VNets. Reference Links: Azure VNet Peering Global VNet Peering Azure Network Watcher Overview Azure Network Watcher is a regional service that provides tools to monitor, diagnose, and gain insights into your Azure Virtual Network (VNet). It helps troubleshoot network connectivity issues, analyze network performance, and understand network traffic in Azure.\nKey Features of Azure Network Watcher Connection Monitor: Monitor the connectivity status between an Azure virtual machine and an endpoint. IP Flow Verify: Check if traffic is allowed or denied to or from a virtual machine, based on the security group rules. Network Performance Monitor: Measure the performance between VNets, regions, or the on-premises environment. Topology: Visualize the network topology of resources within a VNet. Next Hop: Analyze the next hop for network traffic from a virtual machine. Security Group View: List the network security group (NSG) rules associated with a virtual machine. Packet Capture: Capture packets to and from a virtual machine for analysis. Diagnostic Logs: View diagnostic logs for network resources like NSGs, Load Balancers, and Gateways. Connection Troubleshoot: Test the connection between a source and destination to identify any bottlenecks. How to Enable Azure Network Watcher Step 1: Enable Network Watcher In the Azure Portal, search for Network Watcher. Select Network Watcher from the list. Choose the Subscription and Region where your resources are located. If Network Watcher is not enabled in your region, click on Enable to enable it for that region. Step 2: Verify Network Watcher is Enabled After enabling, go to the Network Watcher resource in your selected region. In the left-hand menu, you will see a list of tools like Connection Monitor, IP Flow Verify, Topology, etc. Network Watcher Tools 1. Connection Monitor Purpose: Monitor the connectivity between a virtual machine and a given destination (another VM, an on-premises network, or a public endpoint). Steps: Go to Connection Monitor under Network Watcher. Click + Add to create a new monitor. Provide the source (VM) and destination (IP address, FQDN, etc.). Configure monitoring parameters like frequency and protocol. Click Create to start monitoring. 2. IP Flow Verify Purpose: Check if a specific packet is allowed or denied based on the Network Security Group (NSG) rules. Steps: Go to IP Flow Verify. Select the Subscription and VM. Enter the Direction (inbound or outbound), Local IP, Remote IP, Port, and Protocol. Click Check to determine if the traffic is allowed or denied. 3. Topology Purpose: Generate a visual map of your VNet, including subnets, virtual machines, NICs, and NSGs. Steps: Go to Topology. Select the Subscription and Resource Group. A visual representation of your network resources will be generated. You can export the topology as a JSON file. 4. Next Hop Purpose: Analyze the route that outbound traffic from a virtual machine will take, based on the routing table. Steps: Go to Next Hop. Select the Subscription, Virtual Machine, Network Interface, and Source IP. Click Next Hop to see the routing information. 5. Packet Capture Purpose: Capture inbound and outbound traffic from a virtual machine’s network interface. Steps: Go to Packet Capture. Select the Virtual Machine you want to capture traffic from. Configure the capture settings such as filter, storage location (Storage Account or local VM disk), and time duration. Start the capture and analyze the results. 6. Connection Troubleshoot Purpose: Troubleshoot the connection between a source and a destination to identify potential issues. Steps: Go to Connection Troubleshoot. Select the Subscription, Source (VM), and Destination (IP address or FQDN). Specify the Protocol (TCP/UDP) and Port. Click Check to troubleshoot the connection. Example: Verify IP Flow Scenario You have a virtual machine that cannot reach a specific endpoint. You want to verify if the NSG rules are blocking the traffic.\nSteps Navigate to Network Watcher in the Azure Portal. Under IP Flow Verify, select the virtual machine having issues. Input the following details: Direction: Inbound (or Outbound) Local IP: The IP of the virtual machine. Remote IP: The IP of the endpoint. Local Port: The port you are trying to access on the VM. Remote Port: The port being accessed from the remote endpoint. Protocol: TCP or UDP. Click Check to see if the traffic is allowed or denied based on the current NSG rules. Pricing Network Watcher comes with a set of free limits and paid tiers. Most features, like topology and NSG diagnostics, are free. However, features like Packet Capture and Connection Monitor may have associated costs.\nReference Pricing: Packet Capture: Based on the amount of data captured and stored. Connection Monitor: Based on the number of checks and monitoring frequency. For more information, check the official Azure Pricing Calculator.\nReference Links Azure Network Watcher Documentation Troubleshoot with Network Watcher Pricing for Network Watcher Azure Networking Tasks \u0026 Common Interview Topics 1. Virtual Networks (VNet) Creating and Configuring VNets: Understanding how to create, manage, and assign VNets. Knowing how to break up address spaces into subnets and how to allocate CIDR blocks. Subnets: Creating multiple subnets, routing traffic between subnets, and configuring subnet delegation to specific Azure services (e.g., Virtual Machines, App Services). Service Endpoints and Private Endpoints: Configuring service endpoints for services like Azure SQL, and creating private endpoints to secure Azure resources. Common Interview Questions: What is a VNet in Azure, and how does it differ from a traditional network? How do you configure subnets within a VNet, and what considerations do you need to make for CIDR block assignment? What are service endpoints and private endpoints in Azure? When would you use each? How would you peer two VNets, and what are the security implications? 2. Network Security Groups (NSGs) Configuring NSG Rules: Creating and managing inbound and outbound security rules. Understanding how to configure port, IP, and protocol-based access control. Application Security Groups (ASGs): Grouping VMs into logical ASGs to simplify security rule management. Common Interview Questions: What are Network Security Groups, and how do they control traffic? How do you set up an NSG rule to block all traffic except SSH (port 22) for a specific VM? Explain the difference between an NSG and an ASG. How are they used together? How would you troubleshoot if a VM is unable to connect due to NSG rules? 3. Public and Private IP Addressing Configuring Public and Private IPs: Assigning static or dynamic public IPs and private IPs to resources like Virtual Machines or Load Balancers. Elastic IPs and IP Allocation: Understanding IP address allocation for scaling resources and avoiding IP exhaustion. Common Interview Questions: What’s the difference between a public and private IP in Azure, and how are they used? How would you assign a static IP to a VM, and when would this be necessary? How do you ensure high availability when using public IP addresses with Azure services? 4. Azure Load Balancer Setting up Load Balancers: Configuring an Azure Load Balancer for distributing traffic across multiple VMs. Health Probes: Configuring health probes for monitoring VM availability. Internal vs. External Load Balancers: Understanding when to use an internal load balancer (for private resources) vs. external. Common Interview Questions: Explain how Azure Load Balancers work, and what types are available? How would you configure a health probe for an Azure Load Balancer? What is the difference between an internal and external load balancer, and in which scenarios would you use each? 5. Azure Application Gateway (Layer 7 Load Balancing) Application Gateway Setup: Configuring Azure Application Gateway for Layer 7 load balancing with SSL termination and URL-based routing. WAF (Web Application Firewall): Configuring WAF to protect applications against common web exploits. Common Interview Questions: What’s the difference between an Azure Load Balancer and Azure Application Gateway? How does SSL termination work on Application Gateway, and why is it important? When would you use WAF in conjunction with Application Gateway? 6. Virtual Network Peering VNet Peering: Setting up VNet peering to connect two virtual networks, allowing resources in both networks to communicate. Global VNet Peering: Connecting VNets across different regions. Common Interview Questions: What is VNet peering, and how does it work in Azure? How would you set up peering between two VNets in different regions (global VNet peering)? How is routing between peered VNets managed, and what are the cost implications? 7. Azure VPN Gateway Configuring Site-to-Site VPN: Setting up a VPN Gateway for a secure connection between on-premises networks and Azure VNets. Point-to-Site VPN: Setting up a point-to-site VPN for secure remote access from individual devices to Azure VNets. ExpressRoute: Understanding the differences between VPN Gateway and ExpressRoute for hybrid network connectivity. Common Interview Questions: What is the difference between Site-to-Site VPN and Point-to-Site VPN in Azure? How does Azure VPN Gateway differ from ExpressRoute, and when would you choose one over the other? What are the steps to configure a Site-to-Site VPN connection between an on-premises network and Azure? 8. Azure DNS and Custom DNS Configuring DNS: Understanding how to set up DNS zones and records for your resources in Azure. Custom DNS: How to configure custom DNS servers for VNets and enforce DNS name resolution for resources in your network. Common Interview Questions: What is Azure DNS, and how is it used to manage domain names in the cloud? How would you configure custom DNS servers for your Azure resources? What is the difference between Azure DNS and an external DNS provider? 9. Traffic Manager Traffic Manager Profiles: Configuring Azure Traffic Manager for global DNS-based traffic routing across multiple regions. Routing Methods: Understanding different routing methods (e.g., priority, performance, geographic) for distributing traffic. Common Interview Questions: What is Azure Traffic Manager, and how does it work? What are the different traffic routing methods available in Traffic Manager, and when would you use them? How do you ensure high availability across multiple regions using Azure Traffic Manager? Common Networking Interview Questions What is the difference between a VNet and a subnet in Azure? Explain how NSGs work and how they control traffic within a VNet. How do you assign a public IP to a VM, and when would you use a static vs. dynamic IP? What is VNet peering, and how is it different from using a VPN Gateway? Describe the process of setting up a load balancer for a group of VMs in Azure. How would you configure DNS for an Azure VNet? Can you use custom DNS servers? What are service endpoints, and how do they help secure access to Azure resources? How do you monitor network traffic and performance in Azure? How does Azure handle hybrid network connectivity, and what are the differences between VPN Gateway and ExpressRoute? What is the role of Azure Traffic Manager, and how does it differ from Azure Load Balancer? This list covers the most commonly used tasks and scenarios in Azure Networking and some of the key questions asked in interviews. Understanding these concepts will help you demonstrate your knowledge and problem-solving abilities during interviews.\nAzure Service Endpoint vs. Private Endpoint Azure offers Service Endpoints and Private Endpoints to secure traffic between virtual networks (VNets) and Azure services. Below is an overview of their key differences, use cases, and benefits.\nAzure Service Endpoint An Azure Service Endpoint extends a VNet to Azure services by enabling secure access through the Azure backbone network, bypassing the public internet.\nKey Features Secures traffic between VNet and Azure services (e.g., Azure Storage, Azure SQL Database) over the Azure backbone. Simplifies network architecture by removing the need for public IP whitelisting. Supports identity-based access control via Azure AD and service firewalls. No additional cost beyond standard Azure VNet charges. Use Cases Securing traffic to Azure PaaS services like Azure Storage or SQL Database from VMs or on-premises. Use in environments where simplicity and cost efficiency are key. Limitations Traffic still originates from the public IP address of the VNet/Subnet. Limited to supported Azure services. Azure Private Endpoint An Azure Private Endpoint creates a private IP within your VNet that is directly connected to a specific instance of an Azure service.\nKey Features Provides a fully private connection to Azure services, eliminating public IP exposure. Works with a variety of services, including Azure Storage, SQL Database, and more. Supports DNS configuration to resolve the private IP for the service. Charged based on Private Endpoint usage. Use Cases Scenarios requiring strict isolation and compliance by keeping all traffic private. Connecting from on-premises environments via VPN or ExpressRoute. Securing Azure services used by multi-tenant applications. Limitations Requires additional setup for DNS resolution. Costlier compared to Service Endpoints. Comparison Table Feature Service Endpoint Private Endpoint Traffic Path Uses Azure backbone but originates from public IP. Fully private connection within the VNet. Public Exposure Service IP is public but accessed securely. Service is completely isolated within the VNet. Use Cases Simple scenarios for securing Azure services. Strict compliance or private communication. Supported Services Limited to certain Azure PaaS services. Supported by many Azure services. Cost No additional cost. Charged for Private Endpoint usage. DNS Configuration Not required. Required for resolving private IPs. On-Premises Access Supported via VPN/ExpressRoute with public IP. Supported via VPN/ExpressRoute over private IP. Choosing Between Service Endpoint and Private Endpoint Use Service Endpoint if:\nYou need a cost-effective and simple solution to secure traffic. Public IP exposure is acceptable. Use Private Endpoint if:\nYou require full isolation and compliance with strict security policies. You need private connections to specific Azure service instances.",
    "description": "1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.",
    "tags": [],
    "title": "Part 05",
    "uri": "/part05/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure Load Balancer Azure Application Gateway Azure Front Door Azure Traffic Manager Azure CDN Azure Load Balancer An Azure Load Balancer is a fully managed service that provides high availability by distributing incoming network traffic across multiple servers or virtual machines (VMs). It helps ensure that your applications remain available, scalable, and fault-tolerant.\nTypes of Azure Load Balancer Basic Load Balancer\nDesigned for small-scale applications and services. Supports only one region and is ideal for development and test environments. Limited configuration options compared to Standard Load Balancer. Standard Load Balancer\nMore advanced, suitable for production environments. Supports multiple regions and larger, more complex workloads. Offers advanced features like health probes, NAT rules, and cross-region load balancing. Supports both internal and public load balancing. Key Features of Azure Load Balancer High Availability\nDistributes traffic across multiple VMs or services, ensuring that your application remains available even if one or more VMs become unhealthy or fail. Supports automatic rerouting of traffic in case of VM failure. Health Probes\nMonitors the health of backend resources (e.g., VMs or applications) by sending periodic requests to check if they are responsive. Ensures that traffic is only routed to healthy resources. Internal and External Load Balancing\nPublic Load Balancer: Distributes traffic from the internet to VMs or services in a virtual network. Internal Load Balancer: Distributes traffic between VMs within a private virtual network, suitable for internal services. Automatic Scaling\nWorks with Virtual Machine Scale Sets (VMSS) to scale the application up or down based on demand, automatically adjusting the number of VMs in the pool. Cross-Zone Load Balancing\nDistributes traffic across multiple Availability Zones to ensure better availability and fault tolerance. Support for IPv6\nAzure Load Balancer supports IPv6 for both internal and public load balancing. How Azure Load Balancer Works Azure Load Balancer uses Layer 4 (TCP/UDP) load balancing, meaning it works at the transport layer of the OSI model. It routes traffic based on the IP address and port to the appropriate backend VM or service. Traffic distribution is done using algorithms like Round Robin, Least Connections, or Source IP Affinity. Use Cases for Azure Load Balancer Web and Application Traffic Distribution\nDistribute user requests to multiple web servers or application instances, ensuring better resource utilization and faster response times. Microservices Architecture\nRoute traffic between different services within a microservices architecture, ensuring each service is scaled according to demand. High Availability Services\nEnsure that mission-critical applications like databases, web servers, or API services remain available even if individual VMs or services fail. Hybrid Applications\nAzure Load Balancer can be used to distribute traffic across both on-premises and Azure-based applications. Azure Load Balancer: Basic vs. Standard Azure Load Balancer provides high availability and load balancing for your applications. It is available in two tiers: Basic and Standard. Below is a comparison of the key features and differences:\n1. Availability Feature Basic Load Balancer Standard Load Balancer SLA Not provided 99.99% availability Availability Zones Not supported Zone-redundant and zonal Regional Balancing Single region Regional balancing supported 2. Scalability Feature Basic Load Balancer Standard Load Balancer Backend Pool Size Up to 300 instances Up to 1000 instances Outbound Connections Limited Scalable High Scalability Limited Optimized for large workloads 3. Security Feature Basic Load Balancer Standard Load Balancer Virtual Network Integration Public IP only Full VNet integration NSG Association Not supported Supported Backend Pool Connectivity Unrestricted Secure (VMs explicitly defined) 4. Features Feature Basic Load Balancer Standard Load Balancer Protocol Support TCP/UDP TCP/UDP Health Probes Basic Enhanced Cross-Zone Load Balancing Not supported Supported 5. Cost Feature Basic Load Balancer Standard Load Balancer Pricing Model Free for basic features Pay-as-you-go Billing No cost for data processing Charges based on usage Key Recommendations Use Basic Load Balancer for simple, small-scale applications where cost is a primary concern, and high availability is not critical. Use Standard Load Balancer for production workloads requiring enhanced security, scalability, and reliability. References:\nAzure Load Balancer Documentation Configuring Azure Load Balancer Create Load Balancer:\nGo to Azure Portal, navigate to Load Balancers, and click Create. Choose Public or Internal based on your needs. Select your Resource Group, Region, and other basic configuration settings. Set Up Backend Pool:\nDefine the backend pool with the VMs or instances that will receive traffic. Choose the VMs manually or use a Virtual Machine Scale Set for automatic scaling. Configure Health Probes:\nCreate health probes to monitor the availability of backend VMs or services. Set parameters such as protocol, port, and interval for the probe. Create Load Balancing Rules:\nDefine rules that specify how traffic is distributed to backend VMs. Configure the ports, IPs, and protocols (e.g., HTTP, HTTPS, or custom TCP). Review and Create:\nReview your settings and click Create to deploy the load balancer. Azure Load Balancer helps ensure your services remain highly available and can scale as needed, delivering better performance and fault tolerance for your applications.\nAzure Application Gateway Azure Application Gateway is a web traffic load balancer that enables you to manage and route traffic based on advanced HTTP(S) routing rules. It operates at the Application Layer (Layer 7) of the OSI model, which allows for more granular control of web traffic compared to Layer 4 load balancers like the Azure Load Balancer.\nKey Features of Azure Application Gateway Layer 7 Load Balancing\nUnlike the Azure Load Balancer, which works at Layer 4 (TCP/UDP), Application Gateway works at Layer 7 (HTTP/HTTPS), allowing routing decisions based on URL paths, host headers, HTTP methods, and other content-based criteria. URL-based Routing\nApplication Gateway can route traffic based on the URL path, enabling you to route different types of traffic to different backend pools. For example: /images can route to one pool of servers. /api can route to another pool. Host-based Routing\nTraffic can be routed based on the domain name (host) in the request. This is useful for multi-tenant applications or handling traffic for multiple websites hosted behind the same gateway. SSL/TLS Termination\nApplication Gateway can handle SSL/TLS termination (decryption of secure traffic). This offloads the decryption process from backend servers, improving their performance. Web Application Firewall (WAF)\nApplication Gateway integrates with Azure Web Application Firewall (WAF), providing centralized protection against common threats like SQL injection, cross-site scripting (XSS), and other OWASP top 10 vulnerabilities. WAF can be configured with custom rules for enhanced security. Autoscaling\nAzure Application Gateway supports autoscaling, which adjusts the number of gateway instances based on the incoming traffic, ensuring that you always have the right amount of resources to handle the load. Session Affinity (Cookie-based routing)\nApplication Gateway can route requests from a particular user to the same backend server using session affinity (based on a cookie). This ensures that requests from the same user are consistently handled by the same backend for stateful applications. Multi-site Hosting\nSupports hosting multiple websites on the same Application Gateway, routing traffic based on different URL paths or host headers. Custom Health Probes\nCustom health probes are available to monitor the health of backend servers or services. The gateway will only route traffic to healthy resources, ensuring availability. Redirection\nAzure Application Gateway allows you to redirect traffic from one URL to another. For example, you can configure it to redirect HTTP traffic to HTTPS. How Azure Application Gateway Works Traffic Routing: When a request is sent to an Application Gateway, the gateway inspects the HTTP(S) request based on the configured routing rules. The traffic is then directed to the appropriate backend pool or service. Health Monitoring: The gateway constantly monitors the health of backend servers using health probes. If a server is unhealthy, the gateway reroutes traffic to a healthy instance. SSL Termination: Application Gateway decrypts incoming SSL/TLS traffic, inspects the traffic, and forwards it to the backend as unencrypted HTTP traffic. This improves backend server performance by offloading SSL processing. Firewall Protection: The WAF functionality inspects HTTP traffic for malicious patterns, blocking traffic that matches predefined rules for common web vulnerabilities. Use Cases for Azure Application Gateway Web Application Load Balancing\nUse Application Gateway to balance traffic across multiple web servers, improving performance and availability for web applications. Secure Applications\nBy enabling SSL termination, WAF, and custom routing rules, Application Gateway helps secure web applications from attacks while ensuring optimal performance. Multi-Tenant Applications\nHost multiple websites or applications behind a single Application Gateway instance, using host-based or URL-based routing to direct traffic to the appropriate backend. Microservices Architecture\nDirect traffic to different backend services or microservices based on URL paths, allowing you to implement complex routing logic for distributed applications. Global Distribution and Traffic Optimization\nApplication Gateway integrates with Azure Front Door to provide global routing and load balancing for applications that need to scale across multiple regions. Configuring Azure Application Gateway Create Application Gateway:\nNavigate to Azure Portal, search for Application Gateway, and click Create. Choose your Subscription, Resource Group, and Region. Provide a name and configure basic settings like SKU and virtual network. Define Backend Pools:\nAdd backend servers or services to your backend pools (e.g., Virtual Machines, VM Scale Sets, or Web Apps). Set Up Routing Rules:\nDefine URL-based or host-based routing rules to specify how traffic is distributed to your backend pools. Configure Health Probes:\nSet up health probes to monitor the health of your backend services, ensuring only healthy instances receive traffic. Enable SSL Termination:\nUpload your SSL certificates and configure SSL termination for secure communication with clients. Configure Web Application Firewall (WAF):\nEnable and configure WAF to protect your application from common vulnerabilities and threats. Review and Deploy:\nReview all your configurations and click Create to deploy the Application Gateway. Azure Application Gateway provides intelligent load balancing, security features, and high availability for web applications, making it ideal for modern cloud-based web architectures. It ensures that applications are scalable, secure, and highly available while delivering fast, efficient traffic management.\nAzure Front Door Azure Front Door is a global, scalable entry point that optimizes the delivery of your applications and services. It provides high availability and performance by using intelligent routing and various features like SSL offloading, web application firewall, and content caching.\nKey Features of Azure Front Door Global Load Balancing\nAzure Front Door provides global load balancing to route traffic to the nearest region based on factors like latency, geography, and availability. It ensures that users always connect to the nearest available region for optimal performance. Web Application Firewall (WAF)\nAzure Front Door integrates with Web Application Firewall (WAF) to protect your applications from common threats and vulnerabilities, such as SQL injection, cross-site scripting (XSS), and bot attacks. It provides customizable security policies and automated rule sets for web traffic protection. SSL Offloading\nIt supports SSL/TLS termination, which offloads the encryption/decryption tasks from your backend services, improving performance and simplifying certificate management. Front Door automatically handles HTTPS traffic to secure your applications without burdening the origin server. Customizable Routing\nFront Door supports intelligent routing based on user-defined rules, allowing traffic to be directed to specific backend pools based on URL paths, HTTP methods, and headers. It can route traffic to specific regions or services to optimize the user experience. Global Caching\nFront Door caches static content closer to users at edge locations worldwide, improving response times for static content delivery. It reduces latency and helps improve the performance of content-heavy applications. URL Rewrite and Redirects\nAzure Front Door enables flexible URL rewriting and redirection rules to customize how requests are processed and directed to the appropriate backend. You can modify incoming requests or responses without the need to alter your backend code. Automatic Failover and High Availability\nFront Door provides automatic failover and traffic rerouting to ensure business continuity in case of backend failures or regional outages. It guarantees high availability by routing traffic to healthy backend endpoints. How Azure Front Door Works Global Distribution: Azure Front Door uses a global network of edge locations to route user requests to the closest available backend. Routing Methods: It uses various routing techniques: Latency-based routing: Routes requests to the backend with the lowest latency. Priority-based routing: Routes requests based on a configured priority. Weighted routing: Routes traffic to multiple backends based on weighted percentages. Health Probes: Azure Front Door continuously monitors the health of backend services and automatically routes traffic to healthy instances, ensuring high availability. Use Cases for Azure Front Door Global Web Application Delivery\nAzure Front Door is ideal for delivering globally distributed web applications that need to serve a large number of users from different regions with minimal latency. Multi-Region Application Architectures\nDistribute traffic intelligently across multiple Azure regions to improve availability and ensure disaster recovery, reducing downtime for critical applications. Enhanced Security for Web Applications\nProtect applications from threats with integrated WAF, SSL offloading, and custom routing rules that enhance both security and performance. High-Performance Content Delivery\nCache static content closer to end users, reducing load on backend services and improving the user experience for high-traffic applications. Load Balancing for Microservices\nUse Front Door to manage and balance traffic across multiple microservices deployed in different regions, ensuring seamless communication and fault tolerance. Configuring Azure Front Door Create Front Door Instance:\nGo to the Azure Portal, navigate to Front Door and click Create. Choose your Subscription, Resource Group, and Region. Provide a name for the Front Door instance and configure basic settings. Define Backend Pools:\nCreate backend pools with your services (e.g., VMs, web apps, or APIs). Configure load balancing settings for each backend to ensure optimal traffic distribution. Set Routing Rules:\nDefine routing rules that determine how traffic is directed to the backend pools. You can route based on URL paths, HTTP methods, and more. Enable Web Application Firewall (WAF):\nConfigure WAF policies to protect your application from common vulnerabilities and attacks. Set Up SSL/TLS Offloading:\nConfigure SSL certificates for Front Door to handle HTTPS traffic and offload SSL termination from backend servers. Review and Deploy:\nReview your settings and click Create to deploy your Azure Front Door instance. Azure Front Door is an effective solution for building highly available, secure, and performant web applications that serve users globally. It integrates load balancing, security features, and intelligent routing to provide a seamless experience across different regions and services.\nAzure Traffic Manager Azure Traffic Manager is a global DNS-based traffic load balancer that enables you to distribute traffic to different endpoints across the world. It allows you to optimize the performance of your applications by directing user requests to the closest or most available instance based on configurable routing policies.\nKey Features of Azure Traffic Manager DNS-based Traffic Distribution\nTraffic Manager works by managing DNS requests. When a user attempts to access a service, it returns the DNS records of the most appropriate endpoint based on the routing method and health of the endpoints. Multiple Routing Methods\nAzure Traffic Manager supports several routing methods that help optimize traffic flow to your resources: Priority-based Routing: Routes traffic to a primary endpoint and fails over to secondary endpoints based on their priority. Weighted Routing: Distributes traffic across multiple endpoints based on weights (percentage). Performance-based Routing: Directs traffic to the endpoint that offers the best performance (lowest latency) based on the user’s location. Geographic Routing: Routes traffic based on the geographical location of the user to comply with legal and regulatory requirements or to provide region-specific services. Multivalue Routing: Returns multiple healthy endpoints to clients, balancing traffic between them. Endpoint Monitoring\nTraffic Manager regularly checks the health of your endpoints using health probes to ensure they are available and responsive. If an endpoint is determined to be unhealthy, Traffic Manager routes traffic to the next healthiest endpoint automatically. Automatic Failover\nTraffic Manager provides high availability by routing traffic to healthy endpoints in the event of failures. This helps in creating a disaster recovery solution by balancing traffic between multiple regions or services. Global Reach and Redundancy\nTraffic Manager enables global load balancing by allowing you to distribute traffic across Azure regions or even on-premises data centers, providing geographic redundancy for your applications. Customizable TTL (Time-to-Live) Settings\nTraffic Manager allows you to configure the TTL for DNS records, controlling how frequently DNS information is refreshed across clients. Integration with Other Azure Services\nTraffic Manager can be integrated with other Azure services like Azure App Services, Virtual Machines, VM Scale Sets, Azure Web Apps, and custom endpoints (on-premises or other cloud providers). How Azure Traffic Manager Works DNS Request Handling:\nWhen a user tries to access an application or service, a DNS request is made to Azure Traffic Manager. Traffic Manager returns the IP address of the most appropriate endpoint based on the routing method, such as the nearest endpoint or the one with the best performance. Health Monitoring:\nTraffic Manager monitors the health of each endpoint through health probes. If an endpoint fails the health check, traffic is automatically redirected to the next available endpoint. Traffic Routing:\nThe routing decision is based on the routing method you’ve selected. For instance, with performance-based routing, traffic will be routed to the endpoint with the best performance for the user’s location. Use Cases for Azure Traffic Manager High Availability and Failover\nUse Traffic Manager to distribute traffic to multiple regional or global endpoints, ensuring that your application is highly available, with automatic failover in case of regional outages. Geographically Distributed Applications\nWhen your users are located in different parts of the world, you can use Traffic Manager to route traffic to the nearest available service, improving performance and reducing latency. Disaster Recovery\nImplement disaster recovery strategies by routing traffic to a secondary endpoint if the primary service becomes unavailable. Traffic Optimization\nUse performance-based routing to direct traffic to the endpoint that provides the best response time, based on real-time latency measurements. Regulatory Compliance\nUse geographic routing to direct users to the appropriate region to meet legal and regulatory requirements, such as data residency or locality laws. Configuring Azure Traffic Manager Create a Traffic Manager Profile:\nGo to the Azure Portal, search for Traffic Manager profiles, and click Create. Choose the Routing Method (e.g., Priority, Weighted, Performance, Geographic, or Multivalue). Configure a DNS name that will be used by Traffic Manager to route traffic. Define Endpoints:\nAdd the endpoints you want Traffic Manager to route to. These can be Azure services like App Services, Virtual Machines, or external endpoints such as on-premises servers or services outside of Azure. Configure Health Probes:\nSet up health probes to check the availability and performance of your endpoints. You can define the protocol (HTTP/HTTPS) and the URL path for the health probe. Define Routing Settings:\nSet weights for weighted routing or configure geographic settings for geographic routing. For performance-based routing, the system will automatically assess the best-performing endpoint for your users. Monitor and Adjust:\nTraffic Manager allows you to monitor the health and performance of your endpoints in real-time. Make adjustments to routing methods, endpoints, and health probes based on the results. Configure TTL:\nSet the TTL (Time-to-Live) for DNS responses to control how long clients cache the DNS information. Review and Deploy:\nAfter setting up routing rules, health checks, and endpoint configurations, review your setup and click Create. Azure Traffic Manager is ideal for improving the performance, availability, and resilience of your applications by intelligently distributing traffic across multiple endpoints. It allows for high flexibility, whether you are managing geographically distributed workloads, implementing disaster recovery, or optimizing performance.\nAzure CDN (Content Delivery Network) Azure Content Delivery Network (CDN) is a global network of servers that provides fast delivery of web content, such as HTML pages, images, videos, stylesheets, and scripts, by caching the content at strategically placed locations around the world. The main goal of Azure CDN is to reduce latency and improve the performance of your applications by serving content from a nearby location to the end user.\nKey Features of Azure CDN Global Reach\nAzure CDN has a vast network of servers distributed across many regions worldwide. This ensures that content is served from the closest edge node, reducing latency and improving performance for end users globally. Caching and Content Delivery\nAzure CDN caches static content at edge nodes and serves it directly to users, offloading traffic from your origin server. This helps to reduce load times for frequently accessed content and lowers the load on the origin server. Dynamic Site Acceleration\nWhile primarily focused on static content, Azure CDN also supports dynamic content acceleration, improving the performance of dynamic web pages by reducing latency and optimizing traffic routes between users and servers. Custom Domain and SSL Support\nAzure CDN allows you to use your own custom domain for content delivery and supports SSL for secure communication between clients and the CDN edge servers. Content Optimization\nAzure CDN can optimize content delivery by automatically compressing files (e.g., images, JavaScript, CSS) and using techniques such as caching headers and minification to improve load times. Security Features\nHTTPS Support: Azure CDN supports HTTPS, ensuring that content is delivered securely. DDoS Protection: Azure’s global network can help mitigate distributed denial-of-service (DDoS) attacks by handling traffic spikes and ensuring that content is served without interruption. Token Authentication: Protect your content by using token-based authentication to restrict access to specific users or applications. Analytics and Reporting\nAzure CDN provides detailed analytics and reporting on traffic, cache hit/miss ratios, content performance, and more, helping you monitor and optimize the delivery of your content. Custom Cache Control\nWith Azure CDN, you can configure cache settings to control how long content is cached at the edge nodes, and you can clear the cache when content is updated. Multiple CDN Providers\nAzure offers different CDN providers, including Microsoft CDN, Verizon, and Akamai. You can choose a provider based on your needs for performance, regional presence, and features. How Azure CDN Works Request Routing:\nWhen a user requests content, Azure CDN directs the request to the nearest edge server based on geographic location, network conditions, and other factors. Content Caching:\nThe edge server checks if the requested content is already cached. If it is, the server delivers the cached content directly to the user. If it’s not cached, the CDN server fetches the content from the origin server and caches it for future requests. Content Delivery:\nOnce the content is cached at the edge server, subsequent users who request the same content will receive it from the edge server, reducing latency and improving performance. Cache Expiration and Purge:\nContent in the cache is served for a specific duration (TTL - Time to Live) before it expires. After expiration, the CDN will fetch fresh content from the origin. You can also manually purge content from the cache if updates are required. Use Cases for Azure CDN Improved Website Performance\nServe static website content like images, stylesheets, and scripts from the nearest CDN edge node, reducing load times and improving user experience. Video Streaming\nDistribute media content such as videos and live streaming events to users across the world, providing high-quality, low-latency playback. API Acceleration\nAccelerate the delivery of dynamic API responses, reducing latency for API-driven applications. Global Web Applications\nAzure CDN is ideal for applications that are accessed by users globally. It reduces the time taken for requests to travel to the origin server by serving the content from nearby edge nodes. Software Downloads\nHost software packages, patches, and updates on Azure CDN to ensure faster download speeds for users worldwide. Configuring Azure CDN Create a CDN Profile:\nGo to the Azure Portal, search for CDN, and click Create. Choose your Subscription, Resource Group, and Region. Define a CDN Profile and provide a name for the profile. Choose CDN Provider:\nSelect a CDN provider, such as Microsoft, Verizon, or Akamai, based on your needs for performance and global reach. Create a CDN Endpoint:\nAdd an Endpoint to the CDN profile, where you specify the origin (e.g., Azure Blob Storage, Web App, or custom origin). Set the custom domain (if using one) and configure SSL certificates if necessary. Configure Caching Rules:\nDefine caching rules to control how long content is cached at edge nodes. You can customize the cache duration for different content types or files. Enable HTTPS:\nIf necessary, enable HTTPS for secure content delivery. You can use an Azure-managed certificate or your own custom certificate. Monitor Traffic and Performance:\nUse the Azure Portal to monitor CDN performance, cache hits/misses, traffic analytics, and other key metrics. Clear or Refresh Cache:\nYou can manually purge the cache or set up cache-control headers to refresh the content as needed. Benefits of Using Azure CDN Faster Content Delivery:\nBy caching content at edge locations, Azure CDN reduces latency and ensures faster content delivery, improving user experience. Scalability:\nAzure CDN is highly scalable and can handle large volumes of traffic without impacting performance, making it suitable for high-traffic websites and applications. Global Performance Optimization:\nAzure CDN ensures that content is served from the closest edge server to the user, optimizing performance globally and reducing the burden on your origin servers. Cost Savings:\nOffloading traffic to CDN reduces the load on your origin servers, which can lead to cost savings in infrastructure and bandwidth. Improved Availability:\nWith a global network of servers, Azure CDN improves the availability and reliability of content delivery, ensuring uptime even during traffic spikes. Azure CDN is a powerful tool to improve the performance, scalability, and availability of web applications by caching content at strategic locations worldwide. Whether you’re delivering static content, streaming media, or optimizing APIs, Azure CDN enhances the user experience by reducing latency and increasing the speed of content delivery.\nAzure Networking Services Comparison: Front Door vs. Load Balancer vs. Application Gateway vs. Traffic Manager Azure provides multiple networking services tailored for different scenarios. Here’s a detailed comparison of Azure Front Door, Azure Load Balancer, Azure Application Gateway, and Azure Traffic Manager:\n1. Purpose Service Purpose Azure Front Door Global load balancing and accelerated delivery of web applications across regions. Azure Load Balancer Provides Layer 4 (TCP/UDP) load balancing within a region for high availability. Azure Application Gateway Layer 7 (HTTP/HTTPS) load balancing with advanced application delivery features. Azure Traffic Manager DNS-based global traffic routing to distribute requests across multiple regions. 2. Layer of Operation Service Layer in OSI Model Azure Front Door Layer 7 (HTTP/HTTPS) Azure Load Balancer Layer 4 (TCP/UDP) Azure Application Gateway Layer 7 (HTTP/HTTPS) Azure Traffic Manager DNS-level routing (not tied to a specific OSI layer) 3. Key Features Service Key Features Azure Front Door Global distribution, caching, WAF, TLS termination, session affinity, path-based routing. Azure Load Balancer Low latency, regional load balancing, zonal support, outbound NAT. Azure Application Gateway URL-based routing, WAF, SSL offloading, session affinity, autoscaling. Azure Traffic Manager Geographic-based routing, performance-based routing, failover, priority routing. 4. Use Cases Service Typical Use Cases Azure Front Door Global web application delivery, CDN integration, multi-region redundancy. Azure Load Balancer Distributing traffic across VMs, containers, or services within a region. Azure Application Gateway Web application firewall (WAF), load balancing for APIs, SSL offloading. Azure Traffic Manager Disaster recovery, routing to the nearest region, region-specific failover. 5. Security Service Security Features Azure Front Door Web Application Firewall (WAF), DDoS protection, TLS termination. Azure Load Balancer NSG support, but no built-in WAF or TLS termination. Azure Application Gateway Integrated WAF, TLS termination, and secure traffic handling. Azure Traffic Manager No built-in security features; relies on endpoints’ security measures. 6. Global vs. Regional Service Scope Azure Front Door Global Azure Load Balancer Regional Azure Application Gateway Regional Azure Traffic Manager Global 7. Pricing Service Pricing Model Azure Front Door Based on data transfer, requests, and WAF policies. Azure Load Balancer Pay-as-you-go for rules, processed data, and outbound traffic. Azure Application Gateway Based on instance size, capacity units, and WAF usage. Azure Traffic Manager Based on number of DNS queries processed. Choosing the Right Service Scenario Recommended Service Delivering web applications globally with caching and acceleration. Azure Front Door Balancing traffic between VMs or containers in a single region. Azure Load Balancer Routing traffic to specific paths or URLs with advanced Layer 7 capabilities. Azure Application Gateway Distributing traffic globally and routing based on proximity or performance. Azure Traffic Manager References:\nAzure Front Door Documentation Azure Load Balancer Documentation Azure Application Gateway Documentation Azure Traffic Manager Documentation title: Azure Cloud Networking\ndescription: Azure Cloud weight: 3 icon: fab fa-azure\n1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.\nClick Add Subnet.\nName: Give a name to your subnet (e.g., FrontEndSubnet). Subnet Address Range: Enter a subnet address range (e.g., 10.0.1.0/24). Click Add to add the subnet.\n(Repeat this step if you want to add more subnets.)\nStep 5: Configure Security (Optional) In the Security tab, you can enable security features:\nBastionHost: Secure RDP/SSH access to VMs without public IP. Firewall: Add Azure Firewall to control traffic to/from the VNet. DDoS protection: Enable Standard DDoS protection for better security. Configure these options as required and proceed to the next step.\nStep 6: Review and Create Review all the settings and ensure that everything is configured correctly. Click Review + Create. Once validation is passed, click Create to deploy the VNet. Step 7: Verify the Virtual Network After the deployment is complete, navigate to Resource Groups and select the resource group where the VNet was created. Click on the Virtual Network to see the details of the newly created VNet. Verify the Address Space, Subnets, and other settings to ensure they are correctly configured. Additional Configurations Step 8: Add Network Security Groups (NSGs) In the VNet page, select Subnets. Click on the desired subnet to attach a Network Security Group (NSG). Select an existing NSG or create a new one to define inbound/outbound rules. Step 9: Enable VNet Peering (Optional) If you want to connect this VNet to another VNet, go to the Peerings section. Click Add Peering. Name: Enter a name for the peering connection. Virtual Network Deployment Model: Select the deployment model (usually Resource Manager). Peering Status: Choose the desired configuration (Allow/Block traffic). Click Add to establish peering. Example VNet Configuration VNet: MyVNet Address Space: 10.0.0.0/16 Subnets: - FrontEndSubnet: 10.0.1.0/24 - BackEndSubnet: 10.0.2.0/24 NSGs: - FrontEndNSG: Applied to FrontEndSubnet - BackEndNSG: Applied to BackEndSubnet Azure VNet Peering Examples Example 1: Peering Between Two VNets in the Same Region Overview VNet1 and VNet2 are located in the same region. The goal is to enable communication between resources in both VNets via VNet peering. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.1.0.0/16 Both VNets should not have overlapping address ranges. Steps to Peer VNet1 with VNet2 Go to VNet1:\nIn the Azure Portal, navigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2. Traffic to Remote Network: Select Allow traffic from VNet1 to VNet2. Traffic Forwarding: Enable Allow Gateway Transit (if using one VNet’s gateway to access the internet). Allow Virtual Network Access: Yes. Click Add. Go to VNet2:\nIn the Azure Portal, navigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1. Traffic to Remote Network: Select Allow traffic from VNet2 to VNet1. Allow Virtual Network Access: Yes. Click Add. Example 2: Peering Between Two VNets in Different Regions (Global VNet Peering) Overview VNet1 is in the East US region. VNet2 is in the West Europe region. We will establish Global VNet Peering between these two VNets. Prerequisites VNet1 Address Space: 10.0.0.0/16 (East US) VNet2 Address Space: 10.2.0.0/16 (West Europe) Both VNets must not have overlapping IP address ranges. Steps to Peer VNet1 (East US) with VNet2 (West Europe) Go to VNet1 (East US):\nIn the Azure Portal, navigate to Virtual Networks and select VNet1 (in the East US region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2 (in the West Europe region). Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Allow Gateway Transit: Enable this if needed (for shared VPN gateways). Click Add. Go to VNet2 (West Europe):\nIn the Azure Portal, navigate to Virtual Networks and select VNet2 (in the West Europe region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1 (in the East US region). Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Allow Gateway Transit: Enable this if needed. Click Add. Example 3: VNet Peering with Different Subscriptions Overview VNet1 and VNet2 are located in different subscriptions. The goal is to peer these VNets for communication. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.3.0.0/16 Both VNets must belong to separate Azure subscriptions, but they must not have overlapping address ranges. Ensure the subscriptions are associated with the same Azure Active Directory (AAD) tenant. Steps to Peer VNet1 with VNet2 Across Subscriptions Go to VNet1 (Subscription A):\nNavigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2 (in a different subscription):\nName: VNet1-to-VNet2 Remote Virtual Network: Use the Resource ID of VNet2. To get the resource ID of VNet2, go to VNet2 in Subscription B, click on Properties, and copy the Resource ID. Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Click Add. Go to VNet2 (Subscription B):\nNavigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1 (in a different subscription):\nName: VNet2-to-VNet1 Remote Virtual Network: Use the Resource ID of VNet1 (from Subscription A). Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Click Add. VNet Peering Considerations: No Overlapping IP Address Ranges: VNets being peered cannot have overlapping address spaces. Data Transfer Costs: Data transferred between peered VNets is charged, especially across regions (Global Peering). Gateway Transit: If you want one VNet to use another VNet’s VPN gateway, enable Gateway Transit during peering setup. Security: Use Network Security Groups (NSGs) to control traffic between peered VNets. Reference Links: Azure VNet Peering Global VNet Peering Azure Network Watcher Overview Azure Network Watcher is a regional service that provides tools to monitor, diagnose, and gain insights into your Azure Virtual Network (VNet). It helps troubleshoot network connectivity issues, analyze network performance, and understand network traffic in Azure.\nKey Features of Azure Network Watcher Connection Monitor: Monitor the connectivity status between an Azure virtual machine and an endpoint. IP Flow Verify: Check if traffic is allowed or denied to or from a virtual machine, based on the security group rules. Network Performance Monitor: Measure the performance between VNets, regions, or the on-premises environment. Topology: Visualize the network topology of resources within a VNet. Next Hop: Analyze the next hop for network traffic from a virtual machine. Security Group View: List the network security group (NSG) rules associated with a virtual machine. Packet Capture: Capture packets to and from a virtual machine for analysis. Diagnostic Logs: View diagnostic logs for network resources like NSGs, Load Balancers, and Gateways. Connection Troubleshoot: Test the connection between a source and destination to identify any bottlenecks. How to Enable Azure Network Watcher Step 1: Enable Network Watcher In the Azure Portal, search for Network Watcher. Select Network Watcher from the list. Choose the Subscription and Region where your resources are located. If Network Watcher is not enabled in your region, click on Enable to enable it for that region. Step 2: Verify Network Watcher is Enabled After enabling, go to the Network Watcher resource in your selected region. In the left-hand menu, you will see a list of tools like Connection Monitor, IP Flow Verify, Topology, etc. Network Watcher Tools 1. Connection Monitor Purpose: Monitor the connectivity between a virtual machine and a given destination (another VM, an on-premises network, or a public endpoint). Steps: Go to Connection Monitor under Network Watcher. Click + Add to create a new monitor. Provide the source (VM) and destination (IP address, FQDN, etc.). Configure monitoring parameters like frequency and protocol. Click Create to start monitoring. 2. IP Flow Verify Purpose: Check if a specific packet is allowed or denied based on the Network Security Group (NSG) rules. Steps: Go to IP Flow Verify. Select the Subscription and VM. Enter the Direction (inbound or outbound), Local IP, Remote IP, Port, and Protocol. Click Check to determine if the traffic is allowed or denied. 3. Topology Purpose: Generate a visual map of your VNet, including subnets, virtual machines, NICs, and NSGs. Steps: Go to Topology. Select the Subscription and Resource Group. A visual representation of your network resources will be generated. You can export the topology as a JSON file. 4. Next Hop Purpose: Analyze the route that outbound traffic from a virtual machine will take, based on the routing table. Steps: Go to Next Hop. Select the Subscription, Virtual Machine, Network Interface, and Source IP. Click Next Hop to see the routing information. 5. Packet Capture Purpose: Capture inbound and outbound traffic from a virtual machine’s network interface. Steps: Go to Packet Capture. Select the Virtual Machine you want to capture traffic from. Configure the capture settings such as filter, storage location (Storage Account or local VM disk), and time duration. Start the capture and analyze the results. 6. Connection Troubleshoot Purpose: Troubleshoot the connection between a source and a destination to identify potential issues. Steps: Go to Connection Troubleshoot. Select the Subscription, Source (VM), and Destination (IP address or FQDN). Specify the Protocol (TCP/UDP) and Port. Click Check to troubleshoot the connection. Example: Verify IP Flow Scenario You have a virtual machine that cannot reach a specific endpoint. You want to verify if the NSG rules are blocking the traffic.\nSteps Navigate to Network Watcher in the Azure Portal. Under IP Flow Verify, select the virtual machine having issues. Input the following details: Direction: Inbound (or Outbound) Local IP: The IP of the virtual machine. Remote IP: The IP of the endpoint. Local Port: The port you are trying to access on the VM. Remote Port: The port being accessed from the remote endpoint. Protocol: TCP or UDP. Click Check to see if the traffic is allowed or denied based on the current NSG rules. Pricing Network Watcher comes with a set of free limits and paid tiers. Most features, like topology and NSG diagnostics, are free. However, features like Packet Capture and Connection Monitor may have associated costs.\nReference Pricing: Packet Capture: Based on the amount of data captured and stored. Connection Monitor: Based on the number of checks and monitoring frequency. For more information, check the official Azure Pricing Calculator.\nReference Links Azure Network Watcher Documentation Troubleshoot with Network Watcher Pricing for Network Watcher Azure Networking Tasks \u0026 Common Interview Topics 1. Virtual Networks (VNet) Creating and Configuring VNets: Understanding how to create, manage, and assign VNets. Knowing how to break up address spaces into subnets and how to allocate CIDR blocks. Subnets: Creating multiple subnets, routing traffic between subnets, and configuring subnet delegation to specific Azure services (e.g., Virtual Machines, App Services). Service Endpoints and Private Endpoints: Configuring service endpoints for services like Azure SQL, and creating private endpoints to secure Azure resources. Common Interview Questions: What is a VNet in Azure, and how does it differ from a traditional network? How do you configure subnets within a VNet, and what considerations do you need to make for CIDR block assignment? What are service endpoints and private endpoints in Azure? When would you use each? How would you peer two VNets, and what are the security implications? 2. Network Security Groups (NSGs) Configuring NSG Rules: Creating and managing inbound and outbound security rules. Understanding how to configure port, IP, and protocol-based access control. Application Security Groups (ASGs): Grouping VMs into logical ASGs to simplify security rule management. Common Interview Questions: What are Network Security Groups, and how do they control traffic? How do you set up an NSG rule to block all traffic except SSH (port 22) for a specific VM? Explain the difference between an NSG and an ASG. How are they used together? How would you troubleshoot if a VM is unable to connect due to NSG rules? 3. Public and Private IP Addressing Configuring Public and Private IPs: Assigning static or dynamic public IPs and private IPs to resources like Virtual Machines or Load Balancers. Elastic IPs and IP Allocation: Understanding IP address allocation for scaling resources and avoiding IP exhaustion. Common Interview Questions: What’s the difference between a public and private IP in Azure, and how are they used? How would you assign a static IP to a VM, and when would this be necessary? How do you ensure high availability when using public IP addresses with Azure services? 4. Azure Load Balancer Setting up Load Balancers: Configuring an Azure Load Balancer for distributing traffic across multiple VMs. Health Probes: Configuring health probes for monitoring VM availability. Internal vs. External Load Balancers: Understanding when to use an internal load balancer (for private resources) vs. external. Common Interview Questions: Explain how Azure Load Balancers work, and what types are available? How would you configure a health probe for an Azure Load Balancer? What is the difference between an internal and external load balancer, and in which scenarios would you use each? 5. Azure Application Gateway (Layer 7 Load Balancing) Application Gateway Setup: Configuring Azure Application Gateway for Layer 7 load balancing with SSL termination and URL-based routing. WAF (Web Application Firewall): Configuring WAF to protect applications against common web exploits. Common Interview Questions: What’s the difference between an Azure Load Balancer and Azure Application Gateway? How does SSL termination work on Application Gateway, and why is it important? When would you use WAF in conjunction with Application Gateway? 6. Virtual Network Peering VNet Peering: Setting up VNet peering to connect two virtual networks, allowing resources in both networks to communicate. Global VNet Peering: Connecting VNets across different regions. Common Interview Questions: What is VNet peering, and how does it work in Azure? How would you set up peering between two VNets in different regions (global VNet peering)? How is routing between peered VNets managed, and what are the cost implications? 7. Azure VPN Gateway Configuring Site-to-Site VPN: Setting up a VPN Gateway for a secure connection between on-premises networks and Azure VNets. Point-to-Site VPN: Setting up a point-to-site VPN for secure remote access from individual devices to Azure VNets. ExpressRoute: Understanding the differences between VPN Gateway and ExpressRoute for hybrid network connectivity. Common Interview Questions: What is the difference between Site-to-Site VPN and Point-to-Site VPN in Azure? How does Azure VPN Gateway differ from ExpressRoute, and when would you choose one over the other? What are the steps to configure a Site-to-Site VPN connection between an on-premises network and Azure? 8. Azure DNS and Custom DNS Configuring DNS: Understanding how to set up DNS zones and records for your resources in Azure. Custom DNS: How to configure custom DNS servers for VNets and enforce DNS name resolution for resources in your network. Common Interview Questions: What is Azure DNS, and how is it used to manage domain names in the cloud? How would you configure custom DNS servers for your Azure resources? What is the difference between Azure DNS and an external DNS provider? 9. Traffic Manager Traffic Manager Profiles: Configuring Azure Traffic Manager for global DNS-based traffic routing across multiple regions. Routing Methods: Understanding different routing methods (e.g., priority, performance, geographic) for distributing traffic. Common Interview Questions: What is Azure Traffic Manager, and how does it work? What are the different traffic routing methods available in Traffic Manager, and when would you use them? How do you ensure high availability across multiple regions using Azure Traffic Manager? Common Networking Interview Questions What is the difference between a VNet and a subnet in Azure? Explain how NSGs work and how they control traffic within a VNet. How do you assign a public IP to a VM, and when would you use a static vs. dynamic IP? What is VNet peering, and how is it different from using a VPN Gateway? Describe the process of setting up a load balancer for a group of VMs in Azure. How would you configure DNS for an Azure VNet? Can you use custom DNS servers? What are service endpoints, and how do they help secure access to Azure resources? How do you monitor network traffic and performance in Azure? How does Azure handle hybrid network connectivity, and what are the differences between VPN Gateway and ExpressRoute? What is the role of Azure Traffic Manager, and how does it differ from Azure Load Balancer? This list covers the most commonly used tasks and scenarios in Azure Networking and some of the key questions asked in interviews. Understanding these concepts will help you demonstrate your knowledge and problem-solving abilities during interviews.\nAzure Service Endpoint vs. Private Endpoint Azure offers Service Endpoints and Private Endpoints to secure traffic between virtual networks (VNets) and Azure services. Below is an overview of their key differences, use cases, and benefits.\nAzure Service Endpoint An Azure Service Endpoint extends a VNet to Azure services by enabling secure access through the Azure backbone network, bypassing the public internet.\nKey Features Secures traffic between VNet and Azure services (e.g., Azure Storage, Azure SQL Database) over the Azure backbone. Simplifies network architecture by removing the need for public IP whitelisting. Supports identity-based access control via Azure AD and service firewalls. No additional cost beyond standard Azure VNet charges. Use Cases Securing traffic to Azure PaaS services like Azure Storage or SQL Database from VMs or on-premises. Use in environments where simplicity and cost efficiency are key. Limitations Traffic still originates from the public IP address of the VNet/Subnet. Limited to supported Azure services. Azure Private Endpoint An Azure Private Endpoint creates a private IP within your VNet that is directly connected to a specific instance of an Azure service.\nKey Features Provides a fully private connection to Azure services, eliminating public IP exposure. Works with a variety of services, including Azure Storage, SQL Database, and more. Supports DNS configuration to resolve the private IP for the service. Charged based on Private Endpoint usage. Use Cases Scenarios requiring strict isolation and compliance by keeping all traffic private. Connecting from on-premises environments via VPN or ExpressRoute. Securing Azure services used by multi-tenant applications. Limitations Requires additional setup for DNS resolution. Costlier compared to Service Endpoints. Comparison Table Feature Service Endpoint Private Endpoint Traffic Path Uses Azure backbone but originates from public IP. Fully private connection within the VNet. Public Exposure Service IP is public but accessed securely. Service is completely isolated within the VNet. Use Cases Simple scenarios for securing Azure services. Strict compliance or private communication. Supported Services Limited to certain Azure PaaS services. Supported by many Azure services. Cost No additional cost. Charged for Private Endpoint usage. DNS Configuration Not required. Required for resolving private IPs. On-Premises Access Supported via VPN/ExpressRoute with public IP. Supported via VPN/ExpressRoute over private IP. Choosing Between Service Endpoint and Private Endpoint Use Service Endpoint if:\nYou need a cost-effective and simple solution to secure traffic. Public IP exposure is acceptable. Use Private Endpoint if:\nYou require full isolation and compliance with strict security policies. You need private connections to specific Azure service instances.",
    "description": "Azure Load Balancer Azure Application Gateway Azure Front Door Azure Traffic Manager Azure CDN Azure Load Balancer An Azure Load Balancer is a fully managed service that provides high availability by distributing incoming network traffic across multiple servers or virtual machines (VMs). It helps ensure that your applications remain available, scalable, and fault-tolerant.\nTypes of Azure Load Balancer Basic Load Balancer",
    "tags": [],
    "title": "Part 06",
    "uri": "/part06/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure Monitoring Overview High-Level Architecture of Azure Monitor Enable Insights for a vm Configure Diagnosting settings Create Alerts Log Analytics tutorial Send Activity Logs to Log Analytics Azure Monitoring Overview Azure Monitoring is a comprehensive service that helps you collect, analyze, and act on telemetry data from your Azure resources and applications. It provides insights into the performance and health of your infrastructure, helping you diagnose and resolve issues faster.\nKey Features Metrics Collection: Monitor performance data like CPU usage, memory consumption, and request rates. Log Analysis: Centralize logs from multiple sources using Azure Monitor Logs and query them with KQL (Kusto Query Language). Alerts: Configure rule-based alerts to notify you of critical issues. Visualizations: Use Azure Monitor Workbooks and integrate with Power BI for advanced dashboards. Integration: Works seamlessly with Azure services like Application Insights, Log Analytics, and Security Center. Components Application Insights: For monitoring application performance. Log Analytics: For querying and analyzing log data. Alerts: For automated notifications based on thresholds or events. Workbooks: For creating rich, interactive reports. High-Level Architecture of Azure Monitor Azure Monitor provides a unified solution for monitoring various resources across Azure, other clouds, and on-premises environments. It collects and analyzes data to provide insights into performance, availability, and health.\nTypes of Resources Monitored Azure Monitor can monitor the following types of resources:\nApplications: Collect and analyze performance and usage telemetry. Virtual Machines: Monitor metrics and logs for Azure VMs and on-premises VMs. Guest Operating Systems: Track OS-level metrics and logs. Containers: Monitor container performance, including Prometheus metrics. Databases: Gain insights into database performance and operations. Security Events: Analyze security data when integrated with Azure Sentinel. Networking Events and Health: Monitor network resources in combination with Network Watcher. Custom Sources: Use APIs to ingest data from non-standard or custom sources. Exporting Data from Azure Monitor Azure Monitor enables exporting monitoring data to other systems, supporting various integration scenarios:\nThird-Party and Open-Source Tools:\nIntegrate with monitoring tools like Grafana, Datadog, or Splunk. Leverage open-source visualization tools for custom dashboards. ITSM and Ticketing Systems:\nConnect with systems like ServiceNow or Jira to automate incident management and response workflows. Enable insights for a vm Check Monitoring extension Also check this from Azure Monitor Log Analytics tutorial Log Analytics is a tool in the Azure portal to edit and run log queries from data collected by Azure Monitor logs and interactively analyze their results. You can use Log Analytics queries to retrieve records that match particular criteria, identify trends, analyze patterns, and provide various insights into your data.\nThis tutorial walks you through the Log Analytics interface, gets you started with some basic queries, and shows you how you can work with the results. You learn how to:\n-Understand the log data schema.\nWrite and run simple queries, and modify the time range for queries. Filter, sort, and group query results. View, modify, and share visuals of query results. Load, export, and copy queries and results. Log Analytics in Azure Monitor Log Analytics is a tool in Azure Monitor that enables you to collect, query, and analyze log data from various Azure resources, on-premises systems, and other environments. It helps in gaining actionable insights by querying log data using Kusto Query Language (KQL).\nKey Features Centralized Log Collection:\nAggregate logs from Azure resources, virtual machines, containers, and custom sources. Supports collecting data from hybrid and multi-cloud environments. Advanced Querying:\nUse KQL (Kusto Query Language) to query and filter log data efficiently. Analyze trends, detect anomalies, and identify performance bottlenecks. Dashboards and Workbooks:\nCreate custom visualizations and dashboards using Azure Workbooks. Integrate with Power BI for advanced reporting. Integration with Azure Services:\nWorks with Application Insights, Azure Sentinel, and Network Watcher. Enables real-time alerting based on log data. Exporting Data:\nExport logs to external tools like Splunk, Grafana, or a custom SIEM for further analysis. Use Cases Performance Monitoring: Analyze CPU, memory, and disk usage trends across your environment. Security Analysis: Detect and investigate security events in combination with Azure Sentinel. Audit and Compliance: Track changes to Azure resources and ensure compliance with policies. Troubleshooting: Use KQL to identify root causes of application or system issues. Container Monitoring: Collect and analyze logs from Kubernetes clusters. Getting Started with Log Analytics Create a Log Analytics Workspace:\nIn the Azure portal, go to Monitor \u003e Log Analytics workspaces. Create a new workspace or use an existing one. Connect Data Sources:\nAdd Azure resources, virtual machines, or custom log sources to the workspace. Enable diagnostics settings to send logs to Log Analytics. Write Queries in KQL:\nUse the Logs blade in the Azure portal to access the Log Analytics query editor. Examples: Retrieve CPU usage for a VM: Perf\r| where ObjectName == \"Processor\" and CounterName == \"% Processor Time\"\r| summarize avg(CounterValue) by bin(TimeGenerated, 1h) List all failed login attempts: SecurityEvent\r| where EventID == 4625 Set Alerts and Automations:\nCreate alerts based on log queries to notify teams or trigger automation workflows. Benefits Centralized log management and analysis. Enhanced troubleshooting with interactive queries. Scalable for hybrid and multi-cloud setups. Tight integration with Azure services and third-party tools. Let me know if you need examples or guidance on specific KQL queries!\nDefault Tables title: Azure Cloud Networking\ndescription: Azure Cloud weight: 3 icon: fab fa-azure\n1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.\nClick Add Subnet.\nName: Give a name to your subnet (e.g., FrontEndSubnet). Subnet Address Range: Enter a subnet address range (e.g., 10.0.1.0/24). Click Add to add the subnet.\n(Repeat this step if you want to add more subnets.)\nStep 5: Configure Security (Optional) In the Security tab, you can enable security features:\nBastionHost: Secure RDP/SSH access to VMs without public IP. Firewall: Add Azure Firewall to control traffic to/from the VNet. DDoS protection: Enable Standard DDoS protection for better security. Configure these options as required and proceed to the next step.\nStep 6: Review and Create Review all the settings and ensure that everything is configured correctly. Click Review + Create. Once validation is passed, click Create to deploy the VNet. Step 7: Verify the Virtual Network After the deployment is complete, navigate to Resource Groups and select the resource group where the VNet was created. Click on the Virtual Network to see the details of the newly created VNet. Verify the Address Space, Subnets, and other settings to ensure they are correctly configured. Additional Configurations Step 8: Add Network Security Groups (NSGs) In the VNet page, select Subnets. Click on the desired subnet to attach a Network Security Group (NSG). Select an existing NSG or create a new one to define inbound/outbound rules. Step 9: Enable VNet Peering (Optional) If you want to connect this VNet to another VNet, go to the Peerings section. Click Add Peering. Name: Enter a name for the peering connection. Virtual Network Deployment Model: Select the deployment model (usually Resource Manager). Peering Status: Choose the desired configuration (Allow/Block traffic). Click Add to establish peering. Example VNet Configuration VNet: MyVNet Address Space: 10.0.0.0/16 Subnets: - FrontEndSubnet: 10.0.1.0/24 - BackEndSubnet: 10.0.2.0/24 NSGs: - FrontEndNSG: Applied to FrontEndSubnet - BackEndNSG: Applied to BackEndSubnet Azure VNet Peering Examples Example 1: Peering Between Two VNets in the Same Region Overview VNet1 and VNet2 are located in the same region. The goal is to enable communication between resources in both VNets via VNet peering. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.1.0.0/16 Both VNets should not have overlapping address ranges. Steps to Peer VNet1 with VNet2 Go to VNet1:\nIn the Azure Portal, navigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2. Traffic to Remote Network: Select Allow traffic from VNet1 to VNet2. Traffic Forwarding: Enable Allow Gateway Transit (if using one VNet’s gateway to access the internet). Allow Virtual Network Access: Yes. Click Add. Go to VNet2:\nIn the Azure Portal, navigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1. Traffic to Remote Network: Select Allow traffic from VNet2 to VNet1. Allow Virtual Network Access: Yes. Click Add. Example 2: Peering Between Two VNets in Different Regions (Global VNet Peering) Overview VNet1 is in the East US region. VNet2 is in the West Europe region. We will establish Global VNet Peering between these two VNets. Prerequisites VNet1 Address Space: 10.0.0.0/16 (East US) VNet2 Address Space: 10.2.0.0/16 (West Europe) Both VNets must not have overlapping IP address ranges. Steps to Peer VNet1 (East US) with VNet2 (West Europe) Go to VNet1 (East US):\nIn the Azure Portal, navigate to Virtual Networks and select VNet1 (in the East US region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2 (in the West Europe region). Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Allow Gateway Transit: Enable this if needed (for shared VPN gateways). Click Add. Go to VNet2 (West Europe):\nIn the Azure Portal, navigate to Virtual Networks and select VNet2 (in the West Europe region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1 (in the East US region). Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Allow Gateway Transit: Enable this if needed. Click Add. Example 3: VNet Peering with Different Subscriptions Overview VNet1 and VNet2 are located in different subscriptions. The goal is to peer these VNets for communication. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.3.0.0/16 Both VNets must belong to separate Azure subscriptions, but they must not have overlapping address ranges. Ensure the subscriptions are associated with the same Azure Active Directory (AAD) tenant. Steps to Peer VNet1 with VNet2 Across Subscriptions Go to VNet1 (Subscription A):\nNavigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2 (in a different subscription):\nName: VNet1-to-VNet2 Remote Virtual Network: Use the Resource ID of VNet2. To get the resource ID of VNet2, go to VNet2 in Subscription B, click on Properties, and copy the Resource ID. Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Click Add. Go to VNet2 (Subscription B):\nNavigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1 (in a different subscription):\nName: VNet2-to-VNet1 Remote Virtual Network: Use the Resource ID of VNet1 (from Subscription A). Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Click Add. VNet Peering Considerations: No Overlapping IP Address Ranges: VNets being peered cannot have overlapping address spaces. Data Transfer Costs: Data transferred between peered VNets is charged, especially across regions (Global Peering). Gateway Transit: If you want one VNet to use another VNet’s VPN gateway, enable Gateway Transit during peering setup. Security: Use Network Security Groups (NSGs) to control traffic between peered VNets. Reference Links: Azure VNet Peering Global VNet Peering Azure Network Watcher Overview Azure Network Watcher is a regional service that provides tools to monitor, diagnose, and gain insights into your Azure Virtual Network (VNet). It helps troubleshoot network connectivity issues, analyze network performance, and understand network traffic in Azure.\nKey Features of Azure Network Watcher Connection Monitor: Monitor the connectivity status between an Azure virtual machine and an endpoint. IP Flow Verify: Check if traffic is allowed or denied to or from a virtual machine, based on the security group rules. Network Performance Monitor: Measure the performance between VNets, regions, or the on-premises environment. Topology: Visualize the network topology of resources within a VNet. Next Hop: Analyze the next hop for network traffic from a virtual machine. Security Group View: List the network security group (NSG) rules associated with a virtual machine. Packet Capture: Capture packets to and from a virtual machine for analysis. Diagnostic Logs: View diagnostic logs for network resources like NSGs, Load Balancers, and Gateways. Connection Troubleshoot: Test the connection between a source and destination to identify any bottlenecks. How to Enable Azure Network Watcher Step 1: Enable Network Watcher In the Azure Portal, search for Network Watcher. Select Network Watcher from the list. Choose the Subscription and Region where your resources are located. If Network Watcher is not enabled in your region, click on Enable to enable it for that region. Step 2: Verify Network Watcher is Enabled After enabling, go to the Network Watcher resource in your selected region. In the left-hand menu, you will see a list of tools like Connection Monitor, IP Flow Verify, Topology, etc. Network Watcher Tools 1. Connection Monitor Purpose: Monitor the connectivity between a virtual machine and a given destination (another VM, an on-premises network, or a public endpoint). Steps: Go to Connection Monitor under Network Watcher. Click + Add to create a new monitor. Provide the source (VM) and destination (IP address, FQDN, etc.). Configure monitoring parameters like frequency and protocol. Click Create to start monitoring. 2. IP Flow Verify Purpose: Check if a specific packet is allowed or denied based on the Network Security Group (NSG) rules. Steps: Go to IP Flow Verify. Select the Subscription and VM. Enter the Direction (inbound or outbound), Local IP, Remote IP, Port, and Protocol. Click Check to determine if the traffic is allowed or denied. 3. Topology Purpose: Generate a visual map of your VNet, including subnets, virtual machines, NICs, and NSGs. Steps: Go to Topology. Select the Subscription and Resource Group. A visual representation of your network resources will be generated. You can export the topology as a JSON file. 4. Next Hop Purpose: Analyze the route that outbound traffic from a virtual machine will take, based on the routing table. Steps: Go to Next Hop. Select the Subscription, Virtual Machine, Network Interface, and Source IP. Click Next Hop to see the routing information. 5. Packet Capture Purpose: Capture inbound and outbound traffic from a virtual machine’s network interface. Steps: Go to Packet Capture. Select the Virtual Machine you want to capture traffic from. Configure the capture settings such as filter, storage location (Storage Account or local VM disk), and time duration. Start the capture and analyze the results. 6. Connection Troubleshoot Purpose: Troubleshoot the connection between a source and a destination to identify potential issues. Steps: Go to Connection Troubleshoot. Select the Subscription, Source (VM), and Destination (IP address or FQDN). Specify the Protocol (TCP/UDP) and Port. Click Check to troubleshoot the connection. Example: Verify IP Flow Scenario You have a virtual machine that cannot reach a specific endpoint. You want to verify if the NSG rules are blocking the traffic.\nSteps Navigate to Network Watcher in the Azure Portal. Under IP Flow Verify, select the virtual machine having issues. Input the following details: Direction: Inbound (or Outbound) Local IP: The IP of the virtual machine. Remote IP: The IP of the endpoint. Local Port: The port you are trying to access on the VM. Remote Port: The port being accessed from the remote endpoint. Protocol: TCP or UDP. Click Check to see if the traffic is allowed or denied based on the current NSG rules. Pricing Network Watcher comes with a set of free limits and paid tiers. Most features, like topology and NSG diagnostics, are free. However, features like Packet Capture and Connection Monitor may have associated costs.\nReference Pricing: Packet Capture: Based on the amount of data captured and stored. Connection Monitor: Based on the number of checks and monitoring frequency. For more information, check the official Azure Pricing Calculator.\nReference Links Azure Network Watcher Documentation Troubleshoot with Network Watcher Pricing for Network Watcher Azure Networking Tasks \u0026 Common Interview Topics 1. Virtual Networks (VNet) Creating and Configuring VNets: Understanding how to create, manage, and assign VNets. Knowing how to break up address spaces into subnets and how to allocate CIDR blocks. Subnets: Creating multiple subnets, routing traffic between subnets, and configuring subnet delegation to specific Azure services (e.g., Virtual Machines, App Services). Service Endpoints and Private Endpoints: Configuring service endpoints for services like Azure SQL, and creating private endpoints to secure Azure resources. Common Interview Questions: What is a VNet in Azure, and how does it differ from a traditional network? How do you configure subnets within a VNet, and what considerations do you need to make for CIDR block assignment? What are service endpoints and private endpoints in Azure? When would you use each? How would you peer two VNets, and what are the security implications? 2. Network Security Groups (NSGs) Configuring NSG Rules: Creating and managing inbound and outbound security rules. Understanding how to configure port, IP, and protocol-based access control. Application Security Groups (ASGs): Grouping VMs into logical ASGs to simplify security rule management. Common Interview Questions: What are Network Security Groups, and how do they control traffic? How do you set up an NSG rule to block all traffic except SSH (port 22) for a specific VM? Explain the difference between an NSG and an ASG. How are they used together? How would you troubleshoot if a VM is unable to connect due to NSG rules? 3. Public and Private IP Addressing Configuring Public and Private IPs: Assigning static or dynamic public IPs and private IPs to resources like Virtual Machines or Load Balancers. Elastic IPs and IP Allocation: Understanding IP address allocation for scaling resources and avoiding IP exhaustion. Common Interview Questions: What’s the difference between a public and private IP in Azure, and how are they used? How would you assign a static IP to a VM, and when would this be necessary? How do you ensure high availability when using public IP addresses with Azure services? 4. Azure Load Balancer Setting up Load Balancers: Configuring an Azure Load Balancer for distributing traffic across multiple VMs. Health Probes: Configuring health probes for monitoring VM availability. Internal vs. External Load Balancers: Understanding when to use an internal load balancer (for private resources) vs. external. Common Interview Questions: Explain how Azure Load Balancers work, and what types are available? How would you configure a health probe for an Azure Load Balancer? What is the difference between an internal and external load balancer, and in which scenarios would you use each? 5. Azure Application Gateway (Layer 7 Load Balancing) Application Gateway Setup: Configuring Azure Application Gateway for Layer 7 load balancing with SSL termination and URL-based routing. WAF (Web Application Firewall): Configuring WAF to protect applications against common web exploits. Common Interview Questions: What’s the difference between an Azure Load Balancer and Azure Application Gateway? How does SSL termination work on Application Gateway, and why is it important? When would you use WAF in conjunction with Application Gateway? 6. Virtual Network Peering VNet Peering: Setting up VNet peering to connect two virtual networks, allowing resources in both networks to communicate. Global VNet Peering: Connecting VNets across different regions. Common Interview Questions: What is VNet peering, and how does it work in Azure? How would you set up peering between two VNets in different regions (global VNet peering)? How is routing between peered VNets managed, and what are the cost implications? 7. Azure VPN Gateway Configuring Site-to-Site VPN: Setting up a VPN Gateway for a secure connection between on-premises networks and Azure VNets. Point-to-Site VPN: Setting up a point-to-site VPN for secure remote access from individual devices to Azure VNets. ExpressRoute: Understanding the differences between VPN Gateway and ExpressRoute for hybrid network connectivity. Common Interview Questions: What is the difference between Site-to-Site VPN and Point-to-Site VPN in Azure? How does Azure VPN Gateway differ from ExpressRoute, and when would you choose one over the other? What are the steps to configure a Site-to-Site VPN connection between an on-premises network and Azure? 8. Azure DNS and Custom DNS Configuring DNS: Understanding how to set up DNS zones and records for your resources in Azure. Custom DNS: How to configure custom DNS servers for VNets and enforce DNS name resolution for resources in your network. Common Interview Questions: What is Azure DNS, and how is it used to manage domain names in the cloud? How would you configure custom DNS servers for your Azure resources? What is the difference between Azure DNS and an external DNS provider? 9. Traffic Manager Traffic Manager Profiles: Configuring Azure Traffic Manager for global DNS-based traffic routing across multiple regions. Routing Methods: Understanding different routing methods (e.g., priority, performance, geographic) for distributing traffic. Common Interview Questions: What is Azure Traffic Manager, and how does it work? What are the different traffic routing methods available in Traffic Manager, and when would you use them? How do you ensure high availability across multiple regions using Azure Traffic Manager? Common Networking Interview Questions What is the difference between a VNet and a subnet in Azure? Explain how NSGs work and how they control traffic within a VNet. How do you assign a public IP to a VM, and when would you use a static vs. dynamic IP? What is VNet peering, and how is it different from using a VPN Gateway? Describe the process of setting up a load balancer for a group of VMs in Azure. How would you configure DNS for an Azure VNet? Can you use custom DNS servers? What are service endpoints, and how do they help secure access to Azure resources? How do you monitor network traffic and performance in Azure? How does Azure handle hybrid network connectivity, and what are the differences between VPN Gateway and ExpressRoute? What is the role of Azure Traffic Manager, and how does it differ from Azure Load Balancer? This list covers the most commonly used tasks and scenarios in Azure Networking and some of the key questions asked in interviews. Understanding these concepts will help you demonstrate your knowledge and problem-solving abilities during interviews.\nAzure Service Endpoint vs. Private Endpoint Azure offers Service Endpoints and Private Endpoints to secure traffic between virtual networks (VNets) and Azure services. Below is an overview of their key differences, use cases, and benefits.\nAzure Service Endpoint An Azure Service Endpoint extends a VNet to Azure services by enabling secure access through the Azure backbone network, bypassing the public internet.\nKey Features Secures traffic between VNet and Azure services (e.g., Azure Storage, Azure SQL Database) over the Azure backbone. Simplifies network architecture by removing the need for public IP whitelisting. Supports identity-based access control via Azure AD and service firewalls. No additional cost beyond standard Azure VNet charges. Use Cases Securing traffic to Azure PaaS services like Azure Storage or SQL Database from VMs or on-premises. Use in environments where simplicity and cost efficiency are key. Limitations Traffic still originates from the public IP address of the VNet/Subnet. Limited to supported Azure services. Azure Private Endpoint An Azure Private Endpoint creates a private IP within your VNet that is directly connected to a specific instance of an Azure service.\nKey Features Provides a fully private connection to Azure services, eliminating public IP exposure. Works with a variety of services, including Azure Storage, SQL Database, and more. Supports DNS configuration to resolve the private IP for the service. Charged based on Private Endpoint usage. Use Cases Scenarios requiring strict isolation and compliance by keeping all traffic private. Connecting from on-premises environments via VPN or ExpressRoute. Securing Azure services used by multi-tenant applications. Limitations Requires additional setup for DNS resolution. Costlier compared to Service Endpoints. Comparison Table Feature Service Endpoint Private Endpoint Traffic Path Uses Azure backbone but originates from public IP. Fully private connection within the VNet. Public Exposure Service IP is public but accessed securely. Service is completely isolated within the VNet. Use Cases Simple scenarios for securing Azure services. Strict compliance or private communication. Supported Services Limited to certain Azure PaaS services. Supported by many Azure services. Cost No additional cost. Charged for Private Endpoint usage. DNS Configuration Not required. Required for resolving private IPs. On-Premises Access Supported via VPN/ExpressRoute with public IP. Supported via VPN/ExpressRoute over private IP. Choosing Between Service Endpoint and Private Endpoint Use Service Endpoint if:\nYou need a cost-effective and simple solution to secure traffic. Public IP exposure is acceptable. Use Private Endpoint if:\nYou require full isolation and compliance with strict security policies. You need private connections to specific Azure service instances.",
    "description": "Azure Monitoring Overview High-Level Architecture of Azure Monitor Enable Insights for a vm Configure Diagnosting settings Create Alerts Log Analytics tutorial Send Activity Logs to Log Analytics Azure Monitoring Overview Azure Monitoring is a comprehensive service that helps you collect, analyze, and act on telemetry data from your Azure resources and applications. It provides insights into the performance and health of your infrastructure, helping you diagnose and resolve issues faster.",
    "tags": [],
    "title": "Part 07",
    "uri": "/part07/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure Policy Azure Policy is a governance tool in Microsoft Azure that helps organizations enforce compliance with organizational standards and regulatory requirements across their resources. It ensures resources within Azure environments adhere to defined rules and controls.\nKey Features of Azure Policy: Policy Definition: Create or use built-in rules to govern Azure resources. Initiative Definition: Group multiple policies into a single initiative for broader compliance enforcement. Compliance Assessment: Monitor and assess resource compliance in real-time. Policy Assignments: Apply policies at different scopes, including subscription, resource group, or individual resources. Deny or Audit Non-Compliance: Block resource creation or generate alerts for non-compliant resources. Remediation Tasks: Automatically fix non-compliant resources where possible. Common Use Cases: Enforcing resource tagging for better cost management. Restricting virtual machine (VM) sizes to specific SKUs. Enabling security controls, such as encryption and firewalls, by default. Restricting resource locations to specific Azure regions. Ensuring resources use managed disks instead of unmanaged disks. Components of Azure Policy: Definition: A policy rule, written in JSON, describing conditions to enforce. Assignment: Applying the policy definition to a specific scope. Parameters: Allow flexibility in policy definitions for reuse. Effects: The action Azure Policy takes, such as: Deny: Prevent non-compliant resource creation or modification. Audit: Log non-compliant resources for visibility. AuditIfNotExists: Audit resources missing specific conditions. DeployIfNotExists: Deploy required configurations automatically. Examples: Enforce all resources to have a tag like Environment=Production. Restrict deployment to certain Azure regions. Ensure storage accounts have secure transfer enabled. Benefits: Simplifies governance at scale. Ensures compliance with organizational or regulatory requirements. Enhances security and resource consistency. Getting Started: Navigate to Azure Policy in the Azure portal. Select or create a Policy Definition. Assign the policy to a specific scope (e.g., subscription or resource group). Monitor compliance and take remediation actions as needed. title: Azure Cloud Networking\ndescription: Azure Cloud weight: 3 icon: fab fa-azure\n1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.\nClick Add Subnet.\nName: Give a name to your subnet (e.g., FrontEndSubnet). Subnet Address Range: Enter a subnet address range (e.g., 10.0.1.0/24). Click Add to add the subnet.\n(Repeat this step if you want to add more subnets.)\nStep 5: Configure Security (Optional) In the Security tab, you can enable security features:\nBastionHost: Secure RDP/SSH access to VMs without public IP. Firewall: Add Azure Firewall to control traffic to/from the VNet. DDoS protection: Enable Standard DDoS protection for better security. Configure these options as required and proceed to the next step.\nStep 6: Review and Create Review all the settings and ensure that everything is configured correctly. Click Review + Create. Once validation is passed, click Create to deploy the VNet. Step 7: Verify the Virtual Network After the deployment is complete, navigate to Resource Groups and select the resource group where the VNet was created. Click on the Virtual Network to see the details of the newly created VNet. Verify the Address Space, Subnets, and other settings to ensure they are correctly configured. Additional Configurations Step 8: Add Network Security Groups (NSGs) In the VNet page, select Subnets. Click on the desired subnet to attach a Network Security Group (NSG). Select an existing NSG or create a new one to define inbound/outbound rules. Step 9: Enable VNet Peering (Optional) If you want to connect this VNet to another VNet, go to the Peerings section. Click Add Peering. Name: Enter a name for the peering connection. Virtual Network Deployment Model: Select the deployment model (usually Resource Manager). Peering Status: Choose the desired configuration (Allow/Block traffic). Click Add to establish peering. Example VNet Configuration VNet: MyVNet Address Space: 10.0.0.0/16 Subnets: - FrontEndSubnet: 10.0.1.0/24 - BackEndSubnet: 10.0.2.0/24 NSGs: - FrontEndNSG: Applied to FrontEndSubnet - BackEndNSG: Applied to BackEndSubnet Azure VNet Peering Examples Example 1: Peering Between Two VNets in the Same Region Overview VNet1 and VNet2 are located in the same region. The goal is to enable communication between resources in both VNets via VNet peering. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.1.0.0/16 Both VNets should not have overlapping address ranges. Steps to Peer VNet1 with VNet2 Go to VNet1:\nIn the Azure Portal, navigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2. Traffic to Remote Network: Select Allow traffic from VNet1 to VNet2. Traffic Forwarding: Enable Allow Gateway Transit (if using one VNet’s gateway to access the internet). Allow Virtual Network Access: Yes. Click Add. Go to VNet2:\nIn the Azure Portal, navigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1. Traffic to Remote Network: Select Allow traffic from VNet2 to VNet1. Allow Virtual Network Access: Yes. Click Add. Example 2: Peering Between Two VNets in Different Regions (Global VNet Peering) Overview VNet1 is in the East US region. VNet2 is in the West Europe region. We will establish Global VNet Peering between these two VNets. Prerequisites VNet1 Address Space: 10.0.0.0/16 (East US) VNet2 Address Space: 10.2.0.0/16 (West Europe) Both VNets must not have overlapping IP address ranges. Steps to Peer VNet1 (East US) with VNet2 (West Europe) Go to VNet1 (East US):\nIn the Azure Portal, navigate to Virtual Networks and select VNet1 (in the East US region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2 (in the West Europe region). Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Allow Gateway Transit: Enable this if needed (for shared VPN gateways). Click Add. Go to VNet2 (West Europe):\nIn the Azure Portal, navigate to Virtual Networks and select VNet2 (in the West Europe region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1 (in the East US region). Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Allow Gateway Transit: Enable this if needed. Click Add. Example 3: VNet Peering with Different Subscriptions Overview VNet1 and VNet2 are located in different subscriptions. The goal is to peer these VNets for communication. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.3.0.0/16 Both VNets must belong to separate Azure subscriptions, but they must not have overlapping address ranges. Ensure the subscriptions are associated with the same Azure Active Directory (AAD) tenant. Steps to Peer VNet1 with VNet2 Across Subscriptions Go to VNet1 (Subscription A):\nNavigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2 (in a different subscription):\nName: VNet1-to-VNet2 Remote Virtual Network: Use the Resource ID of VNet2. To get the resource ID of VNet2, go to VNet2 in Subscription B, click on Properties, and copy the Resource ID. Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Click Add. Go to VNet2 (Subscription B):\nNavigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1 (in a different subscription):\nName: VNet2-to-VNet1 Remote Virtual Network: Use the Resource ID of VNet1 (from Subscription A). Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Click Add. VNet Peering Considerations: No Overlapping IP Address Ranges: VNets being peered cannot have overlapping address spaces. Data Transfer Costs: Data transferred between peered VNets is charged, especially across regions (Global Peering). Gateway Transit: If you want one VNet to use another VNet’s VPN gateway, enable Gateway Transit during peering setup. Security: Use Network Security Groups (NSGs) to control traffic between peered VNets. Reference Links: Azure VNet Peering Global VNet Peering Azure Network Watcher Overview Azure Network Watcher is a regional service that provides tools to monitor, diagnose, and gain insights into your Azure Virtual Network (VNet). It helps troubleshoot network connectivity issues, analyze network performance, and understand network traffic in Azure.\nKey Features of Azure Network Watcher Connection Monitor: Monitor the connectivity status between an Azure virtual machine and an endpoint. IP Flow Verify: Check if traffic is allowed or denied to or from a virtual machine, based on the security group rules. Network Performance Monitor: Measure the performance between VNets, regions, or the on-premises environment. Topology: Visualize the network topology of resources within a VNet. Next Hop: Analyze the next hop for network traffic from a virtual machine. Security Group View: List the network security group (NSG) rules associated with a virtual machine. Packet Capture: Capture packets to and from a virtual machine for analysis. Diagnostic Logs: View diagnostic logs for network resources like NSGs, Load Balancers, and Gateways. Connection Troubleshoot: Test the connection between a source and destination to identify any bottlenecks. How to Enable Azure Network Watcher Step 1: Enable Network Watcher In the Azure Portal, search for Network Watcher. Select Network Watcher from the list. Choose the Subscription and Region where your resources are located. If Network Watcher is not enabled in your region, click on Enable to enable it for that region. Step 2: Verify Network Watcher is Enabled After enabling, go to the Network Watcher resource in your selected region. In the left-hand menu, you will see a list of tools like Connection Monitor, IP Flow Verify, Topology, etc. Network Watcher Tools 1. Connection Monitor Purpose: Monitor the connectivity between a virtual machine and a given destination (another VM, an on-premises network, or a public endpoint). Steps: Go to Connection Monitor under Network Watcher. Click + Add to create a new monitor. Provide the source (VM) and destination (IP address, FQDN, etc.). Configure monitoring parameters like frequency and protocol. Click Create to start monitoring. 2. IP Flow Verify Purpose: Check if a specific packet is allowed or denied based on the Network Security Group (NSG) rules. Steps: Go to IP Flow Verify. Select the Subscription and VM. Enter the Direction (inbound or outbound), Local IP, Remote IP, Port, and Protocol. Click Check to determine if the traffic is allowed or denied. 3. Topology Purpose: Generate a visual map of your VNet, including subnets, virtual machines, NICs, and NSGs. Steps: Go to Topology. Select the Subscription and Resource Group. A visual representation of your network resources will be generated. You can export the topology as a JSON file. 4. Next Hop Purpose: Analyze the route that outbound traffic from a virtual machine will take, based on the routing table. Steps: Go to Next Hop. Select the Subscription, Virtual Machine, Network Interface, and Source IP. Click Next Hop to see the routing information. 5. Packet Capture Purpose: Capture inbound and outbound traffic from a virtual machine’s network interface. Steps: Go to Packet Capture. Select the Virtual Machine you want to capture traffic from. Configure the capture settings such as filter, storage location (Storage Account or local VM disk), and time duration. Start the capture and analyze the results. 6. Connection Troubleshoot Purpose: Troubleshoot the connection between a source and a destination to identify potential issues. Steps: Go to Connection Troubleshoot. Select the Subscription, Source (VM), and Destination (IP address or FQDN). Specify the Protocol (TCP/UDP) and Port. Click Check to troubleshoot the connection. Example: Verify IP Flow Scenario You have a virtual machine that cannot reach a specific endpoint. You want to verify if the NSG rules are blocking the traffic.\nSteps Navigate to Network Watcher in the Azure Portal. Under IP Flow Verify, select the virtual machine having issues. Input the following details: Direction: Inbound (or Outbound) Local IP: The IP of the virtual machine. Remote IP: The IP of the endpoint. Local Port: The port you are trying to access on the VM. Remote Port: The port being accessed from the remote endpoint. Protocol: TCP or UDP. Click Check to see if the traffic is allowed or denied based on the current NSG rules. Pricing Network Watcher comes with a set of free limits and paid tiers. Most features, like topology and NSG diagnostics, are free. However, features like Packet Capture and Connection Monitor may have associated costs.\nReference Pricing: Packet Capture: Based on the amount of data captured and stored. Connection Monitor: Based on the number of checks and monitoring frequency. For more information, check the official Azure Pricing Calculator.\nReference Links Azure Network Watcher Documentation Troubleshoot with Network Watcher Pricing for Network Watcher Azure Networking Tasks \u0026 Common Interview Topics 1. Virtual Networks (VNet) Creating and Configuring VNets: Understanding how to create, manage, and assign VNets. Knowing how to break up address spaces into subnets and how to allocate CIDR blocks. Subnets: Creating multiple subnets, routing traffic between subnets, and configuring subnet delegation to specific Azure services (e.g., Virtual Machines, App Services). Service Endpoints and Private Endpoints: Configuring service endpoints for services like Azure SQL, and creating private endpoints to secure Azure resources. Common Interview Questions: What is a VNet in Azure, and how does it differ from a traditional network? How do you configure subnets within a VNet, and what considerations do you need to make for CIDR block assignment? What are service endpoints and private endpoints in Azure? When would you use each? How would you peer two VNets, and what are the security implications? 2. Network Security Groups (NSGs) Configuring NSG Rules: Creating and managing inbound and outbound security rules. Understanding how to configure port, IP, and protocol-based access control. Application Security Groups (ASGs): Grouping VMs into logical ASGs to simplify security rule management. Common Interview Questions: What are Network Security Groups, and how do they control traffic? How do you set up an NSG rule to block all traffic except SSH (port 22) for a specific VM? Explain the difference between an NSG and an ASG. How are they used together? How would you troubleshoot if a VM is unable to connect due to NSG rules? 3. Public and Private IP Addressing Configuring Public and Private IPs: Assigning static or dynamic public IPs and private IPs to resources like Virtual Machines or Load Balancers. Elastic IPs and IP Allocation: Understanding IP address allocation for scaling resources and avoiding IP exhaustion. Common Interview Questions: What’s the difference between a public and private IP in Azure, and how are they used? How would you assign a static IP to a VM, and when would this be necessary? How do you ensure high availability when using public IP addresses with Azure services? 4. Azure Load Balancer Setting up Load Balancers: Configuring an Azure Load Balancer for distributing traffic across multiple VMs. Health Probes: Configuring health probes for monitoring VM availability. Internal vs. External Load Balancers: Understanding when to use an internal load balancer (for private resources) vs. external. Common Interview Questions: Explain how Azure Load Balancers work, and what types are available? How would you configure a health probe for an Azure Load Balancer? What is the difference between an internal and external load balancer, and in which scenarios would you use each? 5. Azure Application Gateway (Layer 7 Load Balancing) Application Gateway Setup: Configuring Azure Application Gateway for Layer 7 load balancing with SSL termination and URL-based routing. WAF (Web Application Firewall): Configuring WAF to protect applications against common web exploits. Common Interview Questions: What’s the difference between an Azure Load Balancer and Azure Application Gateway? How does SSL termination work on Application Gateway, and why is it important? When would you use WAF in conjunction with Application Gateway? 6. Virtual Network Peering VNet Peering: Setting up VNet peering to connect two virtual networks, allowing resources in both networks to communicate. Global VNet Peering: Connecting VNets across different regions. Common Interview Questions: What is VNet peering, and how does it work in Azure? How would you set up peering between two VNets in different regions (global VNet peering)? How is routing between peered VNets managed, and what are the cost implications? 7. Azure VPN Gateway Configuring Site-to-Site VPN: Setting up a VPN Gateway for a secure connection between on-premises networks and Azure VNets. Point-to-Site VPN: Setting up a point-to-site VPN for secure remote access from individual devices to Azure VNets. ExpressRoute: Understanding the differences between VPN Gateway and ExpressRoute for hybrid network connectivity. Common Interview Questions: What is the difference between Site-to-Site VPN and Point-to-Site VPN in Azure? How does Azure VPN Gateway differ from ExpressRoute, and when would you choose one over the other? What are the steps to configure a Site-to-Site VPN connection between an on-premises network and Azure? 8. Azure DNS and Custom DNS Configuring DNS: Understanding how to set up DNS zones and records for your resources in Azure. Custom DNS: How to configure custom DNS servers for VNets and enforce DNS name resolution for resources in your network. Common Interview Questions: What is Azure DNS, and how is it used to manage domain names in the cloud? How would you configure custom DNS servers for your Azure resources? What is the difference between Azure DNS and an external DNS provider? 9. Traffic Manager Traffic Manager Profiles: Configuring Azure Traffic Manager for global DNS-based traffic routing across multiple regions. Routing Methods: Understanding different routing methods (e.g., priority, performance, geographic) for distributing traffic. Common Interview Questions: What is Azure Traffic Manager, and how does it work? What are the different traffic routing methods available in Traffic Manager, and when would you use them? How do you ensure high availability across multiple regions using Azure Traffic Manager? Common Networking Interview Questions What is the difference between a VNet and a subnet in Azure? Explain how NSGs work and how they control traffic within a VNet. How do you assign a public IP to a VM, and when would you use a static vs. dynamic IP? What is VNet peering, and how is it different from using a VPN Gateway? Describe the process of setting up a load balancer for a group of VMs in Azure. How would you configure DNS for an Azure VNet? Can you use custom DNS servers? What are service endpoints, and how do they help secure access to Azure resources? How do you monitor network traffic and performance in Azure? How does Azure handle hybrid network connectivity, and what are the differences between VPN Gateway and ExpressRoute? What is the role of Azure Traffic Manager, and how does it differ from Azure Load Balancer? This list covers the most commonly used tasks and scenarios in Azure Networking and some of the key questions asked in interviews. Understanding these concepts will help you demonstrate your knowledge and problem-solving abilities during interviews.\nAzure Service Endpoint vs. Private Endpoint Azure offers Service Endpoints and Private Endpoints to secure traffic between virtual networks (VNets) and Azure services. Below is an overview of their key differences, use cases, and benefits.\nAzure Service Endpoint An Azure Service Endpoint extends a VNet to Azure services by enabling secure access through the Azure backbone network, bypassing the public internet.\nKey Features Secures traffic between VNet and Azure services (e.g., Azure Storage, Azure SQL Database) over the Azure backbone. Simplifies network architecture by removing the need for public IP whitelisting. Supports identity-based access control via Azure AD and service firewalls. No additional cost beyond standard Azure VNet charges. Use Cases Securing traffic to Azure PaaS services like Azure Storage or SQL Database from VMs or on-premises. Use in environments where simplicity and cost efficiency are key. Limitations Traffic still originates from the public IP address of the VNet/Subnet. Limited to supported Azure services. Azure Private Endpoint An Azure Private Endpoint creates a private IP within your VNet that is directly connected to a specific instance of an Azure service.\nKey Features Provides a fully private connection to Azure services, eliminating public IP exposure. Works with a variety of services, including Azure Storage, SQL Database, and more. Supports DNS configuration to resolve the private IP for the service. Charged based on Private Endpoint usage. Use Cases Scenarios requiring strict isolation and compliance by keeping all traffic private. Connecting from on-premises environments via VPN or ExpressRoute. Securing Azure services used by multi-tenant applications. Limitations Requires additional setup for DNS resolution. Costlier compared to Service Endpoints. Comparison Table Feature Service Endpoint Private Endpoint Traffic Path Uses Azure backbone but originates from public IP. Fully private connection within the VNet. Public Exposure Service IP is public but accessed securely. Service is completely isolated within the VNet. Use Cases Simple scenarios for securing Azure services. Strict compliance or private communication. Supported Services Limited to certain Azure PaaS services. Supported by many Azure services. Cost No additional cost. Charged for Private Endpoint usage. DNS Configuration Not required. Required for resolving private IPs. On-Premises Access Supported via VPN/ExpressRoute with public IP. Supported via VPN/ExpressRoute over private IP. Choosing Between Service Endpoint and Private Endpoint Use Service Endpoint if:\nYou need a cost-effective and simple solution to secure traffic. Public IP exposure is acceptable. Use Private Endpoint if:\nYou require full isolation and compliance with strict security policies. You need private connections to specific Azure service instances.",
    "description": "Azure Policy Azure Policy is a governance tool in Microsoft Azure that helps organizations enforce compliance with organizational standards and regulatory requirements across their resources. It ensures resources within Azure environments adhere to defined rules and controls.\nKey Features of Azure Policy: Policy Definition: Create or use built-in rules to govern Azure resources. Initiative Definition: Group multiple policies into a single initiative for broader compliance enforcement. Compliance Assessment: Monitor and assess resource compliance in real-time. Policy Assignments: Apply policies at different scopes, including subscription, resource group, or individual resources. Deny or Audit Non-Compliance: Block resource creation or generate alerts for non-compliant resources. Remediation Tasks: Automatically fix non-compliant resources where possible. Common Use Cases: Enforcing resource tagging for better cost management. Restricting virtual machine (VM) sizes to specific SKUs. Enabling security controls, such as encryption and firewalls, by default. Restricting resource locations to specific Azure regions. Ensuring resources use managed disks instead of unmanaged disks. Components of Azure Policy: Definition: A policy rule, written in JSON, describing conditions to enforce. Assignment: Applying the policy definition to a specific scope. Parameters: Allow flexibility in policy definitions for reuse. Effects: The action Azure Policy takes, such as: Deny: Prevent non-compliant resource creation or modification. Audit: Log non-compliant resources for visibility. AuditIfNotExists: Audit resources missing specific conditions. DeployIfNotExists: Deploy required configurations automatically. Examples: Enforce all resources to have a tag like Environment=Production. Restrict deployment to certain Azure regions. Ensure storage accounts have secure transfer enabled. Benefits: Simplifies governance at scale. Ensures compliance with organizational or regulatory requirements. Enhances security and resource consistency. Getting Started: Navigate to Azure Policy in the Azure portal. Select or create a Policy Definition. Assign the policy to a specific scope (e.g., subscription or resource group). Monitor compliance and take remediation actions as needed. title: Azure Cloud Networking\ndescription: Azure Cloud weight: 3 icon: fab fa-azure",
    "tags": [],
    "title": "Part 08",
    "uri": "/part08/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure Storage Overview Azure Storage is a highly scalable, durable cloud solution, supporting different data types and use cases, such as analytics, data lakes, and static web content hosting.\nAzure Storage Services 1. Blob Storage Stores unstructured data like images, videos, and backups.\nBlob Types: Block Blobs: Stores large binary data. Append Blobs: Optimized for appending data, ideal for logging. Page Blobs: Primarily used for Azure VM storage disks. Access Tiers: Hot: Frequently accessed data. Cool: Infrequently accessed data, stored at a lower cost. Archive: Rarely accessed data stored at the lowest cost for long-term storage. 2. Azure Files Managed file shares that can be accessed via SMB or NFS protocols.\nFeatures: Mountable on both Windows and Linux systems. Supports hybrid access by mounting shares on-premises. Integrates with Azure AD for advanced access control. 3. Queue Storage Provides message queuing for reliable communication between application components.\nFeatures: Decouples distributed applications. Offers ordered message processing and retries for durability. 4. Table Storage A NoSQL key-value store optimized for large volumes of structured data.\nFeatures: Highly scalable and designed for rapid access. Suitable for non-relational data storage in various applications. 5. Disk Storage Persistent storage for Azure Virtual Machines, available as Standard HDD, Standard SSD, and Premium SSD.\nManaged Disks: Automatically manages storage account allocation and is highly resilient to hardware failures. Redundancy Options Azure Storage offers multiple redundancy levels to protect data against failures:\nLRS (Locally Redundant Storage):\nStores three copies of data within a single data center. Low-cost option, but data is not replicated outside the local region. ZRS (Zone-Redundant Storage):\nReplicates data across multiple availability zones within the same region. Provides higher availability by protecting against data center failures. GRS (Geo-Redundant Storage):\nStores three copies of data in the primary region and three more in a secondary region. Ensures data is available even in the event of a regional outage, but the secondary region is read-only until failover. RA-GRS (Read-Access Geo-Redundant Storage):\nSimilar to GRS but allows read access to data in the secondary region. Useful for applications that require high availability during regional outages. Security and Access Control Shared Access Signatures (SAS): Temporarily grant permissions to resources without sharing account keys. Azure Active Directory (AD): Enables identity-based access controls for enhanced security. Encryption: Data is encrypted at rest by default and can be encrypted during transit. Pricing Pricing depends on factors like storage capacity, redundancy options (LRS, ZRS, GRS, RA-GRS), access tiers (Hot, Cool, Archive), and data transfer volumes.\nFor more details, refer to the Azure Storage Documentation.\ntitle: Azure Cloud Networking\ndescription: Azure Cloud weight: 3 icon: fab fa-azure\n1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.\nClick Add Subnet.\nName: Give a name to your subnet (e.g., FrontEndSubnet). Subnet Address Range: Enter a subnet address range (e.g., 10.0.1.0/24). Click Add to add the subnet.\n(Repeat this step if you want to add more subnets.)\nStep 5: Configure Security (Optional) In the Security tab, you can enable security features:\nBastionHost: Secure RDP/SSH access to VMs without public IP. Firewall: Add Azure Firewall to control traffic to/from the VNet. DDoS protection: Enable Standard DDoS protection for better security. Configure these options as required and proceed to the next step.\nStep 6: Review and Create Review all the settings and ensure that everything is configured correctly. Click Review + Create. Once validation is passed, click Create to deploy the VNet. Step 7: Verify the Virtual Network After the deployment is complete, navigate to Resource Groups and select the resource group where the VNet was created. Click on the Virtual Network to see the details of the newly created VNet. Verify the Address Space, Subnets, and other settings to ensure they are correctly configured. Additional Configurations Step 8: Add Network Security Groups (NSGs) In the VNet page, select Subnets. Click on the desired subnet to attach a Network Security Group (NSG). Select an existing NSG or create a new one to define inbound/outbound rules. Step 9: Enable VNet Peering (Optional) If you want to connect this VNet to another VNet, go to the Peerings section. Click Add Peering. Name: Enter a name for the peering connection. Virtual Network Deployment Model: Select the deployment model (usually Resource Manager). Peering Status: Choose the desired configuration (Allow/Block traffic). Click Add to establish peering. Example VNet Configuration VNet: MyVNet Address Space: 10.0.0.0/16 Subnets: - FrontEndSubnet: 10.0.1.0/24 - BackEndSubnet: 10.0.2.0/24 NSGs: - FrontEndNSG: Applied to FrontEndSubnet - BackEndNSG: Applied to BackEndSubnet Azure VNet Peering Examples Example 1: Peering Between Two VNets in the Same Region Overview VNet1 and VNet2 are located in the same region. The goal is to enable communication between resources in both VNets via VNet peering. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.1.0.0/16 Both VNets should not have overlapping address ranges. Steps to Peer VNet1 with VNet2 Go to VNet1:\nIn the Azure Portal, navigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2. Traffic to Remote Network: Select Allow traffic from VNet1 to VNet2. Traffic Forwarding: Enable Allow Gateway Transit (if using one VNet’s gateway to access the internet). Allow Virtual Network Access: Yes. Click Add. Go to VNet2:\nIn the Azure Portal, navigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1. Traffic to Remote Network: Select Allow traffic from VNet2 to VNet1. Allow Virtual Network Access: Yes. Click Add. Example 2: Peering Between Two VNets in Different Regions (Global VNet Peering) Overview VNet1 is in the East US region. VNet2 is in the West Europe region. We will establish Global VNet Peering between these two VNets. Prerequisites VNet1 Address Space: 10.0.0.0/16 (East US) VNet2 Address Space: 10.2.0.0/16 (West Europe) Both VNets must not have overlapping IP address ranges. Steps to Peer VNet1 (East US) with VNet2 (West Europe) Go to VNet1 (East US):\nIn the Azure Portal, navigate to Virtual Networks and select VNet1 (in the East US region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2 (in the West Europe region). Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Allow Gateway Transit: Enable this if needed (for shared VPN gateways). Click Add. Go to VNet2 (West Europe):\nIn the Azure Portal, navigate to Virtual Networks and select VNet2 (in the West Europe region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1 (in the East US region). Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Allow Gateway Transit: Enable this if needed. Click Add. Example 3: VNet Peering with Different Subscriptions Overview VNet1 and VNet2 are located in different subscriptions. The goal is to peer these VNets for communication. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.3.0.0/16 Both VNets must belong to separate Azure subscriptions, but they must not have overlapping address ranges. Ensure the subscriptions are associated with the same Azure Active Directory (AAD) tenant. Steps to Peer VNet1 with VNet2 Across Subscriptions Go to VNet1 (Subscription A):\nNavigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2 (in a different subscription):\nName: VNet1-to-VNet2 Remote Virtual Network: Use the Resource ID of VNet2. To get the resource ID of VNet2, go to VNet2 in Subscription B, click on Properties, and copy the Resource ID. Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Click Add. Go to VNet2 (Subscription B):\nNavigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1 (in a different subscription):\nName: VNet2-to-VNet1 Remote Virtual Network: Use the Resource ID of VNet1 (from Subscription A). Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Click Add. VNet Peering Considerations: No Overlapping IP Address Ranges: VNets being peered cannot have overlapping address spaces. Data Transfer Costs: Data transferred between peered VNets is charged, especially across regions (Global Peering). Gateway Transit: If you want one VNet to use another VNet’s VPN gateway, enable Gateway Transit during peering setup. Security: Use Network Security Groups (NSGs) to control traffic between peered VNets. Reference Links: Azure VNet Peering Global VNet Peering Azure Network Watcher Overview Azure Network Watcher is a regional service that provides tools to monitor, diagnose, and gain insights into your Azure Virtual Network (VNet). It helps troubleshoot network connectivity issues, analyze network performance, and understand network traffic in Azure.\nKey Features of Azure Network Watcher Connection Monitor: Monitor the connectivity status between an Azure virtual machine and an endpoint. IP Flow Verify: Check if traffic is allowed or denied to or from a virtual machine, based on the security group rules. Network Performance Monitor: Measure the performance between VNets, regions, or the on-premises environment. Topology: Visualize the network topology of resources within a VNet. Next Hop: Analyze the next hop for network traffic from a virtual machine. Security Group View: List the network security group (NSG) rules associated with a virtual machine. Packet Capture: Capture packets to and from a virtual machine for analysis. Diagnostic Logs: View diagnostic logs for network resources like NSGs, Load Balancers, and Gateways. Connection Troubleshoot: Test the connection between a source and destination to identify any bottlenecks. How to Enable Azure Network Watcher Step 1: Enable Network Watcher In the Azure Portal, search for Network Watcher. Select Network Watcher from the list. Choose the Subscription and Region where your resources are located. If Network Watcher is not enabled in your region, click on Enable to enable it for that region. Step 2: Verify Network Watcher is Enabled After enabling, go to the Network Watcher resource in your selected region. In the left-hand menu, you will see a list of tools like Connection Monitor, IP Flow Verify, Topology, etc. Network Watcher Tools 1. Connection Monitor Purpose: Monitor the connectivity between a virtual machine and a given destination (another VM, an on-premises network, or a public endpoint). Steps: Go to Connection Monitor under Network Watcher. Click + Add to create a new monitor. Provide the source (VM) and destination (IP address, FQDN, etc.). Configure monitoring parameters like frequency and protocol. Click Create to start monitoring. 2. IP Flow Verify Purpose: Check if a specific packet is allowed or denied based on the Network Security Group (NSG) rules. Steps: Go to IP Flow Verify. Select the Subscription and VM. Enter the Direction (inbound or outbound), Local IP, Remote IP, Port, and Protocol. Click Check to determine if the traffic is allowed or denied. 3. Topology Purpose: Generate a visual map of your VNet, including subnets, virtual machines, NICs, and NSGs. Steps: Go to Topology. Select the Subscription and Resource Group. A visual representation of your network resources will be generated. You can export the topology as a JSON file. 4. Next Hop Purpose: Analyze the route that outbound traffic from a virtual machine will take, based on the routing table. Steps: Go to Next Hop. Select the Subscription, Virtual Machine, Network Interface, and Source IP. Click Next Hop to see the routing information. 5. Packet Capture Purpose: Capture inbound and outbound traffic from a virtual machine’s network interface. Steps: Go to Packet Capture. Select the Virtual Machine you want to capture traffic from. Configure the capture settings such as filter, storage location (Storage Account or local VM disk), and time duration. Start the capture and analyze the results. 6. Connection Troubleshoot Purpose: Troubleshoot the connection between a source and a destination to identify potential issues. Steps: Go to Connection Troubleshoot. Select the Subscription, Source (VM), and Destination (IP address or FQDN). Specify the Protocol (TCP/UDP) and Port. Click Check to troubleshoot the connection. Example: Verify IP Flow Scenario You have a virtual machine that cannot reach a specific endpoint. You want to verify if the NSG rules are blocking the traffic.\nSteps Navigate to Network Watcher in the Azure Portal. Under IP Flow Verify, select the virtual machine having issues. Input the following details: Direction: Inbound (or Outbound) Local IP: The IP of the virtual machine. Remote IP: The IP of the endpoint. Local Port: The port you are trying to access on the VM. Remote Port: The port being accessed from the remote endpoint. Protocol: TCP or UDP. Click Check to see if the traffic is allowed or denied based on the current NSG rules. Pricing Network Watcher comes with a set of free limits and paid tiers. Most features, like topology and NSG diagnostics, are free. However, features like Packet Capture and Connection Monitor may have associated costs.\nReference Pricing: Packet Capture: Based on the amount of data captured and stored. Connection Monitor: Based on the number of checks and monitoring frequency. For more information, check the official Azure Pricing Calculator.\nReference Links Azure Network Watcher Documentation Troubleshoot with Network Watcher Pricing for Network Watcher Azure Networking Tasks \u0026 Common Interview Topics 1. Virtual Networks (VNet) Creating and Configuring VNets: Understanding how to create, manage, and assign VNets. Knowing how to break up address spaces into subnets and how to allocate CIDR blocks. Subnets: Creating multiple subnets, routing traffic between subnets, and configuring subnet delegation to specific Azure services (e.g., Virtual Machines, App Services). Service Endpoints and Private Endpoints: Configuring service endpoints for services like Azure SQL, and creating private endpoints to secure Azure resources. Common Interview Questions: What is a VNet in Azure, and how does it differ from a traditional network? How do you configure subnets within a VNet, and what considerations do you need to make for CIDR block assignment? What are service endpoints and private endpoints in Azure? When would you use each? How would you peer two VNets, and what are the security implications? 2. Network Security Groups (NSGs) Configuring NSG Rules: Creating and managing inbound and outbound security rules. Understanding how to configure port, IP, and protocol-based access control. Application Security Groups (ASGs): Grouping VMs into logical ASGs to simplify security rule management. Common Interview Questions: What are Network Security Groups, and how do they control traffic? How do you set up an NSG rule to block all traffic except SSH (port 22) for a specific VM? Explain the difference between an NSG and an ASG. How are they used together? How would you troubleshoot if a VM is unable to connect due to NSG rules? 3. Public and Private IP Addressing Configuring Public and Private IPs: Assigning static or dynamic public IPs and private IPs to resources like Virtual Machines or Load Balancers. Elastic IPs and IP Allocation: Understanding IP address allocation for scaling resources and avoiding IP exhaustion. Common Interview Questions: What’s the difference between a public and private IP in Azure, and how are they used? How would you assign a static IP to a VM, and when would this be necessary? How do you ensure high availability when using public IP addresses with Azure services? 4. Azure Load Balancer Setting up Load Balancers: Configuring an Azure Load Balancer for distributing traffic across multiple VMs. Health Probes: Configuring health probes for monitoring VM availability. Internal vs. External Load Balancers: Understanding when to use an internal load balancer (for private resources) vs. external. Common Interview Questions: Explain how Azure Load Balancers work, and what types are available? How would you configure a health probe for an Azure Load Balancer? What is the difference between an internal and external load balancer, and in which scenarios would you use each? 5. Azure Application Gateway (Layer 7 Load Balancing) Application Gateway Setup: Configuring Azure Application Gateway for Layer 7 load balancing with SSL termination and URL-based routing. WAF (Web Application Firewall): Configuring WAF to protect applications against common web exploits. Common Interview Questions: What’s the difference between an Azure Load Balancer and Azure Application Gateway? How does SSL termination work on Application Gateway, and why is it important? When would you use WAF in conjunction with Application Gateway? 6. Virtual Network Peering VNet Peering: Setting up VNet peering to connect two virtual networks, allowing resources in both networks to communicate. Global VNet Peering: Connecting VNets across different regions. Common Interview Questions: What is VNet peering, and how does it work in Azure? How would you set up peering between two VNets in different regions (global VNet peering)? How is routing between peered VNets managed, and what are the cost implications? 7. Azure VPN Gateway Configuring Site-to-Site VPN: Setting up a VPN Gateway for a secure connection between on-premises networks and Azure VNets. Point-to-Site VPN: Setting up a point-to-site VPN for secure remote access from individual devices to Azure VNets. ExpressRoute: Understanding the differences between VPN Gateway and ExpressRoute for hybrid network connectivity. Common Interview Questions: What is the difference between Site-to-Site VPN and Point-to-Site VPN in Azure? How does Azure VPN Gateway differ from ExpressRoute, and when would you choose one over the other? What are the steps to configure a Site-to-Site VPN connection between an on-premises network and Azure? 8. Azure DNS and Custom DNS Configuring DNS: Understanding how to set up DNS zones and records for your resources in Azure. Custom DNS: How to configure custom DNS servers for VNets and enforce DNS name resolution for resources in your network. Common Interview Questions: What is Azure DNS, and how is it used to manage domain names in the cloud? How would you configure custom DNS servers for your Azure resources? What is the difference between Azure DNS and an external DNS provider? 9. Traffic Manager Traffic Manager Profiles: Configuring Azure Traffic Manager for global DNS-based traffic routing across multiple regions. Routing Methods: Understanding different routing methods (e.g., priority, performance, geographic) for distributing traffic. Common Interview Questions: What is Azure Traffic Manager, and how does it work? What are the different traffic routing methods available in Traffic Manager, and when would you use them? How do you ensure high availability across multiple regions using Azure Traffic Manager? Common Networking Interview Questions What is the difference between a VNet and a subnet in Azure? Explain how NSGs work and how they control traffic within a VNet. How do you assign a public IP to a VM, and when would you use a static vs. dynamic IP? What is VNet peering, and how is it different from using a VPN Gateway? Describe the process of setting up a load balancer for a group of VMs in Azure. How would you configure DNS for an Azure VNet? Can you use custom DNS servers? What are service endpoints, and how do they help secure access to Azure resources? How do you monitor network traffic and performance in Azure? How does Azure handle hybrid network connectivity, and what are the differences between VPN Gateway and ExpressRoute? What is the role of Azure Traffic Manager, and how does it differ from Azure Load Balancer? This list covers the most commonly used tasks and scenarios in Azure Networking and some of the key questions asked in interviews. Understanding these concepts will help you demonstrate your knowledge and problem-solving abilities during interviews.\nAzure Service Endpoint vs. Private Endpoint Azure offers Service Endpoints and Private Endpoints to secure traffic between virtual networks (VNets) and Azure services. Below is an overview of their key differences, use cases, and benefits.\nAzure Service Endpoint An Azure Service Endpoint extends a VNet to Azure services by enabling secure access through the Azure backbone network, bypassing the public internet.\nKey Features Secures traffic between VNet and Azure services (e.g., Azure Storage, Azure SQL Database) over the Azure backbone. Simplifies network architecture by removing the need for public IP whitelisting. Supports identity-based access control via Azure AD and service firewalls. No additional cost beyond standard Azure VNet charges. Use Cases Securing traffic to Azure PaaS services like Azure Storage or SQL Database from VMs or on-premises. Use in environments where simplicity and cost efficiency are key. Limitations Traffic still originates from the public IP address of the VNet/Subnet. Limited to supported Azure services. Azure Private Endpoint An Azure Private Endpoint creates a private IP within your VNet that is directly connected to a specific instance of an Azure service.\nKey Features Provides a fully private connection to Azure services, eliminating public IP exposure. Works with a variety of services, including Azure Storage, SQL Database, and more. Supports DNS configuration to resolve the private IP for the service. Charged based on Private Endpoint usage. Use Cases Scenarios requiring strict isolation and compliance by keeping all traffic private. Connecting from on-premises environments via VPN or ExpressRoute. Securing Azure services used by multi-tenant applications. Limitations Requires additional setup for DNS resolution. Costlier compared to Service Endpoints. Comparison Table Feature Service Endpoint Private Endpoint Traffic Path Uses Azure backbone but originates from public IP. Fully private connection within the VNet. Public Exposure Service IP is public but accessed securely. Service is completely isolated within the VNet. Use Cases Simple scenarios for securing Azure services. Strict compliance or private communication. Supported Services Limited to certain Azure PaaS services. Supported by many Azure services. Cost No additional cost. Charged for Private Endpoint usage. DNS Configuration Not required. Required for resolving private IPs. On-Premises Access Supported via VPN/ExpressRoute with public IP. Supported via VPN/ExpressRoute over private IP. Choosing Between Service Endpoint and Private Endpoint Use Service Endpoint if:\nYou need a cost-effective and simple solution to secure traffic. Public IP exposure is acceptable. Use Private Endpoint if:\nYou require full isolation and compliance with strict security policies. You need private connections to specific Azure service instances.",
    "description": "Azure Storage Overview Azure Storage is a highly scalable, durable cloud solution, supporting different data types and use cases, such as analytics, data lakes, and static web content hosting.\nAzure Storage Services 1. Blob Storage Stores unstructured data like images, videos, and backups.\nBlob Types: Block Blobs: Stores large binary data. Append Blobs: Optimized for appending data, ideal for logging. Page Blobs: Primarily used for Azure VM storage disks. Access Tiers: Hot: Frequently accessed data. Cool: Infrequently accessed data, stored at a lower cost. Archive: Rarely accessed data stored at the lowest cost for long-term storage. 2. Azure Files Managed file shares that can be accessed via SMB or NFS protocols.",
    "tags": [],
    "title": "Part 09",
    "uri": "/part09/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Azure Backup Azure Backup is a cloud-based data protection solution provided by Microsoft. It is designed to back up and restore data from the Microsoft Azure cloud, ensuring business continuity in case of data loss or disasters. Azure Backup supports a wide range of scenarios, including on-premises systems, Azure VMs, SQL databases, file shares, and more.\nKey Features Centralized Backup Management: Manage backups for on-premises and Azure resources from the Azure portal. Data Security: Encryption in transit and at rest, with the option to use your own keys. Long-Term Retention: Options for long-term data retention to meet regulatory requirements. Cost-Effective: Pay-as-you-go model eliminates the need for on-premises backup infrastructure. Disaster Recovery Integration: Seamless integration with Azure Site Recovery for disaster recovery. Application-Aware Backups: Supports backups for critical workloads like SQL Server, Exchange, and SharePoint. Incremental Backups: Saves storage space and reduces bandwidth consumption. Common Backup Scenarios Azure Virtual Machines\nBack up Azure VMs (Windows and Linux) using the Azure Backup service.\nOn-Premises Servers\nUse the Azure Backup Agent or Azure Backup Server to back up files, folders, and applications from on-premises servers.\nAzure Files\nBackup and restore Azure file shares with point-in-time recovery.\nSQL Server Backups\nBackup SQL databases hosted on Azure.\nBenefits Simplified backup management. Scalability to meet growing data needs. High availability and reliability. Compliance with industry regulations. For more information, visit the Azure Backup documentation.\nWhat Can Be Backed Up with Azure Backup? Azure Backup supports a wide variety of backup scenarios for both on-premises and cloud resources. Below is a detailed list of what you can back up:\nOn-Premises Files, Folders, and System State:\nUse the Microsoft Azure Recovery Services (MARS) agent. On-Premises VMs (Hyper-V and VMware):\nProtect these workloads using Data Protection Manager (DPM) or Azure Backup Server (MABS). Other On-Premises Workloads:\nBack up applications like SQL Server, Exchange, and SharePoint using DPM or MABS. Azure Virtual Machines Entire VMs:\nBack up Windows/Linux VMs using Azure Backup extensions. Files, Folders, and System State:\nUse the MARS agent for more granular backup options. Azure Managed Disks Back up Azure Managed Disks directly. Azure File Shares Back up Azure File Shares to a storage account. SQL Server in Azure VMs Back up SQL Server Databases running on Azure Virtual Machines. SAP HANA Databases in Azure VMs Back up SAP HANA Databases running on Azure VMs. Azure Database for PostgreSQL Back up Azure Database for PostgreSQL Servers with retention for up to 10 years. Azure Blobs Operational backups for Azure Blobs provide point-in-time recovery. Azure Database for PostgreSQL Flexible Server Back up Azure Database for PostgreSQL Flexible Server (currently in preview). Azure Kubernetes Service (AKS) Back up workloads and configurations in Azure Kubernetes Service (AKS) clusters. For more information, visit the Azure Backup documentation. MARS and MABS in Azure Backup Azure Backup provides different tools for managing on-premises backups, tailored to various use cases. Two commonly used tools are MARS and MABS.\nMicrosoft Azure Recovery Services (MARS) Agent The MARS agent is designed for simple backup scenarios, specifically for protecting files, folders, and system states on individual machines.\nFeatures of MARS Supported Workloads: Files, folders, and system state. Backup Target: Azure Recovery Services Vault. Supported Systems: Windows Server (various versions) and Windows clients (e.g., Windows 10, 11). Granularity: File and folder level backup. Usage: Ideal for small-scale backup needs or individual servers. No dependency on on-premises infrastructure like DPM or MABS. Microsoft Azure Backup Server (MABS) MABS is a more robust solution for larger-scale backup needs. It provides enterprise-grade protection for a variety of on-premises workloads.\nFeatures of MABS Supported Workloads: Files and folders. On-premises VMs (Hyper-V and VMware). Application-aware backups for workloads like SQL Server, Exchange, and SharePoint. Backup Target: Azure Recovery Services Vault for cloud backup. Local disk for on-premises backup. System Requirements: Requires a dedicated Windows Server to run MABS. Granularity: Application and VM-level protection in addition to file-level backup. Usage: Suitable for larger environments with diverse workloads. Acts as a bridge between on-premises workloads and Azure for backup. Comparison: MARS vs. MABS Feature MARS MABS Workloads Supported Files, folders, system state Files, folders, VMs, applications Backup Target Azure Recovery Services Vault Azure Vault + Local Disk Granularity File-level backup Application and VM-level backup Ideal Use Case Individual machines Enterprise environments Infrastructure Requirements No dedicated infrastructure Requires dedicated server For more details, visit the Azure Backup documentation.\nRecovery Services vault Create Recovery service Configure Redundancy Take Backup Restore Options Check backed up items Restore Option Details Create a new VM Quickly creates and gets a basic VM up and running from a restore point.- Specify a name for the VM and select the resource group and virtual network (VNet) in which it will be placed.- The new VM must be created in the same region as the source VM.- If a VM restore fails (e.g., due to unavailable Azure VM SKU), disks are restored in the specified resource group. Restore Disk Restores a VM disk, which can then be used to create a new VM.- Azure Backup provides a template to help customize and create a VM.- The restore job generates a downloadable template for specifying custom VM settings.- Disks are copied to the specified Resource Group.- Disks can be attached to an existing VM or used to create a new VM via PowerShell.- Useful for customizing or adding new configurations. Replace Existing Restores a disk to replace a disk on an existing VM.- The current VM must exist.- A snapshot of the VM is taken before replacement and retained in the vault.- Original disks are retained for manual deletion if needed.- Supported for unencrypted managed VMs with linked resources (e.g., managed identities).- Not supported for classic, unmanaged, or generalized VMs. Cross Region Restore Restores VMs or disks in a secondary (paired) Azure region.- Vault-tier backups are replicated to the secondary region (snapshots are not replicated).- Supports “Create a VM” and “Restore Disks” options.- Not supported for the “Replace Existing” option. Cross Subscription Restore Restores Azure VMs or disks to a different subscription within the same tenant.- Enabled via the Cross Subscription Restore property in the Recovery Services vault.- Supported only for managed VMs.- Not supported for snapshot-tier recovery points or unmanaged/ADE-encrypted VMs. Cross Zonal Restore Restores VMs or disks to different Azure zones.- Restores logical zones as per the Azure subscription.- Supported for managed VMs in vaults with Zonal-Redundant Storage (ZRS) or Cross Region Restore (CRR).- Not supported for snapshot-tier restore points or encrypted VMs. ASR Support os\nBusiness Continuity Center Learning Objectives Creating Recovery Service Vault\nLearn how to set up a Recovery Services Vault, a foundational step for disaster recovery in Azure.\nReplicate Azure VM to Secondary Region\nConfigure Azure VMs to replicate data and services to a secondary region for high availability.\nTest Failover\nSimulate a failover scenario to validate the disaster recovery setup without impacting production.\nPlanned Failover\nExecute a planned failover for maintenance or other needs while minimizing disruptions.\nFailback\nReturn operations to the primary region after resolving the original issue or completing planned maintenance.\ntitle: Azure Cloud Networking\ndescription: Azure Cloud weight: 3 icon: fab fa-azure\n1. Virtual Network (VNet) Azure Virtual Network (VNet) is the fundamental building block for private networks in Azure. VNets enable Azure resources, like Virtual Machines (VMs), to securely communicate with each other, the internet, and on-premises networks. VNets can be segmented into subnets for better management and security. Key Features: Isolation and segmentation: You can isolate VNets from each other. Subnets: Allow partitioning of a VNet into smaller network segments. Network Security Groups (NSGs): Control inbound and outbound traffic rules. Route Tables: Direct network traffic. 2. Subnets Subnets allow you to divide your VNet into smaller, isolated sections. Each subnet can have its own Network Security Group (NSG) to control traffic. Subnets also allow for organizing resources into distinct groups based on service types. 3. Network Security Group (NSG) NSGs are a set of firewall rules that control traffic to and from VMs. NSGs can be applied at the subnet level or directly to the VM’s network interface. Rules: Inbound rules: Define the traffic allowed to the VM. Outbound rules: Define the traffic allowed from the VM. 4. Virtual Private Network (VPN) Azure provides VPN Gateway for establishing secure connections between Azure and on-premises networks, or other Azure VNets. Site-to-Site VPN: Connect on-premises networks to Azure VNets. Point-to-Site VPN: Enable individual clients to connect to the Azure VNet. 5. ExpressRoute ExpressRoute allows for private, dedicated, high-throughput connections between on-premises networks and Azure data centers. Avoids using the public internet, offering greater reliability, faster speeds, and lower latencies. 6. Azure Load Balancer Distributes inbound traffic across multiple VMs, ensuring high availability. Supports both public and internal load balancers. Can be used for balancing traffic in multi-tier applications. 7. Azure Application Gateway A layer-7 load balancer that provides application-level routing decisions. Supports features like SSL termination, cookie-based session affinity, and Web Application Firewall (WAF). 8. Azure Traffic Manager DNS-based traffic load balancer. Directs incoming traffic to the most appropriate endpoint (based on performance, priority, or geographic location). 9. Azure Firewall Managed, cloud-based network security service. Protects Azure resources with high availability and scalability. Offers features like application rules, network rules, and threat intelligence. 10. Azure DNS Azure DNS hosts your DNS domains and manages your DNS records. Allows for easy management of your domain names and supports both public and private DNS zones. 11. Virtual Network Peering Allows linking VNets within the same region or across regions, enabling resources in different VNets to communicate with each other. Provides low-latency and high-bandwidth connections between VNets. 12. Azure Bastion Provides secure and seamless RDP/SSH access to your VMs without exposing them to the public internet. Azure Bastion is deployed inside your VNet. 13. Network Watcher Network Watcher is a tool for monitoring, diagnosing, and gaining insights into your Azure network. It provides various capabilities like packet capture, connection troubleshooting, and VPN diagnostics. Networking Diagram Example +------------+ +-----------+ +-------------------+ | | | | | | | On-prem |\u003c-----\u003e| VPN GW |\u003c----\u003e| Azure VNet | | Network | | | | | +------------+ +-----------+ +-------------------+ Steps to Create an Azure Virtual Network (VNet) Step 1: Sign in to the Azure Portal Open your web browser and go to the Azure Portal. Sign in with your Azure account credentials. Step 2: Create a Virtual Network In the Azure Portal, on the left-hand menu, select Create a resource. In the search bar, type Virtual Network and select it from the results. Click Create. Configure Virtual Network Subscription: Select the Azure subscription to create the VNet. Resource Group: Choose an existing resource group or create a new one. Name: Enter a name for your Virtual Network (e.g., MyVNet). Region: Select the Azure region where you want to deploy the VNet. Step 3: Configure Address Space Under the IP Addresses tab, you need to configure the address space for the VNet. Enter an address space in CIDR notation (e.g., 10.0.0.0/16). This range must be unique within the network and large enough to contain all your subnets. Step 4: Add Subnets In the same IP Addresses section, scroll down to the Subnets.\nClick Add Subnet.\nName: Give a name to your subnet (e.g., FrontEndSubnet). Subnet Address Range: Enter a subnet address range (e.g., 10.0.1.0/24). Click Add to add the subnet.\n(Repeat this step if you want to add more subnets.)\nStep 5: Configure Security (Optional) In the Security tab, you can enable security features:\nBastionHost: Secure RDP/SSH access to VMs without public IP. Firewall: Add Azure Firewall to control traffic to/from the VNet. DDoS protection: Enable Standard DDoS protection for better security. Configure these options as required and proceed to the next step.\nStep 6: Review and Create Review all the settings and ensure that everything is configured correctly. Click Review + Create. Once validation is passed, click Create to deploy the VNet. Step 7: Verify the Virtual Network After the deployment is complete, navigate to Resource Groups and select the resource group where the VNet was created. Click on the Virtual Network to see the details of the newly created VNet. Verify the Address Space, Subnets, and other settings to ensure they are correctly configured. Additional Configurations Step 8: Add Network Security Groups (NSGs) In the VNet page, select Subnets. Click on the desired subnet to attach a Network Security Group (NSG). Select an existing NSG or create a new one to define inbound/outbound rules. Step 9: Enable VNet Peering (Optional) If you want to connect this VNet to another VNet, go to the Peerings section. Click Add Peering. Name: Enter a name for the peering connection. Virtual Network Deployment Model: Select the deployment model (usually Resource Manager). Peering Status: Choose the desired configuration (Allow/Block traffic). Click Add to establish peering. Example VNet Configuration VNet: MyVNet Address Space: 10.0.0.0/16 Subnets: - FrontEndSubnet: 10.0.1.0/24 - BackEndSubnet: 10.0.2.0/24 NSGs: - FrontEndNSG: Applied to FrontEndSubnet - BackEndNSG: Applied to BackEndSubnet Azure VNet Peering Examples Example 1: Peering Between Two VNets in the Same Region Overview VNet1 and VNet2 are located in the same region. The goal is to enable communication between resources in both VNets via VNet peering. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.1.0.0/16 Both VNets should not have overlapping address ranges. Steps to Peer VNet1 with VNet2 Go to VNet1:\nIn the Azure Portal, navigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2. Traffic to Remote Network: Select Allow traffic from VNet1 to VNet2. Traffic Forwarding: Enable Allow Gateway Transit (if using one VNet’s gateway to access the internet). Allow Virtual Network Access: Yes. Click Add. Go to VNet2:\nIn the Azure Portal, navigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1. Traffic to Remote Network: Select Allow traffic from VNet2 to VNet1. Allow Virtual Network Access: Yes. Click Add. Example 2: Peering Between Two VNets in Different Regions (Global VNet Peering) Overview VNet1 is in the East US region. VNet2 is in the West Europe region. We will establish Global VNet Peering between these two VNets. Prerequisites VNet1 Address Space: 10.0.0.0/16 (East US) VNet2 Address Space: 10.2.0.0/16 (West Europe) Both VNets must not have overlapping IP address ranges. Steps to Peer VNet1 (East US) with VNet2 (West Europe) Go to VNet1 (East US):\nIn the Azure Portal, navigate to Virtual Networks and select VNet1 (in the East US region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2:\nName: VNet1-to-VNet2 Peering Remote Virtual Network: Select VNet2 (in the West Europe region). Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Allow Gateway Transit: Enable this if needed (for shared VPN gateways). Click Add. Go to VNet2 (West Europe):\nIn the Azure Portal, navigate to Virtual Networks and select VNet2 (in the West Europe region). In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1:\nName: VNet2-to-VNet1 Peering Remote Virtual Network: Select VNet1 (in the East US region). Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Allow Gateway Transit: Enable this if needed. Click Add. Example 3: VNet Peering with Different Subscriptions Overview VNet1 and VNet2 are located in different subscriptions. The goal is to peer these VNets for communication. Prerequisites VNet1 Address Space: 10.0.0.0/16 VNet2 Address Space: 10.3.0.0/16 Both VNets must belong to separate Azure subscriptions, but they must not have overlapping address ranges. Ensure the subscriptions are associated with the same Azure Active Directory (AAD) tenant. Steps to Peer VNet1 with VNet2 Across Subscriptions Go to VNet1 (Subscription A):\nNavigate to Virtual Networks and select VNet1. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet1 to VNet2 (in a different subscription):\nName: VNet1-to-VNet2 Remote Virtual Network: Use the Resource ID of VNet2. To get the resource ID of VNet2, go to VNet2 in Subscription B, click on Properties, and copy the Resource ID. Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet1 to VNet2. Click Add. Go to VNet2 (Subscription B):\nNavigate to Virtual Networks and select VNet2. In the left-hand menu, select Peerings. Click Add Peering. Configure Peering from VNet2 to VNet1 (in a different subscription):\nName: VNet2-to-VNet1 Remote Virtual Network: Use the Resource ID of VNet1 (from Subscription A). Allow Virtual Network Access: Yes. Traffic to Remote Network: Allow traffic from VNet2 to VNet1. Click Add. VNet Peering Considerations: No Overlapping IP Address Ranges: VNets being peered cannot have overlapping address spaces. Data Transfer Costs: Data transferred between peered VNets is charged, especially across regions (Global Peering). Gateway Transit: If you want one VNet to use another VNet’s VPN gateway, enable Gateway Transit during peering setup. Security: Use Network Security Groups (NSGs) to control traffic between peered VNets. Reference Links: Azure VNet Peering Global VNet Peering Azure Network Watcher Overview Azure Network Watcher is a regional service that provides tools to monitor, diagnose, and gain insights into your Azure Virtual Network (VNet). It helps troubleshoot network connectivity issues, analyze network performance, and understand network traffic in Azure.\nKey Features of Azure Network Watcher Connection Monitor: Monitor the connectivity status between an Azure virtual machine and an endpoint. IP Flow Verify: Check if traffic is allowed or denied to or from a virtual machine, based on the security group rules. Network Performance Monitor: Measure the performance between VNets, regions, or the on-premises environment. Topology: Visualize the network topology of resources within a VNet. Next Hop: Analyze the next hop for network traffic from a virtual machine. Security Group View: List the network security group (NSG) rules associated with a virtual machine. Packet Capture: Capture packets to and from a virtual machine for analysis. Diagnostic Logs: View diagnostic logs for network resources like NSGs, Load Balancers, and Gateways. Connection Troubleshoot: Test the connection between a source and destination to identify any bottlenecks. How to Enable Azure Network Watcher Step 1: Enable Network Watcher In the Azure Portal, search for Network Watcher. Select Network Watcher from the list. Choose the Subscription and Region where your resources are located. If Network Watcher is not enabled in your region, click on Enable to enable it for that region. Step 2: Verify Network Watcher is Enabled After enabling, go to the Network Watcher resource in your selected region. In the left-hand menu, you will see a list of tools like Connection Monitor, IP Flow Verify, Topology, etc. Network Watcher Tools 1. Connection Monitor Purpose: Monitor the connectivity between a virtual machine and a given destination (another VM, an on-premises network, or a public endpoint). Steps: Go to Connection Monitor under Network Watcher. Click + Add to create a new monitor. Provide the source (VM) and destination (IP address, FQDN, etc.). Configure monitoring parameters like frequency and protocol. Click Create to start monitoring. 2. IP Flow Verify Purpose: Check if a specific packet is allowed or denied based on the Network Security Group (NSG) rules. Steps: Go to IP Flow Verify. Select the Subscription and VM. Enter the Direction (inbound or outbound), Local IP, Remote IP, Port, and Protocol. Click Check to determine if the traffic is allowed or denied. 3. Topology Purpose: Generate a visual map of your VNet, including subnets, virtual machines, NICs, and NSGs. Steps: Go to Topology. Select the Subscription and Resource Group. A visual representation of your network resources will be generated. You can export the topology as a JSON file. 4. Next Hop Purpose: Analyze the route that outbound traffic from a virtual machine will take, based on the routing table. Steps: Go to Next Hop. Select the Subscription, Virtual Machine, Network Interface, and Source IP. Click Next Hop to see the routing information. 5. Packet Capture Purpose: Capture inbound and outbound traffic from a virtual machine’s network interface. Steps: Go to Packet Capture. Select the Virtual Machine you want to capture traffic from. Configure the capture settings such as filter, storage location (Storage Account or local VM disk), and time duration. Start the capture and analyze the results. 6. Connection Troubleshoot Purpose: Troubleshoot the connection between a source and a destination to identify potential issues. Steps: Go to Connection Troubleshoot. Select the Subscription, Source (VM), and Destination (IP address or FQDN). Specify the Protocol (TCP/UDP) and Port. Click Check to troubleshoot the connection. Example: Verify IP Flow Scenario You have a virtual machine that cannot reach a specific endpoint. You want to verify if the NSG rules are blocking the traffic.\nSteps Navigate to Network Watcher in the Azure Portal. Under IP Flow Verify, select the virtual machine having issues. Input the following details: Direction: Inbound (or Outbound) Local IP: The IP of the virtual machine. Remote IP: The IP of the endpoint. Local Port: The port you are trying to access on the VM. Remote Port: The port being accessed from the remote endpoint. Protocol: TCP or UDP. Click Check to see if the traffic is allowed or denied based on the current NSG rules. Pricing Network Watcher comes with a set of free limits and paid tiers. Most features, like topology and NSG diagnostics, are free. However, features like Packet Capture and Connection Monitor may have associated costs.\nReference Pricing: Packet Capture: Based on the amount of data captured and stored. Connection Monitor: Based on the number of checks and monitoring frequency. For more information, check the official Azure Pricing Calculator.\nReference Links Azure Network Watcher Documentation Troubleshoot with Network Watcher Pricing for Network Watcher Azure Networking Tasks \u0026 Common Interview Topics 1. Virtual Networks (VNet) Creating and Configuring VNets: Understanding how to create, manage, and assign VNets. Knowing how to break up address spaces into subnets and how to allocate CIDR blocks. Subnets: Creating multiple subnets, routing traffic between subnets, and configuring subnet delegation to specific Azure services (e.g., Virtual Machines, App Services). Service Endpoints and Private Endpoints: Configuring service endpoints for services like Azure SQL, and creating private endpoints to secure Azure resources. Common Interview Questions: What is a VNet in Azure, and how does it differ from a traditional network? How do you configure subnets within a VNet, and what considerations do you need to make for CIDR block assignment? What are service endpoints and private endpoints in Azure? When would you use each? How would you peer two VNets, and what are the security implications? 2. Network Security Groups (NSGs) Configuring NSG Rules: Creating and managing inbound and outbound security rules. Understanding how to configure port, IP, and protocol-based access control. Application Security Groups (ASGs): Grouping VMs into logical ASGs to simplify security rule management. Common Interview Questions: What are Network Security Groups, and how do they control traffic? How do you set up an NSG rule to block all traffic except SSH (port 22) for a specific VM? Explain the difference between an NSG and an ASG. How are they used together? How would you troubleshoot if a VM is unable to connect due to NSG rules? 3. Public and Private IP Addressing Configuring Public and Private IPs: Assigning static or dynamic public IPs and private IPs to resources like Virtual Machines or Load Balancers. Elastic IPs and IP Allocation: Understanding IP address allocation for scaling resources and avoiding IP exhaustion. Common Interview Questions: What’s the difference between a public and private IP in Azure, and how are they used? How would you assign a static IP to a VM, and when would this be necessary? How do you ensure high availability when using public IP addresses with Azure services? 4. Azure Load Balancer Setting up Load Balancers: Configuring an Azure Load Balancer for distributing traffic across multiple VMs. Health Probes: Configuring health probes for monitoring VM availability. Internal vs. External Load Balancers: Understanding when to use an internal load balancer (for private resources) vs. external. Common Interview Questions: Explain how Azure Load Balancers work, and what types are available? How would you configure a health probe for an Azure Load Balancer? What is the difference between an internal and external load balancer, and in which scenarios would you use each? 5. Azure Application Gateway (Layer 7 Load Balancing) Application Gateway Setup: Configuring Azure Application Gateway for Layer 7 load balancing with SSL termination and URL-based routing. WAF (Web Application Firewall): Configuring WAF to protect applications against common web exploits. Common Interview Questions: What’s the difference between an Azure Load Balancer and Azure Application Gateway? How does SSL termination work on Application Gateway, and why is it important? When would you use WAF in conjunction with Application Gateway? 6. Virtual Network Peering VNet Peering: Setting up VNet peering to connect two virtual networks, allowing resources in both networks to communicate. Global VNet Peering: Connecting VNets across different regions. Common Interview Questions: What is VNet peering, and how does it work in Azure? How would you set up peering between two VNets in different regions (global VNet peering)? How is routing between peered VNets managed, and what are the cost implications? 7. Azure VPN Gateway Configuring Site-to-Site VPN: Setting up a VPN Gateway for a secure connection between on-premises networks and Azure VNets. Point-to-Site VPN: Setting up a point-to-site VPN for secure remote access from individual devices to Azure VNets. ExpressRoute: Understanding the differences between VPN Gateway and ExpressRoute for hybrid network connectivity. Common Interview Questions: What is the difference between Site-to-Site VPN and Point-to-Site VPN in Azure? How does Azure VPN Gateway differ from ExpressRoute, and when would you choose one over the other? What are the steps to configure a Site-to-Site VPN connection between an on-premises network and Azure? 8. Azure DNS and Custom DNS Configuring DNS: Understanding how to set up DNS zones and records for your resources in Azure. Custom DNS: How to configure custom DNS servers for VNets and enforce DNS name resolution for resources in your network. Common Interview Questions: What is Azure DNS, and how is it used to manage domain names in the cloud? How would you configure custom DNS servers for your Azure resources? What is the difference between Azure DNS and an external DNS provider? 9. Traffic Manager Traffic Manager Profiles: Configuring Azure Traffic Manager for global DNS-based traffic routing across multiple regions. Routing Methods: Understanding different routing methods (e.g., priority, performance, geographic) for distributing traffic. Common Interview Questions: What is Azure Traffic Manager, and how does it work? What are the different traffic routing methods available in Traffic Manager, and when would you use them? How do you ensure high availability across multiple regions using Azure Traffic Manager? Common Networking Interview Questions What is the difference between a VNet and a subnet in Azure? Explain how NSGs work and how they control traffic within a VNet. How do you assign a public IP to a VM, and when would you use a static vs. dynamic IP? What is VNet peering, and how is it different from using a VPN Gateway? Describe the process of setting up a load balancer for a group of VMs in Azure. How would you configure DNS for an Azure VNet? Can you use custom DNS servers? What are service endpoints, and how do they help secure access to Azure resources? How do you monitor network traffic and performance in Azure? How does Azure handle hybrid network connectivity, and what are the differences between VPN Gateway and ExpressRoute? What is the role of Azure Traffic Manager, and how does it differ from Azure Load Balancer? This list covers the most commonly used tasks and scenarios in Azure Networking and some of the key questions asked in interviews. Understanding these concepts will help you demonstrate your knowledge and problem-solving abilities during interviews.\nAzure Service Endpoint vs. Private Endpoint Azure offers Service Endpoints and Private Endpoints to secure traffic between virtual networks (VNets) and Azure services. Below is an overview of their key differences, use cases, and benefits.\nAzure Service Endpoint An Azure Service Endpoint extends a VNet to Azure services by enabling secure access through the Azure backbone network, bypassing the public internet.\nKey Features Secures traffic between VNet and Azure services (e.g., Azure Storage, Azure SQL Database) over the Azure backbone. Simplifies network architecture by removing the need for public IP whitelisting. Supports identity-based access control via Azure AD and service firewalls. No additional cost beyond standard Azure VNet charges. Use Cases Securing traffic to Azure PaaS services like Azure Storage or SQL Database from VMs or on-premises. Use in environments where simplicity and cost efficiency are key. Limitations Traffic still originates from the public IP address of the VNet/Subnet. Limited to supported Azure services. Azure Private Endpoint An Azure Private Endpoint creates a private IP within your VNet that is directly connected to a specific instance of an Azure service.\nKey Features Provides a fully private connection to Azure services, eliminating public IP exposure. Works with a variety of services, including Azure Storage, SQL Database, and more. Supports DNS configuration to resolve the private IP for the service. Charged based on Private Endpoint usage. Use Cases Scenarios requiring strict isolation and compliance by keeping all traffic private. Connecting from on-premises environments via VPN or ExpressRoute. Securing Azure services used by multi-tenant applications. Limitations Requires additional setup for DNS resolution. Costlier compared to Service Endpoints. Comparison Table Feature Service Endpoint Private Endpoint Traffic Path Uses Azure backbone but originates from public IP. Fully private connection within the VNet. Public Exposure Service IP is public but accessed securely. Service is completely isolated within the VNet. Use Cases Simple scenarios for securing Azure services. Strict compliance or private communication. Supported Services Limited to certain Azure PaaS services. Supported by many Azure services. Cost No additional cost. Charged for Private Endpoint usage. DNS Configuration Not required. Required for resolving private IPs. On-Premises Access Supported via VPN/ExpressRoute with public IP. Supported via VPN/ExpressRoute over private IP. Choosing Between Service Endpoint and Private Endpoint Use Service Endpoint if:\nYou need a cost-effective and simple solution to secure traffic. Public IP exposure is acceptable. Use Private Endpoint if:\nYou require full isolation and compliance with strict security policies. You need private connections to specific Azure service instances.",
    "description": "Azure Backup Azure Backup is a cloud-based data protection solution provided by Microsoft. It is designed to back up and restore data from the Microsoft Azure cloud, ensuring business continuity in case of data loss or disasters. Azure Backup supports a wide range of scenarios, including on-premises systems, Azure VMs, SQL databases, file shares, and more.\nKey Features Centralized Backup Management: Manage backups for on-premises and Azure resources from the Azure portal. Data Security: Encryption in transit and at rest, with the option to use your own keys. Long-Term Retention: Options for long-term data retention to meet regulatory requirements. Cost-Effective: Pay-as-you-go model eliminates the need for on-premises backup infrastructure. Disaster Recovery Integration: Seamless integration with Azure Site Recovery for disaster recovery. Application-Aware Backups: Supports backups for critical workloads like SQL Server, Exchange, and SharePoint. Incremental Backups: Saves storage space and reduces bandwidth consumption. Common Backup Scenarios Azure Virtual Machines\nBack up Azure VMs (Windows and Linux) using the Azure Backup service.",
    "tags": [],
    "title": "Part 10",
    "uri": "/part10/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 11",
    "uri": "/part11/index.html"
  },
  {
    "breadcrumb": "",
    "content": "App Services",
    "description": "App Services",
    "tags": [],
    "title": "Part 12",
    "uri": "/part12/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 13",
    "uri": "/part13/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 14",
    "uri": "/part14/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 15",
    "uri": "/part15/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 16",
    "uri": "/part16/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 17",
    "uri": "/part17/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 18",
    "uri": "/part18/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 19",
    "uri": "/part19/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Part 20",
    "uri": "/part20/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
