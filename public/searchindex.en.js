var relearn_searchindex = [
  {
    "breadcrumb": "",
    "content": "📦 Vagrant - Day 01 1. Introduction to Vagrant What is Vagrant? Vagrant is an open-source tool that allows you to build and manage virtualized development environments.\nBenefits of Using Vagrant\nReproducibility Isolation Simplified provisioning Use Cases\nDevOps automation Testing infrastructure Multi-VM environments 2. Installation Linux/Mac/Windows Step 1: Install VirtualBox\nhttps://www.virtualbox.org/wiki/Downloads\nStep 2: Install Vagrant\nhttps://www.vagrantup.com/downloads\nVerify Installation:\nvagrant --version 3. Vagrantfile Basics Vagrant.configure(\"2\") do |config| config.vm.box = \"hashicorp/bionic64\" config.vm.network \"private_network\", type: \"dhcp\" config.vm.synced_folder \"./data\", \"/vagrant_data\" config.vm.provider \"virtualbox\" do |vb| vb.memory = \"1024\" vb.cpus = 2 end end Key Options: config.vm.box: Defines the base box Networking: private, public, and port forwarding Synced folders: sharing between host and guest 4. Provisioning Methods:\nShell Scripts Ansible Puppet Chef Inline vs External:\nInline: Defined inside the Vagrantfile External: Separate script or playbook Example (inline shell provision):\nconfig.vm.provision \"shell\", inline: \u003c\u003c-SHELL apt-get update apt-get install -y nginx SHELL 5. Basic Commands Command Description vagrant init Create a new Vagrantfile vagrant up Start the VM vagrant ssh SSH into the VM vagrant halt Stop the VM vagrant destroy Delete the VM vagrant status Check VM status vagrant box list List installed boxes vagrant box add Add a new box vagrant box remove Remove a box 6. Synced Folders Default: /vagrant directory synced\nCustom Example:\nconfig.vm.synced_folder \"./local\", \"/vm_data\" Types: default, rsync, NFS\n7. Networking Port Forwarding\nconfig.vm.network \"forwarded_port\", guest: 80, host: 8080 Private Network\nconfig.vm.network \"private_network\", ip: \"192.168.33.10\" Public Network\nconfig.vm.network \"public_network\" 8. Multi-Machine Environments Example:\nVagrant.configure(\"2\") do |config| config.vm.define \"web\" do |web| web.vm.box = \"ubuntu/bionic64\" end config.vm.define \"db\" do |db| db.vm.box = \"ubuntu/bionic64\" end end Use cases:\nWeb + DB setup HA/clustered configurations 9. Troubleshooting Networking Issues:\nCheck IP conflicts Restart networking service inside VM Provisioning Errors:\nVerify scripts and paths Use external shell script for debugging Debug Mode:\nvagrant up --debug 10. Best Practices Track Vagrantfile in version control Use .gitignore to exclude .vagrant/ Use small, optimized base boxes Clean up unused boxes: vagrant box prune Getting Started Quick Steps # Step 1: Initialize vagrant init bento/ubuntu-24.04 --box-version 202407.23.0 # Step 2: Start vagrant up # Step 3: SSH vagrant ssh # Step 4: Halt vagrant halt –reprovision Usage: vagrant up --provision Explanation: The --reprovision option is used with the vagrant up command to force the provisioning of the virtual machine, even if it has already been provisioned previously. This is useful if you want to apply changes to the provisioning scripts (such as updates or new configurations) without destroying and recreating the VM. Resources Vagrant Documentation Vagrant Boxes",
    "description": "📦 Vagrant - Day 01 1. Introduction to Vagrant What is Vagrant? Vagrant is an open-source tool that allows you to build and manage virtualized development environments.\nBenefits of Using Vagrant\nReproducibility Isolation Simplified provisioning Use Cases\nDevOps automation Testing infrastructure Multi-VM environments 2. Installation Linux/Mac/Windows Step 1: Install VirtualBox\nhttps://www.virtualbox.org/wiki/Downloads\nStep 2: Install Vagrant\nhttps://www.vagrantup.com/downloads\nVerify Installation:\nvagrant --version 3. Vagrantfile Basics Vagrant.configure(\"2\") do |config| config.vm.box = \"hashicorp/bionic64\" config.vm.network \"private_network\", type: \"dhcp\" config.vm.synced_folder \"./data\", \"/vagrant_data\" config.vm.provider \"virtualbox\" do |vb| vb.memory = \"1024\" vb.cpus = 2 end end Key Options: config.vm.box: Defines the base box Networking: private, public, and port forwarding Synced folders: sharing between host and guest 4. Provisioning Methods:",
    "tags": [],
    "title": "Vagrant: Day 01",
    "uri": "/part01/index.html"
  },
  {
    "breadcrumb": "",
    "content": "1. pwd (Print Working Directory) Usage: pwd\nExplanation: This command prints the full path of the current working directory. It helps users confirm where they are in the directory structure.\nExample:\n$ pwd /home/user 2. ls (List) Usage: ls\nExplanation: Lists the files and directories within the current directory. By default, ls will not show hidden files (files starting with a dot). Use options like -l for detailed listing or -a for all files.\nExample:\n$ ls -la total 28 drwxr-xr-x 4 user user 4096 May 10 10:45 . drwxr-xr-x 3 user user 4096 May 10 10:45 .. -rw-r--r-- 1 user user 45 May 10 10:45 file1.txt 3. cd (Change Directory) Usage: cd \u003cdirectory-path\u003e\nExplanation: This command allows you to change to a specified directory. If no argument is provided, it takes you to the user’s home directory.\nExample:\n$ cd /home/user/Documents 4. cp (Copy) Usage: cp \u003csource\u003e \u003cdestination\u003e\nExplanation: Copies files or directories from the source to the destination. You can use the -r option to copy directories recursively.\nExample:\n$ cp file1.txt /home/user/backup/ 5. mv (Move/Rename) Usage: mv \u003csource\u003e \u003cdestination\u003e\nExplanation: Moves or renames files and directories. It’s also used to move files between directories.\nExample:\n$ mv oldname.txt newname.txt 6. rm (Remove) Usage: rm \u003cfile\u003e\nExplanation: Removes a file. If you want to remove a directory, you must use the -r option for recursive removal.\nExample:\n$ rm -r directory_name 7. touch (Create Empty File) Usage: touch \u003cfile-name\u003e\nExplanation: Creates a new empty file if it doesn’t exist. If the file exists, touch updates its timestamp.\nExample:\n$ touch newfile.txt 8. cat (Concatenate and Display File) Usage: cat \u003cfile-name\u003e\nExplanation: Displays the contents of a file to the terminal. It can also be used to concatenate files together.\nExample:\n$ cat file1.txt 9. echo (Display Text) Usage: echo \u003ctext\u003e\nExplanation: Displays the text to the terminal or outputs it to a file.\nExample:\n$ echo \"Hello, World!\" 10. man (Manual Pages) Usage: man \u003ccommand\u003e\nExplanation: Displays the manual or help documentation for a command.\nExample:\n$ man ls 11. chmod (Change File Permissions) Usage: chmod \u003cpermissions\u003e \u003cfile\u003e\nExplanation: Changes the permissions of a file or directory. It uses numerical values to set read, write, and execute permissions for the owner, group, and others.\nExample:\n$ chmod 755 script.sh 12. chown (Change Owner/Group) Usage: chown \u003cuser\u003e:\u003cgroup\u003e \u003cfile\u003e\nExplanation: Changes the ownership of a file or directory. You can specify a user, a group, or both.\nExample:\n$ chown user:group file.txt 13. ps (Process Status) Usage: ps aux\nExplanation: Displays the current running processes on your system, showing information such as process ID (PID), memory and CPU usage.\nExample:\n$ ps aux 14. top (Task Manager) Usage: top\nExplanation: Displays a real-time, dynamic view of the system’s running processes, including memory, CPU usage, and more.\nExample:\n$ top 15. df (Disk Free) Usage: df -h\nExplanation: Displays the available disk space on all mounted filesystems. The -h option makes the output human-readable.\nExample:\n$ df -h 16. free (Memory Usage) Usage: free -h\nExplanation: Displays the amount of free and used memory in the system.\nExample:\n$ free -h 17. uname (System Information) Usage: uname -a\nExplanation: Displays the system information, including the kernel version, architecture, and other details.\nExample:\n$ uname -a 18. hostname (Get/Set Hostname) Usage: hostname\nExplanation: Displays or sets the system’s hostname.\nExample:\n$ hostname Architecture and File Structure on Rocky Linux 9 System Architecture Rocky Linux 9 supports x86_64 (64-bit) architecture by default. It also provides support for ARM-based systems. Rocky Linux 9 uses the Linux Kernel (typically version 5.14.x) and the systemd init system.\nPackage Manager: dnf (Dandified Yum) System Architecture: Primarily x86_64, also supports ARM and other architectures. File System Hierarchy The file structure in Rocky Linux 9 follows the Filesystem Hierarchy Standard (FHS), which is used across most Linux distributions. Here’s a breakdown of important directories:\n1. / (Root) The root directory is the top-most directory in the filesystem, from which all other directories branch out. 2. /bin (Essential Binaries) Contains essential command binaries required for the system to boot and run.\nExample: /bin/bash, /bin/ls\n3. /boot (Boot Loader Files) Contains files necessary for booting the system, including the kernel.\nExample: /boot/vmlinuz, /boot/grub2/\n4. /dev (Device Files) Contains device files that represent system hardware, such as hard drives, terminals, and USB devices.\nExample: /dev/sda, /dev/null\n5. /etc (Configuration Files) Stores system-wide configuration files for the system and applications.\nExample: /etc/passwd, /etc/hostname\n6. /home (User Home Directories) Contains the home directories for regular users.\nExample: /home/user1/\n7. /lib (Essential Libraries) Contains shared libraries required by binaries in /bin and /sbin.\nExample: /lib/libc.so.6\n8. /media (Mount Points for Removable Media) Used for mounting removable media like USB drives and CD-ROMs.\nExample: /media/usb/\n9. /mnt (Temporary Mount Points) Typically used for temporary mounts of file systems.\nExample: /mnt/data/\n10. /opt (Optional Software Packages) Contains third-party application software packages that are not part of the core distribution.\nExample: /opt/apache/\n11. /proc (Virtual Filesystem for Kernel Information) A virtual file system that exposes system information such as running processes and hardware configuration.\nExample: /proc/cpuinfo, /proc/meminfo\n12. /root (Root User’s Home) The home directory for the root user.\nExample: /root/\n13. /run (Runtime Information) Contains runtime data such as information about running processes, and other system state data.\nExample: /run/utmp\n14. /sbin (System Binaries) Contains system binaries used for administrative tasks, typically accessible only to the root user.\nExample: /sbin/reboot, /sbin/shutdown\n15. /tmp (Temporary Files) Used for storing temporary files created by the system or applications. Files in this directory are often deleted after reboot.\nExample: /tmp/tempfile\n16. /usr (User Programs and Data) Contains user applications and data. It is one of the largest directories on a system.\nExample: /usr/bin, /usr/lib\n17. /var (Variable Data) Contains variable files such as logs, spool files, and caches.\nExample: /var/log/, /var/spool/\nKey Configuration Files Network Configuration: /etc/sysconfig/network-scripts/ifcfg-eth0 System Users and Groups: /etc/passwd, /etc/group, /etc/shadow Package Management: /etc/dnf/dnf.conf Systemd Services: /etc/systemd/system/",
    "description": "1. pwd (Print Working Directory) Usage: pwd\nExplanation: This command prints the full path of the current working directory. It helps users confirm where they are in the directory structure.\nExample:\n$ pwd /home/user 2. ls (List) Usage: ls\nExplanation: Lists the files and directories within the current directory. By default, ls will not show hidden files (files starting with a dot). Use options like -l for detailed listing or -a for all files.",
    "tags": [],
    "title": "Linux Basics: Day 02",
    "uri": "/part02/index.html"
  },
  {
    "breadcrumb": "",
    "content": "User Management in Rocky Linux 9 Overview User management in Linux involves creating, modifying, and deleting user accounts, as well as assigning user privileges and managing groups. In Rocky Linux 9, user management is done via command-line tools like useradd, usermod, userdel, and groupadd.\n1. useradd (Create a New User) Usage: useradd \u003cusername\u003e\nExplanation: The useradd command is used to create a new user account. The command creates the user’s home directory and sets up default user configuration files.\nExample:\n$ sudo useradd -m john -m: Creates the home directory for the user. 2. usermod (Modify User Account) Usage: usermod [options] \u003cusername\u003e\nExplanation: The usermod command modifies an existing user account. You can change user details like the home directory, username, user ID, group membership, etc.\nExamples:\nChange user’s home directory:\n$ sudo usermod -d /home/john_doe john Add a user to a group:\n$ sudo usermod -aG sudo john -aG: Adds the user to the specified group without removing them from other groups. 3. userdel (Delete a User Account) Usage: userdel [options] \u003cusername\u003e\nExplanation: The userdel command removes a user account from the system. It can also remove the user’s home directory and mail spool if specified.\nExample:\n$ sudo userdel -r john -r: Removes the user’s home directory and mail spool along with the user. 4. passwd (Change User Password) Usage: passwd \u003cusername\u003e\nExplanation: The passwd command is used to change a user’s password. If no username is specified, it changes the current user’s password.\nExample:\n$ sudo passwd john Prompts you to enter a new password for the user john. 5. groupadd (Create a Group) Usage: groupadd \u003cgroupname\u003e\nExplanation: The groupadd command creates a new group on the system.\nExample:\n$ sudo groupadd developers 6. groupdel (Delete a Group) Usage: groupdel \u003cgroupname\u003e\nExplanation: The groupdel command deletes a specified group from the system. Note that it does not remove users assigned to the group.\nExample:\n$ sudo groupdel developers 7. gpasswd (Administer Group Passwords) Usage: gpasswd \u003cgroupname\u003e\nExplanation: This command is used to administer group passwords. It allows you to assign a password to a group, which can be used for privileged group access.\nExample:\n$ sudo gpasswd developers 8. id (Display User and Group Information) Usage: id \u003cusername\u003e\nExplanation: The id command displays the user’s UID (User ID), GID (Group ID), and group memberships.\nExample:\n$ id john Displays information such as: uid=1001(john) gid=1001(john) groups=1001(john),10(wheel) 9. groups (Display Group Memberships) Usage: groups \u003cusername\u003e\nExplanation: The groups command shows the groups to which a user belongs.\nExample:\n$ groups john Output might be: john : john wheel 10. chown (Change Ownership of Files/Directories) Usage: chown [options] \u003cuser\u003e:\u003cgroup\u003e \u003cfile\u003e\nExplanation: The chown command is used to change the ownership of a file or directory. It can be used to assign files to a user and a group.\nExample:\n$ sudo chown john:developers /home/john/file.txt 11. chgrp (Change Group Ownership of Files/Directories) Usage: chgrp \u003cgroupname\u003e \u003cfile\u003e\nExplanation: The chgrp command changes the group ownership of a file or directory.\nExample:\n$ sudo chgrp developers /home/john/file.txt 12. whoami (Current User) Usage: whoami\nExplanation: Displays the username of the current user.\nExample:\n$ whoami john 13. w (Who Is Logged In) Usage: w\nExplanation: Displays who is logged in and what they are doing.\nExample:\n$ w Example output: 11:42:43 up 4 days, 3:34, 2 users, load average: 0.00, 0.01, 0.05\rUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT\rjohn pts/0 :0 09:23 3.00s 0.01s 0.01s w 14. last (Display Last Logins) Usage: last\nExplanation: Displays the login history for users, showing when and where users last logged in.\nExample:\n$ last 15. su (Switch User) Usage: su - \u003cusername\u003e\nExplanation: The su (substitute user) command allows you to switch to another user account. If no username is provided, it defaults to the root user.\nExample:\n$ su - john Switches to the john user account. 16. sudo (Execute a Command as Another User) Usage: sudo \u003ccommand\u003e\nExplanation: The sudo command allows users to execute commands with elevated privileges, typically as the root user. Users need to be part of the sudoers group to use sudo.\nExample:\n$ sudo apt update 17. /etc/passwd (User Account Information) Explanation: This file contains basic information about all user accounts on the system, including their username, UID, GID, home directory, and login shell.\nExample:\n$ cat /etc/passwd Example entry: john:x:1001:1001:John Doe:/home/john:/bin/bash 18. /etc/shadow (User Password Information) Explanation: This file stores user password information in an encrypted format. Only privileged users (like root) can read this file.\nExample:\n$ cat /etc/shadow Example entry: john:$6$8DF....:18011:0:99999:7::: Linux Permission Management In Linux, file and directory permissions define who can read, write, or execute a file. These permissions are crucial for system security and multi-user environments.\n🧱 Basic Concepts Every file/directory has:\nOwner: User who owns the file Group: Group associated with the file Others: Everyone else Permission Types Symbol Meaning Applies to r Read File: view contentDirectory: list files w Write File: modify contentDirectory: add/remove files x Execute File: run as a programDirectory: enter directory 🔍 Viewing Permissions Use ls -l:\n$ ls -l file.txt -rw-r--r-- 1 user group 1024 May 7 12:00 file.txt 2. Numeric (Octal) Mode Octal Binary Meaning 7 111 rwx 6 110 rw- 5 101 r-x 4 100 r– 0 000 — 🔍 What are Permissions in Linux? Linux is a multi-user operating system. Every file or directory is associated with access permissions for:\nUser (u) – the owner Group (g) – users in the same group Others (o) – all other users Each can have three types of permissions:\nSymbol Permission File Meaning Directory Meaning r Read View contents List files w Write Modify contents Add/remove files x Execute Run as program Enter (cd) the folder 👁️ Viewing Permissions Use ls -l to view permissions:\n$ ls -l file.txt -rw-r--r-- 1 user group 1024 May 7 12:00 file.txt Breakdown:\n- → file type (d for directory) rw- → user can read/write r-- → group can read r-- → others can read ✏️ Changing Permissions with chmod You can change permissions in two ways:\n1. Symbolic Mode chmod u+x script.sh # Add execute for user chmod g-w file.txt # Remove write for group chmod o=r file.txt # Set read-only for others chmod a+x deploy.sh # Add execute for all (user, group, others) 2. Numeric (Octal) Mode Octal Binary Permission 7 111 rwx 6 110 rw- 5 101 r-x 4 100 r– 0 000 — Examples:\nchmod 755 script.sh # rwxr-xr-x chmod 644 file.txt # rw-r--r-- Recursive Change chmod -R 755 /path/to/dir 🔐 Special Permissions Linux supports special permissions for advanced access control.\n1. Setuid (Set User ID) When set on an executable, the process runs as the file owner. Represented by s in the user field (rws). chmod u+s /usr/bin/somebinary 2. Setgid (Set Group ID) On files: Process runs with the file’s group. On directories: New files inherit the directory’s group. Represented by s in the group field (rwxr-sr-x). chmod g+s /shared/folder 3. Sticky Bit Commonly used on shared directories like /tmp. Only the file’s owner can delete it. Represented by t in the others field (rwxrwxrwt). chmod +t /shared/folder 🧪 Special Permissions with Octal chmod 1755 file.sh # Sticky bit + rwxr-xr-x chmod 2755 file.sh # Setgid + rwxr-sr-x chmod 4755 file.sh # Setuid + rwsr-xr-x View them with ls -l:\ns in user/group field: Setuid/Setgid t in others field: Sticky bit 📘 Summary Use ls -l to view permissions Use chmod (symbolic or octal) to modify them Use chown to change file ownership Use chmod u+s, g+s, or +t to set special permissions Mastering Linux permissions helps enforce security, especially in multi-user environments.",
    "description": "User Management in Rocky Linux 9 Overview User management in Linux involves creating, modifying, and deleting user accounts, as well as assigning user privileges and managing groups. In Rocky Linux 9, user management is done via command-line tools like useradd, usermod, userdel, and groupadd.\n1. useradd (Create a New User) Usage: useradd \u003cusername\u003e\nExplanation: The useradd command is used to create a new user account. The command creates the user’s home directory and sets up default user configuration files.",
    "tags": [],
    "title": "User, Group and Permissions: Day 03",
    "uri": "/part03/index.html"
  },
  {
    "breadcrumb": "",
    "content": "📂 1. Listing Disks and Partitions View all block devices: lsblk Show detailed partition table: fdisk -l View disk usage: df -h View inode usage: df -i 🧱 2. Partitioning Disks Using fdisk (for MBR-style partitions): sudo fdisk /dev/sdX # n -\u003e new partition # p -\u003e primary # w -\u003e write changes Using parted (for GPT and scripting): sudo parted /dev/sdX (parted) mklabel gpt (parted) mkpart primary ext4 1MiB 100% (parted) quit 🛠️ 3. Creating Filesystems Create ext4 filesystem: sudo mkfs.ext4 /dev/sdX1 Create xfs filesystem: sudo mkfs.xfs /dev/sdX1 📦 4. Mounting and Unmounting Disks Create a mount point and mount: sudo mkdir /mnt/data sudo mount /dev/sdX1 /mnt/data Unmount: sudo umount /mnt/data View mounted filesystems: mount | grep sd 🔁 5. Persistent Mounting with /etc/fstab Get UUID: blkid /dev/sdX1 Edit /etc/fstab: UUID=xxxx-xxxx /mnt/data ext4 defaults 0 2 Then run:\nsudo mount -a # To verify fstab is valid 🔍 6. Disk Usage Analysis Using du: du -sh /home/user Using ncdu (interactive tool): sudo apt install ncdu # or yum install ncdu ncdu / 🔒 7. Checking \u0026 Repairing Filesystems ext4 check: sudo fsck /dev/sdX1 Must unmount first or run in recovery mode.\n📘 Summary lsblk, fdisk -l, df -h – View disk info fdisk, parted – Create partitions mkfs.ext4, mkfs.xfs – Format partitions mount, umount, fstab – Manage mounts fsck – Repair filesystems Linux disk management is critical for system setup, storage provisioning, and data integrity.",
    "description": "📂 1. Listing Disks and Partitions View all block devices: lsblk Show detailed partition table: fdisk -l View disk usage: df -h View inode usage: df -i 🧱 2. Partitioning Disks Using fdisk (for MBR-style partitions): sudo fdisk /dev/sdX # n -\u003e new partition # p -\u003e primary # w -\u003e write changes Using parted (for GPT and scripting): sudo parted /dev/sdX (parted) mklabel gpt (parted) mkpart primary ext4 1MiB 100% (parted) quit 🛠️ 3. Creating Filesystems Create ext4 filesystem: sudo mkfs.ext4 /dev/sdX1 Create xfs filesystem: sudo mkfs.xfs /dev/sdX1 📦 4. Mounting and Unmounting Disks Create a mount point and mount: sudo mkdir /mnt/data sudo mount /dev/sdX1 /mnt/data Unmount: sudo umount /mnt/data View mounted filesystems: mount | grep sd 🔁 5. Persistent Mounting with /etc/fstab Get UUID: blkid /dev/sdX1 Edit /etc/fstab: UUID=xxxx-xxxx /mnt/data ext4 defaults 0 2 Then run:",
    "tags": [],
    "title": "Linux Disk Management: Day 04",
    "uri": "/part04/index.html"
  },
  {
    "breadcrumb": "",
    "content": "📦 What is Package Management? Linux uses package managers to install, update, and remove software efficiently while resolving dependencies.\n🧰 1. Debian/Ubuntu: apt (Advanced Package Tool) Update package list: sudo apt update Upgrade packages: sudo apt upgrade Install a package: sudo apt install package-name Remove a package: sudo apt remove package-name Remove unused packages: sudo apt autoremove Search for a package: apt search nginx 🍱 2. RHEL/CentOS/Rocky: yum and dnf On RHEL 8+ and Fedora, use dnf instead of yum.\nUpdate repository cache: sudo dnf makecache Install a package: sudo dnf install httpd Remove a package: sudo dnf remove httpd List installed packages: dnf list installed Search packages: dnf search nginx 📁 3. Using rpm Directly Install from .rpm file: sudo rpm -ivh package.rpm Upgrade an RPM: sudo rpm -Uvh package.rpm Remove an RPM: sudo rpm -e package-name Query installed RPMs: rpm -qa | grep nginx 🧊 4. openSUSE: zypper Install a package: sudo zypper install vim Remove a package: sudo zypper remove vim Update system: sudo zypper update Search: zypper search nginx 📜 5. Package Information Show detailed package info: APT:\napt show curl DNF:\ndnf info curl RPM:\nrpm -qi curl 🗃️ 6. Cleaning Up APT:\nsudo apt clean sudo apt autoremove DNF/YUM:\nsudo dnf clean all 🛡️ 7. GPG Keys and Repositories Add a GPG key (APT): wget -qO - https://example.com/key.gpg | sudo apt-key add - Add a custom repo (YUM/DNF): Create file in /etc/yum.repos.d/custom.repo:\n[custom-repo] name=Custom Repository baseurl=http://example.com/repo/ enabled=1 gpgcheck=0 ✅ Summary Tool Distros Command Examples APT Debian, Ubuntu apt install, apt update, apt remove YUM RHEL 7, CentOS 7 yum install, yum update, yum remove DNF RHEL 8+, Fedora dnf install, dnf upgrade, dnf clean RPM All RPM-based distros rpm -ivh, rpm -e, rpm -qa Zypper openSUSE zypper install, zypper remove, update Linux package management ensures reliable and secure software deployment.\n+++ title = “Day 08: Linux Monitoring” date = 2025-05-07T18:00:00Z draft = false description = “Learn essential Linux monitoring tools and commands to analyze system performance.” author = “Nirpendra Kumar” tags = [“linux”, “monitoring”, “performance”, “devops”] categories = [“Linux”, “Monitoring”] slug = “day-08-linux-monitoring” url = “/tutorials/linux/day-08/” weight = 8 toc = true summary = “Track CPU, memory, disk, and network usage using Linux command-line tools.” image = “images/linux-monitoring.png” type = “post” layout = “single” series = [“Linux Basics”] duration = “1.5h” +++\n📊 Day 08: Linux Monitoring Monitoring Linux is critical for performance tuning, capacity planning, and troubleshooting. Below are essential CLI tools for real-time and historical system monitoring.\n🧠 1. CPU and Memory Monitoring top — real-time system performance top Press M to sort by memory. Press P to sort by CPU usage. htop — enhanced top (colorful UI) htop Install via: sudo apt install htop or sudo dnf install htop\nvmstat — memory, processes, and system info vmstat 1 5 1 5: sample every second for 5 times free — memory usage free -h 💿 2. Disk Monitoring df — disk space usage df -h du — directory size du -sh /var/log iostat — CPU and I/O stats iostat -xz 1 3 Install via: sudo apt install sysstat or sudo dnf install sysstat\n🌐 3. Network Monitoring ip a or ifconfig — IP addresses ip a ss — socket statistics (replacement for netstat) ss -tuln -tuln: TCP/UDP listening sockets without resolving names netstat — old but useful netstat -plntu Might require net-tools package.\nnload — network bandwidth usage nload Install: sudo apt install nload or sudo dnf install nload\n📈 4. System Activity Reports sar — historical performance stats sar -u 1 3 Collects CPU usage every 1 second, 3 times.\nEnable sar: sudo systemctl enable sysstat sudo systemctl start sysstat 🔍 5. Process \u0026 Service Monitoring ps — process status ps aux | grep nginx pidstat — individual process usage pidstat -p \u003cPID\u003e systemctl — service status systemctl status nginx 🧪 6. Other Useful Tools Tool Description Install Command iotop Show I/O usage per process sudo apt install iotop glances All-in-one monitoring dashboard sudo apt install glances atop Advanced top-like monitor sudo apt install atop dstat Realtime resource monitor sudo apt install dstat ✅ Summary Table Resource Command Notes CPU top, htop, sar Real-time and historical usage Memory free, vmstat RAM and swap Disk df, du, iostat Disk space and I/O Network ss, netstat, nload Connections \u0026 bandwidth Processes ps, pidstat Process info and PID usage Services systemctl Service status 🔁 Automating Monitoring Reports You can use cron to schedule logs and save stats:\n*/5 * * * * sar -u 1 5 \u003e\u003e /var/log/cpu_usage.log Linux monitoring is essential to keep your systems healthy and responsive. Regular usage of these tools helps you stay ahead of issues before they impact users.",
    "description": "📦 What is Package Management? Linux uses package managers to install, update, and remove software efficiently while resolving dependencies.\n🧰 1. Debian/Ubuntu: apt (Advanced Package Tool) Update package list: sudo apt update Upgrade packages: sudo apt upgrade Install a package: sudo apt install package-name Remove a package: sudo apt remove package-name Remove unused packages: sudo apt autoremove Search for a package: apt search nginx 🍱 2. RHEL/CentOS/Rocky: yum and dnf On RHEL 8+ and Fedora, use dnf instead of yum.",
    "tags": [],
    "title": "Linux Package Management: Day 05",
    "uri": "/part05/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
