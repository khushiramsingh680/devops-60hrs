var relearn_searchindex = [
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "ðŸ“¦ Vagrant - Day 01 1. Introduction to Vagrant What is Vagrant? Vagrant is an open-source tool that allows you to build and manage virtualized development environments.\nBenefits of Using Vagrant\nReproducibility Isolation Simplified provisioning Use Cases\nDevOps automation Testing infrastructure Multi-VM environments 2. Installation Linux/Mac/Windows Step 1: Install VirtualBox\nhttps://www.virtualbox.org/wiki/Downloads\nStep 2: Install Vagrant\nhttps://www.vagrantup.com/downloads\nVerify Installation:\nvagrant --version 3. Vagrantfile Basics Vagrant.configure(\"2\") do |config| config.vm.box = \"hashicorp/bionic64\" config.vm.network \"private_network\", type: \"dhcp\" config.vm.synced_folder \"./data\", \"/vagrant_data\" config.vm.provider \"virtualbox\" do |vb| vb.memory = \"1024\" vb.cpus = 2 end end Key Options: config.vm.box: Defines the base box Networking: private, public, and port forwarding Synced folders: sharing between host and guest 4. Provisioning Methods:\nShell Scripts Ansible Puppet Chef Inline vs External:\nInline: Defined inside the Vagrantfile External: Separate script or playbook Example (inline shell provision):\nconfig.vm.provision \"shell\", inline: \u003c\u003c-SHELL apt-get update apt-get install -y nginx SHELL 5. Basic Commands Command Description vagrant init Create a new Vagrantfile vagrant up Start the VM vagrant ssh SSH into the VM vagrant halt Stop the VM vagrant destroy Delete the VM vagrant status Check VM status vagrant box list List installed boxes vagrant box add Add a new box vagrant box remove Remove a box 6. Synced Folders Default: /vagrant directory synced\nCustom Example:\nconfig.vm.synced_folder \"./local\", \"/vm_data\" Types: default, rsync, NFS\n7. Networking Port Forwarding\nconfig.vm.network \"forwarded_port\", guest: 80, host: 8080 Private Network\nconfig.vm.network \"private_network\", ip: \"192.168.33.10\" Public Network\nconfig.vm.network \"public_network\" 8. Multi-Machine Environments Example:\nVagrant.configure(\"2\") do |config| config.vm.define \"web\" do |web| web.vm.box = \"ubuntu/bionic64\" end config.vm.define \"db\" do |db| db.vm.box = \"ubuntu/bionic64\" end end Use cases:\nWeb + DB setup HA/clustered configurations 9. Troubleshooting Networking Issues:\nCheck IP conflicts Restart networking service inside VM Provisioning Errors:\nVerify scripts and paths Use external shell script for debugging Debug Mode:\nvagrant up --debug 10. Best Practices Track Vagrantfile in version control Use .gitignore to exclude .vagrant/ Use small, optimized base boxes Clean up unused boxes: vagrant box prune Getting Started Quick Steps # Step 1: Initialize vagrant init bento/ubuntu-24.04 --box-version 202407.23.0 # Step 2: Start vagrant up # Step 3: SSH vagrant ssh # Step 4: Halt vagrant halt â€“reprovision Usage: vagrant up --provision Explanation: The --reprovision option is used with the vagrant up command to force the provisioning of the virtual machine, even if it has already been provisioned previously. This is useful if you want to apply changes to the provisioning scripts (such as updates or new configurations) without destroying and recreating the VM. Resources Vagrant Documentation Vagrant Boxes",
    "description": "ðŸ“¦ Vagrant - Day 01 1. Introduction to Vagrant What is Vagrant? Vagrant is an open-source tool that allows you to build and manage virtualized development environments.\nBenefits of Using Vagrant\nReproducibility Isolation Simplified provisioning Use Cases\nDevOps automation Testing infrastructure Multi-VM environments 2. Installation Linux/Mac/Windows Step 1: Install VirtualBox\nhttps://www.virtualbox.org/wiki/Downloads\nStep 2: Install Vagrant\nhttps://www.vagrantup.com/downloads\nVerify Installation:\nvagrant --version 3. Vagrantfile Basics Vagrant.configure(\"2\") do |config| config.vm.box = \"hashicorp/bionic64\" config.vm.network \"private_network\", type: \"dhcp\" config.vm.synced_folder \"./data\", \"/vagrant_data\" config.vm.provider \"virtualbox\" do |vb| vb.memory = \"1024\" vb.cpus = 2 end end Key Options: config.vm.box: Defines the base box Networking: private, public, and port forwarding Synced folders: sharing between host and guest 4. Provisioning Methods:",
    "tags": [],
    "title": "Day 01",
    "uri": "/part01/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Linux Basics Commands 1. pwd (Print Working Directory) Usage: pwd\nExplanation: This command prints the full path of the current working directory. It helps users confirm where they are in the directory structure.\nExample:\n$ pwd /home/user 2. ls (List) Usage: ls\nExplanation: Lists the files and directories within the current directory. By default, ls will not show hidden files (files starting with a dot). Use options like -l for detailed listing or -a for all files.\nExample:\n$ ls -la total 28 drwxr-xr-x 4 user user 4096 May 10 10:45 . drwxr-xr-x 3 user user 4096 May 10 10:45 .. -rw-r--r-- 1 user user 45 May 10 10:45 file1.txt 3. cd (Change Directory) Usage: cd \u003cdirectory-path\u003e\nExplanation: This command allows you to change to a specified directory. If no argument is provided, it takes you to the userâ€™s home directory.\nExample:\n$ cd /home/user/Documents 4. cp (Copy) Usage: cp \u003csource\u003e \u003cdestination\u003e\nExplanation: Copies files or directories from the source to the destination. You can use the -r option to copy directories recursively.\nExample:\n$ cp file1.txt /home/user/backup/ 5. mv (Move/Rename) Usage: mv \u003csource\u003e \u003cdestination\u003e\nExplanation: Moves or renames files and directories. Itâ€™s also used to move files between directories.\nExample:\n$ mv oldname.txt newname.txt 6. rm (Remove) Usage: rm \u003cfile\u003e\nExplanation: Removes a file. If you want to remove a directory, you must use the -r option for recursive removal.\nExample:\n$ rm -r directory_name 7. touch (Create Empty File) Usage: touch \u003cfile-name\u003e\nExplanation: Creates a new empty file if it doesnâ€™t exist. If the file exists, touch updates its timestamp.\nExample:\n$ touch newfile.txt 8. cat (Concatenate and Display File) Usage: cat \u003cfile-name\u003e\nExplanation: Displays the contents of a file to the terminal. It can also be used to concatenate files together.\nExample:\n$ cat file1.txt 9. echo (Display Text) Usage: echo \u003ctext\u003e\nExplanation: Displays the text to the terminal or outputs it to a file.\nExample:\n$ echo \"Hello, World!\" 10. man (Manual Pages) Usage: man \u003ccommand\u003e\nExplanation: Displays the manual or help documentation for a command.\nExample:\n$ man ls 11. chmod (Change File Permissions) Usage: chmod \u003cpermissions\u003e \u003cfile\u003e\nExplanation: Changes the permissions of a file or directory. It uses numerical values to set read, write, and execute permissions for the owner, group, and others.\nExample:\n$ chmod 755 script.sh 12. chown (Change Owner/Group) Usage: chown \u003cuser\u003e:\u003cgroup\u003e \u003cfile\u003e\nExplanation: Changes the ownership of a file or directory. You can specify a user, a group, or both.\nExample:\n$ chown user:group file.txt 13. ps (Process Status) Usage: ps aux\nExplanation: Displays the current running processes on your system, showing information such as process ID (PID), memory and CPU usage.\nExample:\n$ ps aux 14. top (Task Manager) Usage: top\nExplanation: Displays a real-time, dynamic view of the systemâ€™s running processes, including memory, CPU usage, and more.\nExample:\n$ top 15. df (Disk Free) Usage: df -h\nExplanation: Displays the available disk space on all mounted filesystems. The -h option makes the output human-readable.\nExample:\n$ df -h 16. free (Memory Usage) Usage: free -h\nExplanation: Displays the amount of free and used memory in the system.\nExample:\n$ free -h 17. uname (System Information) Usage: uname -a\nExplanation: Displays the system information, including the kernel version, architecture, and other details.\nExample:\n$ uname -a 18. hostname (Get/Set Hostname) Usage: hostname\nExplanation: Displays or sets the systemâ€™s hostname.\nExample:\n$ hostname Architecture and File Structure on Rocky Linux 9 System Architecture Rocky Linux 9 supports x86_64 (64-bit) architecture by default. It also provides support for ARM-based systems. Rocky Linux 9 uses the Linux Kernel (typically version 5.14.x) and the systemd init system.\nPackage Manager: dnf (Dandified Yum) System Architecture: Primarily x86_64, also supports ARM and other architectures. File System Hierarchy The file structure in Rocky Linux 9 follows the Filesystem Hierarchy Standard (FHS), which is used across most Linux distributions. Hereâ€™s a breakdown of important directories:\n1. / (Root) The root directory is the top-most directory in the filesystem, from which all other directories branch out. 2. /bin (Essential Binaries) Contains essential command binaries required for the system to boot and run.\nExample: /bin/bash, /bin/ls\n3. /boot (Boot Loader Files) Contains files necessary for booting the system, including the kernel.\nExample: /boot/vmlinuz, /boot/grub2/\n4. /dev (Device Files) Contains device files that represent system hardware, such as hard drives, terminals, and USB devices.\nExample: /dev/sda, /dev/null\n5. /etc (Configuration Files) Stores system-wide configuration files for the system and applications.\nExample: /etc/passwd, /etc/hostname\n6. /home (User Home Directories) Contains the home directories for regular users.\nExample: /home/user1/\n7. /lib (Essential Libraries) Contains shared libraries required by binaries in /bin and /sbin.\nExample: /lib/libc.so.6\n8. /media (Mount Points for Removable Media) Used for mounting removable media like USB drives and CD-ROMs.\nExample: /media/usb/\n9. /mnt (Temporary Mount Points) Typically used for temporary mounts of file systems.\nExample: /mnt/data/\n10. /opt (Optional Software Packages) Contains third-party application software packages that are not part of the core distribution.\nExample: /opt/apache/\n11. /proc (Virtual Filesystem for Kernel Information) A virtual file system that exposes system information such as running processes and hardware configuration.\nExample: /proc/cpuinfo, /proc/meminfo\n12. /root (Root Userâ€™s Home) The home directory for the root user.\nExample: /root/\n13. /run (Runtime Information) Contains runtime data such as information about running processes, and other system state data.\nExample: /run/utmp\n14. /sbin (System Binaries) Contains system binaries used for administrative tasks, typically accessible only to the root user.\nExample: /sbin/reboot, /sbin/shutdown\n15. /tmp (Temporary Files) Used for storing temporary files created by the system or applications. Files in this directory are often deleted after reboot.\nExample: /tmp/tempfile\n16. /usr (User Programs and Data) Contains user applications and data. It is one of the largest directories on a system.\nExample: /usr/bin, /usr/lib\n17. /var (Variable Data) Contains variable files such as logs, spool files, and caches.\nExample: /var/log/, /var/spool/\nKey Configuration Files Network Configuration: /etc/sysconfig/network-scripts/ifcfg-eth0 System Users and Groups: /etc/passwd, /etc/group, /etc/shadow Package Management: /etc/dnf/dnf.conf Systemd Services: /etc/systemd/system/",
    "description": "Linux Basics Commands 1. pwd (Print Working Directory) Usage: pwd\nExplanation: This command prints the full path of the current working directory. It helps users confirm where they are in the directory structure.\nExample:\n$ pwd /home/user 2. ls (List) Usage: ls\nExplanation: Lists the files and directories within the current directory. By default, ls will not show hidden files (files starting with a dot). Use options like -l for detailed listing or -a for all files.",
    "tags": [],
    "title": "Day 02",
    "uri": "/part02/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Linux Permission Management Linux Disk Management",
    "description": "Linux Permission Management Linux Disk Management",
    "tags": [],
    "title": "Day 03",
    "uri": "/part03/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Linux Package Managemnt",
    "description": "Linux Package Managemnt",
    "tags": [],
    "title": "Day 04",
    "uri": "/part04/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Linux Performance Management",
    "description": "Linux Performance Management",
    "tags": [],
    "title": "Day 05",
    "uri": "/part05/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
