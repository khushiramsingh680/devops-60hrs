var relearn_searchindex = [
  {
    "breadcrumb": "",
    "content": "📦 Vagrant - Day 01 1. Introduction to Vagrant What is Vagrant? Vagrant is an open-source tool that allows you to build and manage virtualized development environments.\nBenefits of Using Vagrant\nReproducibility Isolation Simplified provisioning Use Cases\nDevOps automation Testing infrastructure Multi-VM environments 2. Installation Linux/Mac/Windows Step 1: Install VirtualBox\nhttps://www.virtualbox.org/wiki/Downloads\nStep 2: Install Vagrant\nhttps://www.vagrantup.com/downloads\nVerify Installation:\nvagrant --version Getting Started with Vagrant Vagrant boxes can be searched Here Create a Directory and get into the dir Create a Vagrantfile and initiate the box vagrant init generic/rhel8 --box-version 4.3.12 It will generate a file like given below: Vagrant.configure(\"2\") do |config| config.vm.box = \"generic/rhel8\" config.vm.box_version = \"4.3.12\" end Create a vm using this vagrantfile (Prerequisites, Virtualbox and vagrant ) vagrant up Now check the vm from Virtual box Also check the Network type and forwarding rule login using putty Warning: By Default any vm created with vagrant will have a user vagrant and password vagrant\nWarning: Password Authentication is not enabled in all other os except ubuntu.\nEnable SSH Password Authentication\nVagrant.configure(\"2\") do |config| config.vm.box = \"generic/rhel8\" config.vm.provision \"shell\", inline: \u003c\u003c-SHELL # Enable password authentication sudo sed -i 's/^#\\\\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config sudo sed -i 's/^#\\\\?UsePAM.*/UsePAM yes/' /etc/ssh/sshd_config # Restart SSH service sudo systemctl restart sshd SHELL end Run the below command vagrant up --provision Vagrantfile Basics Vagrant.configure(\"2\") do |config| config.vm.box = \"hashicorp/bionic64\" config.vm.network \"private_network\", type: \"dhcp\" config.vm.synced_folder \"./data\", \"/vagrant_data\" config.vm.provider \"virtualbox\" do |vb| vb.memory = \"1024\" vb.cpus = 2 end end Key Options: config.vm.box: Defines the base box Networking: private, public, and port forwarding Synced folders: sharing between host and guest Provisioning Methods:\nShell Scripts Ansible Puppet Chef Inline vs External:\nInline: Defined inside the Vagrantfile External: Separate script or playbook Example (inline shell provision):\nconfig.vm.provision \"shell\", inline: \u003c\u003c-SHELL apt-get update apt-get install -y nginx SHELL Basic Commands Command Description vagrant init Create a new Vagrantfile vagrant up Start the VM vagrant ssh SSH into the VM vagrant halt Stop the VM vagrant destroy Delete the VM vagrant status Check VM status vagrant box list List installed boxes vagrant box add Add a new box vagrant box remove Remove a box Synced Folders Default: /vagrant directory synced Custom Example: config.vm.synced_folder \"./local\", \"/vm_data\" 7. Networking Port Forwarding\nconfig.vm.network \"forwarded_port\", guest: 80, host: 8080 Private Network\nconfig.vm.network \"private_network\", ip: \"192.168.33.10\" Public Network\nconfig.vm.network \"public_network\" 8. Multi-Machine Environments Example:\nVagrant.configure(\"2\") do |config| config.vm.define \"web\" do |web| web.vm.box = \"ubuntu/bionic64\" end config.vm.define \"db\" do |db| db.vm.box = \"ubuntu/bionic64\" end end Use cases:\nWeb + DB setup HA/clustered configurations 9. Troubleshooting Networking Issues:\nCheck IP conflicts Restart networking service inside VM Provisioning Errors:\nVerify scripts and paths Use external shell script for debugging Debug Mode:\nvagrant up --debug 10. Best Practices Track Vagrantfile in version control Use .gitignore to exclude .vagrant/ Use small, optimized base boxes Clean up unused boxes: vagrant box prune Getting Started Quick Steps # Step 1: Initialize vagrant init bento/ubuntu-24.04 --box-version 202407.23.0 # Step 2: Start vagrant up # Step 3: SSH vagrant ssh # Step 4: Halt vagrant halt –reprovision Usage: vagrant up --provision Explanation: The --reprovision option is used with the vagrant up command to force the provisioning of the virtual machine, even if it has already been provisioned previously. This is useful if you want to apply changes to the provisioning scripts (such as updates or new configurations) without destroying and recreating the VM. Resources Vagrant Documentation Vagrant Boxes Example if you want to create multiple vms at the same time git clone https://gitlab.com/container-and-kubernetes/kubernetes-2024.git cd kubernetes-2024/two-vms vagrant up",
    "description": "📦 Vagrant - Day 01 1. Introduction to Vagrant What is Vagrant? Vagrant is an open-source tool that allows you to build and manage virtualized development environments.\nBenefits of Using Vagrant\nReproducibility Isolation Simplified provisioning Use Cases\nDevOps automation Testing infrastructure Multi-VM environments 2. Installation Linux/Mac/Windows Step 1: Install VirtualBox\nhttps://www.virtualbox.org/wiki/Downloads\nStep 2: Install Vagrant\nhttps://www.vagrantup.com/downloads\nVerify Installation:\nvagrant --version Getting Started with Vagrant Vagrant boxes can be searched Here Create a Directory and get into the dir Create a Vagrantfile and initiate the box vagrant init generic/rhel8 --box-version 4.3.12 It will generate a file like given below: Vagrant.configure(\"2\") do |config| config.vm.box = \"generic/rhel8\" config.vm.box_version = \"4.3.12\" end Create a vm using this vagrantfile (Prerequisites, Virtualbox and vagrant ) vagrant up Now check the vm from Virtual box",
    "tags": [],
    "title": "Vagrant: Day 01",
    "uri": "/part01/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Architecture and File Structure of Linux System Architecture RHEL Linux 9 supports x86_64 (64-bit) architecture by default. It also provides support for ARM-based systems. RHEL Linux 9 uses the Linux Kernel (typically version 5.14.x) and the systemd init system.\nPackage Manager: dnf (Dandified Yum) System Architecture: Primarily x86_64, also supports ARM and other architectures. File System Hierarchy The file structure in Rocky Linux 9 follows the Filesystem Hierarchy Standard (FHS), which is used across most Linux distributions. Here’s a breakdown of important directories:\n1. / (Root) The root directory is the top-most directory in the filesystem, from which all other directories branch out. 2. /bin (Essential Binaries) Contains essential command binaries required for the system to boot and run.\nExample: /bin/bash, /bin/ls\n3. /boot (Boot Loader Files) Contains files necessary for booting the system, including the kernel.\nExample: /boot/vmlinuz, /boot/grub2/\n4. /dev (Device Files) Contains device files that represent system hardware, such as hard drives, terminals, and USB devices.\nExample: /dev/sda, /dev/null\n5. /etc (Configuration Files) Stores system-wide configuration files for the system and applications.\nExample: /etc/passwd, /etc/hostname\n6. /home (User Home Directories) Contains the home directories for regular users.\nExample: /home/user1/\n7. /lib (Essential Libraries) Contains shared libraries required by binaries in /bin and /sbin.\nExample: /lib/libc.so.6\n8. /media (Mount Points for Removable Media) Used for mounting removable media like USB drives and CD-ROMs.\nExample: /media/usb/\n9. /mnt (Temporary Mount Points) Typically used for temporary mounts of file systems.\nExample: /mnt/data/\n10. /opt (Optional Software Packages) Contains third-party application software packages that are not part of the core distribution.\nExample: /opt/apache/\n11. /proc (Virtual Filesystem for Kernel Information) A virtual file system that exposes system information such as running processes and hardware configuration.\nExample: /proc/cpuinfo, /proc/meminfo\n12. /root (Root User’s Home) The home directory for the root user.\nExample: /root/\n13. /run (Runtime Information) Contains runtime data such as information about running processes, and other system state data.\nExample: /run/utmp\n14. /sbin (System Binaries) Contains system binaries used for administrative tasks, typically accessible only to the root user.\nExample: /sbin/reboot, /sbin/shutdown\n15. /tmp (Temporary Files) Used for storing temporary files created by the system or applications. Files in this directory are often deleted after reboot.\nExample: /tmp/tempfile\n16. /usr (User Programs and Data) Contains user applications and data. It is one of the largest directories on a system.\nExample: /usr/bin, /usr/lib\n17. /var (Variable Data) Contains variable files such as logs, spool files, and caches.\nExample: /var/log/, /var/spool/\nKey Configuration Files Network Configuration: /etc/sysconfig/network-scripts/ifcfg-eth0 System Users and Groups: /etc/passwd, /etc/group, /etc/shadow Package Management: /etc/dnf/dnf.conf Systemd Services: /etc/systemd/system/ 1. pwd (Print Working Directory) Usage: pwd\nExplanation: This command prints the full path of the current working directory. It helps users confirm where they are in the directory structure.\nExample:\n$ pwd /home/user 2. ls (List) Usage: ls\nExplanation: Lists the files and directories within the current directory. By default, ls will not show hidden files (files starting with a dot). Use options like -l for detailed listing or -a for all files.\nExample:\n$ ls -la total 28 drwxr-xr-x 4 user user 4096 May 10 10:45 . drwxr-xr-x 3 user user 4096 May 10 10:45 .. -rw-r--r-- 1 user user 45 May 10 10:45 file1.txt 3. cd (Change Directory) Usage: cd \u003cdirectory-path\u003e\nExplanation: This command allows you to change to a specified directory. If no argument is provided, it takes you to the user’s home directory.\nExample:\n$ cd /home/user/Documents 4. cp (Copy) Usage: cp \u003csource\u003e \u003cdestination\u003e\nExplanation: Copies files or directories from the source to the destination. You can use the -r option to copy directories recursively.\nExample:\n$ cp file1.txt /home/user/backup/ 5. mv (Move/Rename) Usage: mv \u003csource\u003e \u003cdestination\u003e\nExplanation: Moves or renames files and directories. It’s also used to move files between directories.\nExample:\n$ mv oldname.txt newname.txt 6. rm (Remove) Usage: rm \u003cfile\u003e\nExplanation: Removes a file. If you want to remove a directory, you must use the -r option for recursive removal.\nExample:\n$ rm -r directory_name 7. touch (Create Empty File) Usage: touch \u003cfile-name\u003e\nExplanation: Creates a new empty file if it doesn’t exist. If the file exists, touch updates its timestamp.\nExample:\n$ touch newfile.txt 8. cat (Concatenate and Display File) Usage: cat \u003cfile-name\u003e\nExplanation: Displays the contents of a file to the terminal. It can also be used to concatenate files together.\nExample:\n$ cat file1.txt 9. echo (Display Text) Usage: echo \u003ctext\u003e\nExplanation: Displays the text to the terminal or outputs it to a file.\nExample:\n$ echo \"Hello, World!\" 10. man (Manual Pages) Usage: man \u003ccommand\u003e\nExplanation: Displays the manual or help documentation for a command.\nExample:\n$ man ls 11. chmod (Change File Permissions) Usage: chmod \u003cpermissions\u003e \u003cfile\u003e\nExplanation: Changes the permissions of a file or directory. It uses numerical values to set read, write, and execute permissions for the owner, group, and others.\nExample:\n$ chmod 755 script.sh 12. chown (Change Owner/Group) Usage: chown \u003cuser\u003e:\u003cgroup\u003e \u003cfile\u003e\nExplanation: Changes the ownership of a file or directory. You can specify a user, a group, or both.\nExample:\n$ chown user:group file.txt 13. ps (Process Status) Usage: ps aux\nExplanation: Displays the current running processes on your system, showing information such as process ID (PID), memory and CPU usage.\nExample:\n$ ps aux 14. top (Task Manager) Usage: top\nExplanation: Displays a real-time, dynamic view of the system’s running processes, including memory, CPU usage, and more.\nExample:\n$ top 15. df (Disk Free) Usage: df -h\nExplanation: Displays the available disk space on all mounted filesystems. The -h option makes the output human-readable.\nExample:\n$ df -h 16. free (Memory Usage) Usage: free -h\nExplanation: Displays the amount of free and used memory in the system.\nExample:\n$ free -h 17. uname (System Information) Usage: uname -a\nExplanation: Displays the system information, including the kernel version, architecture, and other details.\nExample:\n$ uname -a 18. hostname (Get/Set Hostname) Usage: hostname\nExplanation: Displays or sets the system’s hostname.\nExample:\n$ hostname 🧪 Linux Command Line Practice Test 1. ✅ Check the hostname of the system Q: What command is used to check the hostname of the current system?\nhostname 2. 🕒 Check the current time of the system Q: Which command displays the system’s current date and time?\ndate 3. 🖥️ Change the hostname Q: What command would you use to change the system hostname to linuxlab?\nsudo hostnamectl set-hostname linuxlab 4. 📁 Directory navigation Q: Create a directory called practice, move into it, and list at least 3 cd commands to navigate.\nmkdir practice cd practice cd .. cd - cd ~ 5. 📄 Create and edit a file Q: How do you create a file called notes.txt, add content using cat, and then edit it using vi?\ntouch notes.txt cat \u003e notes.txt # (Type content and press Ctrl+D) vi notes.txt # (Press 'i' to insert, Esc to exit insert, ':wq' to save and exit) 6. 💾 Check available memory Q: Which command shows you memory usage in human-readable format?\nfree -h 7. 💽 Check disk and CPU info Q: How can you check the disk space and number of CPU cores?\ndf -h # Disk space nproc # Number of CPU cores lscpu # Detailed CPU info 8. 🗑️ Practice rm command Q: What is the difference between rm file.txt and rm -rvf dir/?\nrm file.txt removes a single file. rm -rvf dir/ forcefully and recursively removes the directory dir and all its contents without confirmation. 9. 📋 Practice cp command Q: Copy a.txt to b.txt, and recursively copy a folder dir1 to dir2.\ncp a.txt b.txt cp -rvf dir1/ dir2/ 10. 🔁 Move and rename files Q: How do you move temp.txt to /tmp and rename data.txt to archive.txt?\nmv temp.txt /tmp/ mv data.txt archive.txt 11. 📂 Check file systems Q: What command lists the file systems and their types?\ndf -T lsblk -f mount | column -t 🧪 Linux Command Line Practice Test (Relearn Theme) 1. ✅ Check the hostname of the system Q: What command is used to check the hostname of the current system? ```bash\rhostname\r``` 2. 🕒 Check the current time of the system Q: Which command displays the system’s current date and time? ```bash\rdate\r``` 3. ✏️ Change the hostname of the system Q: How do you change the hostname of a Linux system temporarily? ```bash\rsudo hostname new-hostname\r``` 4. 📁 Create a directory and practice cd commands Q: Which command is used to create a directory and then navigate into it? ```bash\rmkdir testdir \u0026\u0026 cd testdir\r``` 5. 📝 Create a file with touch, add contents using cat, and edit with vi Q: How do you create a file, add contents, and open it in vi editor? ```bash\rtouch file.txt\rcat \u003e file.txt\rvi file.txt\r``` 6. 📊 Check memory available Q: Which command shows the available memory on the system? ```bash\rfree -h\r``` 7. 💽 Check disk usage and number of CPUs Q: Which command shows disk usage and CPU count? ```bash\rdf -h\rnproc\r``` 8. 🗑️ Practice rm and rm -rvf Q: How do you remove a directory and all its contents forcefully and recursively? ```bash\rrm -rvf dir_name\r``` 9. 📄 Practice cp and cp -rvf Q: How do you copy a directory recursively and force overwrite? ```bash\rcp -rvf sourcedir targetdir\r``` 10. 📦 Test mv command Q: How do you move or rename a file using mv? ```bash\rmv oldname.txt newname.txt\r``` 11. 🗃️ Check different file systems available Q: Which command lists mounted filesystems? ```bash\rdf -T\r``` Lab @1 Login to a linux and enable password Authentication Check the root home directory Switch to a different user from root user Set the hostname persistently across reboot Reboot system Shut down vm Check for how long system is running ?",
    "description": "Architecture and File Structure of Linux System Architecture RHEL Linux 9 supports x86_64 (64-bit) architecture by default. It also provides support for ARM-based systems. RHEL Linux 9 uses the Linux Kernel (typically version 5.14.x) and the systemd init system.\nPackage Manager: dnf (Dandified Yum) System Architecture: Primarily x86_64, also supports ARM and other architectures. File System Hierarchy The file structure in Rocky Linux 9 follows the Filesystem Hierarchy Standard (FHS), which is used across most Linux distributions. Here’s a breakdown of important directories:",
    "tags": [],
    "title": "Linux Basics: Day 02",
    "uri": "/part02/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Topics Links in Linux Variable and Path Echo commands User Management Permission SSH keys Network Management Understanding Links in Linux In Linux, a link is a reference to a file or directory. It provides an additional path or name to access the same file or directory without duplicating the data. Links are used to organize files, create backups, and even provide shortcuts to files located elsewhere.\nTypes of Links in Linux Hard Links Symbolic (Soft) Links 1. Hard Links A hard link creates another directory entry for an existing file. Both the original file and the hard link point to the same inode (a data structure that holds the file’s metadata and data block pointers). Hard links cannot be created for directories (except for special directories like . and ..), and they do not work across different file systems.\nCharacteristics of Hard Links: Both the original file and the hard link share the same inode and data. Deleting the original file doesn’t delete the data, as the hard link still points to the same data. They cannot span file systems. Example Command to Create a Hard Link: ln /path/to/sourcefile /path/to/hardlinkfile 2. Symbolic (Soft) Links A symbolic link (symlink) is a special file that points to another file or directory. It stores the path to the original file and works as a shortcut or reference. Unlike hard links, symbolic links can span different file systems and can link to both files and directories.\nCharacteristics of Symbolic Links: A symlink contains a path to the original file. It works across different file systems. If the target file is deleted, the symlink becomes broken (dangling symlink). Useful for creating shortcuts or references to files in different locations. Example Command to Create a Symbolic Link: ln -s /path/to/sourcefile /path/to/symlinkfile Symbolic Link Example A symbolic link points to the original file or directory, and acts like a shortcut.\nln -s /home/user/document.txt /home/user/symlink_document.txt Hard Link Example A hard link points to the same data on the disk as the original file. Both the original file and the hard link are indistinguishable.\nln /home/user/document.txt /home/user/hardlink_document.txt Use Cases of Links 1. Hard Links Use Case: Backup or Duplication: When you need another entry point to a file without duplicating the data. Hard links are useful in backups and creating copies without taking additional storage space. 2. Symbolic Links Use Case: Shortcuts: To create a shortcut or reference to a file or directory in a different location. For example, creating a symlink to a configuration file in a different directory. Conclusion Both hard links and symbolic links have their uses. Hard links are ideal for pointing directly to data without duplicating it, while symbolic links are perfect for creating shortcuts or linking files across file systems.\necho Command in Linux The echo command is used to display a line of text or the value of a variable to the standard output (usually the terminal). It is commonly used in shell scripts for printing messages.\nSyntax: echo [OPTION] [STRING] Understanding Variables and Paths in Linux Variables in Linux A variable in Linux is a container used to store information that can be accessed and manipulated by commands or scripts. Variables are essential in shell scripting, as they allow for dynamic and flexible execution of commands.\nTypes of Variables: Environment Variables:\nThese variables are set globally and affect the behavior of the system or processes. They are usually set in the shell configuration files like .bashrc, .bash_profile, or .profile. Example: export PATH=\"/usr/local/bin:$PATH\" In this case, PATH is an environment variable that defines the directories where executable programs are located. Shell Variables:\nThese are variables set for use within the shell session or script and are not global. They can store strings, numbers, and the results of commands. Example: name=\"Alice\" echo \"Hello, $name\" Output: Hello, Alice Using Variables: Define a variable: variable_name=\"value\" Understanding the .env File in Linux A .env file is used to set environment variables for your system or application. These variables store configuration values, credentials, and other parameters that the system or application can reference during execution. Typically, .env files are used to define key-value pairs in a format that’s easy to manage, especially in development or deployment environments.\nPurpose of .env Files Storing Configuration:\n.env files are commonly used to store environment-specific configuration, such as API keys, database URLs, and other sensitive information. This keeps sensitive information out of your main application code and allows different configurations for different environments (e.g., development, testing, production). Loading Environment Variables:\nThe .env file allows for easy loading of variables into the environment at the start of a session, so they can be accessed by your shell or application. Format of a .env File A .env file typically consists of key-value pairs, where the key is the name of the variable and the value is its corresponding value. Each pair is separated by an equal sign (=).\nKEY=value Example of a .env File: DATABASE_URL=\"postgres://user:password@localhost/dbname\" API_KEY=\"your-api-key-here\" DEBUG=true PORT=3000 Key Rules for .env Files: No spaces around the = sign:\nValid: API_KEY=\"abc123\" Invalid: API_KEY = \"abc123\" # This will not work Comments:\nYou can add comments in a .env file by using the # symbol. Example: # This is a comment DEBUG=true Quoting Values:\nIf the value contains spaces or special characters, wrap it in double quotes (\"). Example: GREETING=\"Hello, World!\" Using .env Files in Applications In Node.js:\nYou can use the dotenv package to load variables from a .env file into your application. First, install dotenv: npm install dotenv Then, add this line at the beginning of your JavaScript code: require('dotenv').config(); console.log(process.env.DATABASE_URL); In Bash:\nYou can load a .env file using the source or . command: source .env or . .env After sourcing, the variables defined in the .env file will be available in the shell session. Best Practices for .env Files: Don’t Commit .env Files to Version Control:\nSince .env files may contain sensitive information like passwords or API keys, it’s important not to commit them to version control (e.g., Git). Instead, add .env to your .gitignore file: # .gitignore .env Use Different .env Files for Different Environments:\nIt’s a common practice to have different .env files for different environments, such as: .env.development for development .env.production for production This allows you to easily switch between configurations by specifying the appropriate .env file. Security Considerations:\nStore sensitive information (like passwords) securely, and use tools like vault or cloud secrets management services in production environments. Conclusion The .env file is a convenient way to manage environment variables in Linux and other operating systems. It helps keep sensitive data like API keys, database URLs, and configuration settings separate from application code. By following best practices, you can ensure that .env files are used securely and effectively in both development and production environments.\nUser Management in Rocky Linux 9 Overview User management in Linux involves creating, modifying, and deleting user accounts, as well as assigning user privileges and managing groups. In Rocky Linux 9, user management is done via command-line tools like useradd, usermod, userdel, and groupadd.\n1. useradd (Create a New User) Usage: useradd \u003cusername\u003e\nExplanation: The useradd command is used to create a new user account. The command creates the user’s home directory and sets up default user configuration files.\nExample:\n$ sudo useradd -m john -m: Creates the home directory for the user. 2. usermod (Modify User Account) Usage: usermod [options] \u003cusername\u003e\nExplanation: The usermod command modifies an existing user account. You can change user details like the home directory, username, user ID, group membership, etc.\nExamples:\nChange user’s home directory:\n$ sudo usermod -d /home/john_doe john Add a user to a group:\n$ sudo usermod -aG sudo john -aG: Adds the user to the specified group without removing them from other groups. 3. userdel (Delete a User Account) Usage: userdel [options] \u003cusername\u003e\nExplanation: The userdel command removes a user account from the system. It can also remove the user’s home directory and mail spool if specified.\nExample:\n$ sudo userdel -r john -r: Removes the user’s home directory and mail spool along with the user. 4. passwd (Change User Password) Usage: passwd \u003cusername\u003e\nExplanation: The passwd command is used to change a user’s password. If no username is specified, it changes the current user’s password.\nExample:\n$ sudo passwd john Prompts you to enter a new password for the user john. 5. groupadd (Create a Group) Usage: groupadd \u003cgroupname\u003e\nExplanation: The groupadd command creates a new group on the system.\nExample:\n$ sudo groupadd developers 6. groupdel (Delete a Group) Usage: groupdel \u003cgroupname\u003e\nExplanation: The groupdel command deletes a specified group from the system. Note that it does not remove users assigned to the group.\nExample:\n$ sudo groupdel developers 7. gpasswd (Administer Group Passwords) Usage: gpasswd \u003cgroupname\u003e\nExplanation: This command is used to administer group passwords. It allows you to assign a password to a group, which can be used for privileged group access.\nExample:\n$ sudo gpasswd developers 8. id (Display User and Group Information) Usage: id \u003cusername\u003e\nExplanation: The id command displays the user’s UID (User ID), GID (Group ID), and group memberships.\nExample:\n$ id john Displays information such as: uid=1001(john) gid=1001(john) groups=1001(john),10(wheel) 9. groups (Display Group Memberships) Usage: groups \u003cusername\u003e\nExplanation: The groups command shows the groups to which a user belongs.\nExample:\n$ groups john Output might be: john : john wheel 10. chown (Change Ownership of Files/Directories) Usage: chown [options] \u003cuser\u003e:\u003cgroup\u003e \u003cfile\u003e\nExplanation: The chown command is used to change the ownership of a file or directory. It can be used to assign files to a user and a group.\nExample:\n$ sudo chown john:developers /home/john/file.txt 11. chgrp (Change Group Ownership of Files/Directories) Usage: chgrp \u003cgroupname\u003e \u003cfile\u003e\nExplanation: The chgrp command changes the group ownership of a file or directory.\nExample:\n$ sudo chgrp developers /home/john/file.txt 12. whoami (Current User) Usage: whoami\nExplanation: Displays the username of the current user.\nExample:\n$ whoami john 13. w (Who Is Logged In) Usage: w\nExplanation: Displays who is logged in and what they are doing.\nExample:\n$ w Example output: 11:42:43 up 4 days, 3:34, 2 users, load average: 0.00, 0.01, 0.05\rUSER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT\rjohn pts/0 :0 09:23 3.00s 0.01s 0.01s w 14. last (Display Last Logins) Usage: last\nExplanation: Displays the login history for users, showing when and where users last logged in.\nExample:\n$ last 15. su (Switch User) Usage: su - \u003cusername\u003e\nExplanation: The su (substitute user) command allows you to switch to another user account. If no username is provided, it defaults to the root user.\nExample:\n$ su - john Switches to the john user account. 16 SSH private and public key 🔐 SSH Key Authentication in RHEL 8 SSH key-based authentication is a secure and convenient method for logging into remote systems without using passwords.\n📂 SSH Key Pair Basics Public Key (id_rsa.pub): Shared with the remote server. Private Key (id_rsa): Kept secure and private on the client. 🔒 Never share your private key.\n🛠️ Generate SSH Key Pair ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" Copy Public Key to Remote Server ssh-copy-id user@remote-server Login with ssh key ssh user@remote-server Permissions on Remote Server for a specific user sudo chown -R john:john /home/john/.ssh chmod 700 /home/john/.ssh chmod 600 /home/john/.ssh/authorized_keys 16. sudo (Execute a Command as Another User) Usage: sudo \u003ccommand\u003e\nExplanation: The sudo command allows users to execute commands with elevated privileges, typically as the root user. Users need to be part of the sudoers group to use sudo.\nExample:\n$ sudo apt update 17. /etc/passwd (User Account Information) Explanation: This file contains basic information about all user accounts on the system, including their username, UID, GID, home directory, and login shell.\nExample:\n$ cat /etc/passwd Example entry: john:x:1001:1001:John Doe:/home/john:/bin/bash 18. /etc/shadow (User Password Information) Explanation: This file stores user password information in an encrypted format. Only privileged users (like root) can read this file.\nExample:\n$ cat /etc/shadow Example entry: john:$6$8DF....:18011:0:99999:7::: Linux Permission Management In Linux, file and directory permissions define who can read, write, or execute a file. These permissions are crucial for system security and multi-user environments.\n🧱 Basic Concepts Every file/directory has:\nOwner: User who owns the file Group: Group associated with the file Others: Everyone else Permission Types Symbol Meaning Applies to r Read File: view contentDirectory: list files w Write File: modify contentDirectory: add/remove files x Execute File: run as a programDirectory: enter directory 🔍 Viewing Permissions Use ls -l:\n$ ls -l file.txt -rw-r--r-- 1 user group 1024 May 7 12:00 file.txt 2. Numeric (Octal) Mode Octal Binary Meaning 7 111 rwx 6 110 rw- 5 101 r-x 4 100 r– 0 000 — 🔍 What are Permissions in Linux? Linux is a multi-user operating system. Every file or directory is associated with access permissions for:\nUser (u) – the owner Group (g) – users in the same group Others (o) – all other users Each can have three types of permissions:\nSymbol Permission File Meaning Directory Meaning r Read View contents List files w Write Modify contents Add/remove files x Execute Run as program Enter (cd) the folder 👁️ Viewing Permissions Use ls -l to view permissions:\n$ ls -l file.txt -rw-r--r-- 1 user group 1024 May 7 12:00 file.txt Breakdown:\n- → file type (d for directory) rw- → user can read/write r-- → group can read r-- → others can read ✏️ Changing Permissions with chmod You can change permissions in two ways:\n1. Symbolic Mode chmod u+x script.sh # Add execute for user chmod g-w file.txt # Remove write for group chmod o=r file.txt # Set read-only for others chmod a+x deploy.sh # Add execute for all (user, group, others) 2. Numeric (Octal) Mode Octal Binary Permission 7 111 rwx 6 110 rw- 5 101 r-x 4 100 r– 0 000 — Examples:\nchmod 755 script.sh # rwxr-xr-x chmod 644 file.txt # rw-r--r-- Recursive Change chmod -R 755 /path/to/dir 🔐 Special Permissions Linux supports special permissions for advanced access control.\n1. Setuid (Set User ID) When set on an executable, the process runs as the file owner. Represented by s in the user field (rws). chmod u+s /usr/bin/somebinary 2. Setgid (Set Group ID) On files: Process runs with the file’s group. On directories: New files inherit the directory’s group. Represented by s in the group field (rwxr-sr-x). chmod g+s /shared/folder 3. Sticky Bit Commonly used on shared directories like /tmp. Only the file’s owner can delete it. Represented by t in the others field (rwxrwxrwt). chmod +t /shared/folder 🧪 Special Permissions with Octal chmod 1755 file.sh # Sticky bit + rwxr-xr-x chmod 2755 file.sh # Setgid + rwxr-sr-x chmod 4755 file.sh # Setuid + rwsr-xr-x View them with ls -l:\ns in user/group field: Setuid/Setgid t in others field: Sticky bit 📘 Summary Use ls -l to view permissions Use chmod (symbolic or octal) to modify them Use chown to change file ownership Use chmod u+s, g+s, or +t to set special permissions Mastering Linux permissions helps enforce security, especially in multi-user environments.\n🌐 RHEL 8 Networking Overview Red Hat Enterprise Linux 8 introduces several modern tools and practices for network configuration and management. It replaces legacy networking services like network and ifconfig with NetworkManager and nmcli.\n🧰 Key Tools Tool Purpose nmcli CLI to control NetworkManager nmtui Text-based UI for NetworkManager ip Show/manipulate routing, devices, IPs ss Display socket statistics (replaces netstat) firewalld Manage firewall dynamically nmstatectl Declarative network management (advanced) 📁 Network Configuration Files File/Directory Purpose /etc/NetworkManager/ Main NetworkManager configs /etc/sysconfig/network-scripts/ Legacy ifcfg-* files (still used) /etc/resolv.conf DNS resolution /etc/hosts Static hostname-IP mapping /etc/hostname Sets the system hostname 🖧 Common Networking Commands 🔎 View Network Interfaces ip a nmcli device status Bring Interface Up/Down nmcli device disconnect ens33 nmcli device connect ens33 Set Static Ip address nmcli con add type ethernet con-name static-ens33 ifname ens33 ipv4.addresses 192.168.1.100/24 \\ ipv4.gateway 192.168.1.1 ipv4.dns \"8.8.8.8\" ipv4.method manual Restart Networking nmcli networking off nmcli networking on # or restart NetworkManager service systemctl restart NetworkManager",
    "description": "Topics Links in Linux Variable and Path Echo commands User Management Permission SSH keys Network Management Understanding Links in Linux In Linux, a link is a reference to a file or directory. It provides an additional path or name to access the same file or directory without duplicating the data. Links are used to organize files, create backups, and even provide shortcuts to files located elsewhere.\nTypes of Links in Linux Hard Links Symbolic (Soft) Links 1. Hard Links A hard link creates another directory entry for an existing file. Both the original file and the hard link point to the same inode (a data structure that holds the file’s metadata and data block pointers). Hard links cannot be created for directories (except for special directories like . and ..), and they do not work across different file systems.",
    "tags": [],
    "title": "User, Group and Permissions: Day 03",
    "uri": "/part03/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Topics Recap Checking Exisitng disk Partiotion a Disk Mounting a disk after format Introduction to LVM Swap Partition Loging Overview Recap Umask usage( to control the default permission)\nLog into the Vagrant virtual machine using the default SSH private key.\n.vagrant/machines/\u003cmachine-name\u003e/\u003cprovider\u003e/private_key ssh -i \u003cprivatekey\u003e \u003cuser-name\u003e/ip Convert the private key .pem file into ppk to login with putty.\nLogin to 3rd server but private key is on 1st server\n🔐 SSH into a Third Server When Private Key Is on First Server (Using Agent Forwarding) 🧭 Scenario You want to SSH into Server C from Server A, but the SSH private key is only on your local machine (Laptop). You don’t want to copy the key to Server A for security reasons.\n✅ Solution: SSH Agent Forwarding This allows you to forward your SSH key securely from your Laptop → Server A → Server C without ever copying the private key.\n📝 Steps Start SSH Agent on Your Local Machine eval \"$(ssh-agent -s)\" ssh-add /path/to/your/private_key Check loaded keys: ssh-add -l SSH into Server A with Agent Forwarding Enabled ssh -A user@serverA From Server A, SSH into Server C ssh user@serverC Test the port forward on Virtualbox\nTest the port forward on Putty\n📂 1. Listing Disks and Partitions View all block devices: lsblk Show detailed partition table: fdisk -l View disk usage: df -h View inode usage: df -i 🧱 2. Partitioning Disks Using fdisk (for MBR-style partitions): sudo fdisk /dev/sdX # n -\u003e new partition # p -\u003e primary # w -\u003e write changes 🛠️ 3. Creating Filesystems Create ext4 filesystem: sudo mkfs.ext4 /dev/sdX1 Create xfs filesystem: sudo mkfs.xfs /dev/sdX1 📦 4. Mounting and Unmounting Disks Create a mount point and mount: sudo mkdir /mnt/data sudo mount /dev/sdX1 /mnt/data Unmount: sudo umount /mnt/data View mounted filesystems: mount | grep sd 🔁 5. Persistent Mounting with /etc/fstab Get UUID: blkid /dev/sdX1 Edit /etc/fstab: UUID=xxxx-xxxx /mnt/data ext4 defaults 0 2 Then run:\nsudo mount -a # To verify fstab is valid 🔍 6. Disk Usage Analysis Using du: du -sh /home/user Using ncdu (interactive tool): sudo apt install ncdu # or yum install ncdu ncdu / 🔒 7. Checking \u0026 Repairing Filesystems ext4 check: sudo fsck /dev/sdX1 Must unmount first or run in recovery mode.\n🔒 Introduction to LVM (Logical Volume Management) LVM (Logical Volume Management) is a flexible and advanced way to manage disk storage in Linux. It allows you to create, resize, and manage storage volumes dynamically, as opposed to traditional partitioning. LVM abstracts the storage devices, giving you more control and flexibility over disk management.\nKey Concepts: Physical Volumes (PV): These are the actual hard drives or partitions that are initialized for use by LVM. A physical volume can be any storage device, such as a disk or a partition. Volume Groups (VG): A volume group is a collection of physical volumes. It pools storage from the physical volumes, making it easier to allocate storage dynamically. Logical Volumes (LV): Logical volumes are created within volume groups. These are the virtual storage units that users can use like a regular partition or disk, where file systems are created and data is stored. Advantages of LVM: Dynamic Volume Resizing: Easily resize logical volumes and file systems without data loss. Snapshots: Create backups of volumes at any point in time. Better Disk Utilization: You can combine multiple physical disks into a single volume group for better utilization and flexibility. Striping and Mirroring: LVM supports RAID-like features such as striping (for performance) and mirroring (for redundancy). Now that we have a basic understanding of LVM, let’s look at some common LVM commands used to manage storage volumes.\nInstall LVM if commands are not available yum install lvm2 🔒 LVM Commands 1️⃣ List Physical Volumes (PV) pvs This command lists all physical volumes in the system, showing basic information about each PV.\n2️⃣ Display Detailed Information about a Physical Volume pvdisplay /dev/sda Displays detailed information about a specific physical volume.\n3️⃣ Create a Physical Volume pvcreate /dev/sda Initialize a physical volume on a device (e.g., /dev/sda), so it can be added to a volume group.\n4️⃣ Extend a Physical Volume pvresize /dev/sda Resize a physical volume, which is useful if you’ve expanded the underlying disk.\n5️⃣ List Volume Groups (VG) vgs Shows a list of all volume groups in the system.\n6️⃣ Display Detailed Information about a Volume Group vgdisplay vg_name Displays detailed information about a specific volume group, including the total size, free space, and more.\n7️⃣ Create a Volume Group vgcreate vg_name /dev/sda /dev/sdb Creates a new volume group by adding physical volumes (e.g., /dev/sda and /dev/sdb) to the group.\n8️⃣ Extend a Volume Group by Adding More Physical Volumes vgextend vg_name /dev/sdc Adds a new physical volume to an existing volume group to increase its available storage.\n9️⃣ Reduce the Size of a Volume Group vgreduce vg_name /dev/sdb Removes a physical volume from a volume group.\n🔟 Create a Logical Volume (LV) lvcreate -n lv_name -L 10G vg_name Create a new logical volume named lv_name with a size of 10GB in the specified volume group vg_name.\n1️⃣1️⃣ Display Information about Logical Volumes lvdisplay /dev/vg_name/lv_name Shows detailed information about a specific logical volume.\n1️⃣2️⃣ Extend a Logical Volume lvextend -L +10G /dev/vg_name/lv_name Extend a logical volume by 10GB.\n1️⃣3️⃣ Resize a Logical Volume (after extending) resize2fs /dev/vg_name/lv_name Resize the file system on a logical volume after it has been extended.\n1️⃣4️⃣ Remove a Logical Volume lvremove /dev/vg_name/lv_name Removes a specified logical volume.\n1️⃣5️⃣ Remove a Volume Group vgremove vg_name Removes a specified volume group.\n1️⃣6️⃣ Remove a Physical Volume pvremove /dev/sda Removes a physical volume, typically after removing it from the volume group.\n1️⃣7️⃣ List All Available LVM Commands lvm Launches the interactive LVM command-line interface.\n1️⃣8️⃣ Display LVM System Information lvm pvscan Scans for physical volumes and shows details about their status.\n2️⃣0️⃣ Activate a Volume Group vgchange -ay vg_name Activates the specified volume group, making it available for use.\n2️⃣1️⃣ Deactivate a Volume Group vgchange -an vg_name Deactivates a volume group, making it unavailable for use.\n🔒 Swap Partitions in Linux A swap partition is used by Linux to extend the available memory by using disk space. When the physical RAM is full, the system moves some of the inactive pages in RAM to swap space. It helps prevent the system from running out of memory and crashing. Swap partitions are particularly useful on systems with limited physical memory (RAM) or for systems running memory-intensive applications.\nKey Points About Swap: Swap Partition: A dedicated disk partition used specifically for swap space. Swap File: A regular file on an existing file system used to create swap space. Swapiness: A kernel parameter that determines how aggressively the kernel will use swap space. A value of 0 means the system will avoid swapping, and a value of 100 means the system will swap aggressively. Performance Impact: Swap space is much slower than physical RAM, so it’s crucial not to rely too much on it. Excessive swapping (swapping too often) can slow down system performance. Swap Space Advantages: Prevents Out of Memory Errors: Swap provides a backup when the system runs out of RAM. Improved System Stability: Helps prevent crashes due to memory exhaustion. Memory Management: Allows Linux to keep rarely used parts of memory in swap and free up physical RAM for active processes. 🔒 Commands Related to Swap Partitions 1️⃣ Check Current Swap Usage swapon -s This command displays a summary of the current swap space in use on the system.\n2️⃣ Show Swap Information free -h Displays the memory and swap usage in a human-readable format, including total, used, and available swap space.\n3️⃣ Create a Swap Partition fdisk /dev/sda You can use fdisk to create a swap partition on a disk. This will involve creating a new partition and changing its type to swap.\nIn fdisk, select the disk and choose the n option to create a new partition. Then, use the t command to change the partition type to 82 (Linux swap). 4️⃣ Format a Partition as Swap mkswap /dev/sda3 Formats a partition (/dev/sda3 in this case) as swap space.\n5️⃣ Enable the Swap Partition swapon /dev/sda3 Activates the swap partition (/dev/sda3) for use by the system.\n6️⃣ Disable a Swap Partition swapoff /dev/sda3 Disables a swap partition, freeing up the space for other uses.\n7️⃣ Check Swap Usage (Detailed) cat /proc/meminfo | grep Swap Shows detailed information about swap space usage from the system’s memory information.\n8️⃣ Add Swap Space Permanently to /etc/fstab echo '/dev/sda3 none swap sw 0 0' | sudo tee -a /etc/fstab This command adds the swap partition (/dev/sda3) to /etc/fstab so that it is automatically enabled at boot time.\n9️⃣ Create a Swap File dd if=/dev/zero of=/swapfile bs=1M count=4096 This command creates a swap file (/swapfile) of 4GB (4096 MB).\n🔟 Change Permissions on the Swap File chmod 600 /swapfile Sets the appropriate permissions for the swap file to ensure that only root can access it.\n1️⃣1️⃣ Make the Swap File mkswap /swapfile Formats the swap file (/swapfile) to make it usable as swap space.\n1️⃣2️⃣ Activate the Swap File swapon /swapfile Enables the swap file (/swapfile) for use.\n1️⃣3️⃣ Remove the Swap File swapoff /swapfile rm /swapfile Disables and removes the swap file from the system.\n1️⃣4️⃣ Show the Current Swappiness Setting cat /proc/sys/vm/swappiness Displays the current swappiness value, which controls how often swap space is used.\n1️⃣5️⃣ Set the Swappiness Value sysctl vm.swappiness=10 Sets the swappiness value to 10 (lower means less aggressive swapping).\n1️⃣6️⃣ Make Swappiness Value Persistent echo \"vm.swappiness = 10\" | sudo tee -a /etc/sysctl.conf Adds the swappiness setting to /etc/sysctl.conf for persistence across reboots.\n🔒 Conclusion on Swap Swap partitions and swap files are essential for managing memory on Linux systems, especially when running applications that consume a lot of memory. However, it’s important to monitor swap usage to avoid performance degradation due to excessive swapping. It’s best to have enough physical RAM to reduce reliance on swap space.\n📘 Summary lsblk, fdisk -l, df -h – View disk info fdisk, parted – Create partitions mkfs.ext4, mkfs.xfs – Format partitions mount, umount, fstab – Manage mounts fsck – Repair filesystems Linux disk management is critical for system setup, storage provisioning, and data integrity.\n🧾 RHEL OS Logging Overview RHEL 8 uses systemd-journald for system logs and rsyslog for traditional log file storage. Understanding both is essential for troubleshooting and auditing.\n📒 Systemd Journal Logs (journald) 🔍 View Logs Show all logs journalctl Show logs for a specific service journalctl -u sshd Follow logs in real time journalctl -f Show logs since boot journalctl -b Show logs from today journalctl --since today Show logs between time ranges journalctl --since \"2024-07-01\" --until \"2024-07-10\"",
    "description": "Topics Recap Checking Exisitng disk Partiotion a Disk Mounting a disk after format Introduction to LVM Swap Partition Loging Overview Recap Umask usage( to control the default permission)\nLog into the Vagrant virtual machine using the default SSH private key.\n.vagrant/machines/\u003cmachine-name\u003e/\u003cprovider\u003e/private_key ssh -i \u003cprivatekey\u003e \u003cuser-name\u003e/ip Convert the private key .pem file into ppk to login with putty.\nLogin to 3rd server but private key is on 1st server",
    "tags": [],
    "title": "Linux Disk Management: Day 04",
    "uri": "/part04/index.html"
  },
  {
    "breadcrumb": "",
    "content": "📦 What is Package Management? Linux uses package managers to install, update, and remove software efficiently while resolving dependencies.\n🧰 1. Debian/Ubuntu: apt (Advanced Package Tool) Update package list: sudo apt update Upgrade packages: sudo apt upgrade Install a package: sudo apt install package-name Remove a package: sudo apt remove package-name Remove unused packages: sudo apt autoremove Search for a package: apt search nginx 🍱 2. RHEL/CentOS/Rocky: yum and dnf On RHEL 8+ and Fedora, use dnf instead of yum.\nUpdate repository cache: sudo dnf makecache Install a package: sudo dnf install httpd Remove a package: sudo dnf remove httpd List installed packages: dnf list installed Search packages: dnf search nginx 📁 3. Using rpm Directly Install from .rpm file: sudo rpm -ivh package.rpm Upgrade an RPM: sudo rpm -Uvh package.rpm Remove an RPM: sudo rpm -e package-name Query installed RPMs: rpm -qa | grep nginx 🧊 4. openSUSE: zypper Install a package: sudo zypper install vim Remove a package: sudo zypper remove vim Update system: sudo zypper update Search: zypper search nginx 📜 5. Package Information Show detailed package info: APT:\napt show curl DNF:\ndnf info curl RPM:\nrpm -qi curl 🗃️ 6. Cleaning Up APT:\nsudo apt clean sudo apt autoremove DNF/YUM:\nsudo dnf clean all 🛡️ 7. GPG Keys and Repositories Add a GPG key (APT): wget -qO - https://example.com/key.gpg | sudo apt-key add - Add a custom repo (YUM/DNF): Create file in /etc/yum.repos.d/custom.repo:\n[custom-repo] name=Custom Repository baseurl=http://example.com/repo/ enabled=1 gpgcheck=0 ✅ Summary Tool Distros Command Examples APT Debian, Ubuntu apt install, apt update, apt remove YUM RHEL 7, CentOS 7 yum install, yum update, yum remove DNF RHEL 8+, Fedora dnf install, dnf upgrade, dnf clean RPM All RPM-based distros rpm -ivh, rpm -e, rpm -qa Zypper openSUSE zypper install, zypper remove, update Linux package management ensures reliable and secure software deployment.\n🛠️ How to Create a Local YUM Repository Using an ISO This guide explains how to set up a local YUM repository from an ISO file on RHEL, CentOS, AlmaLinux, or Rocky Linux.\n📥 1. Mount the ISO File mkdir -p /mnt/iso mount -o loop /dev/sr0 /mnt/iso 📂 2. Copy ISO Contents (Optional but Recommended) mkdir -p /var/www/html/yumrepo cp -av /mnt/iso/* /var/www/html/yumrepo/ umount /mnt/iso This step ensures the repository is persistent across reboots.\n📝 3. Create the Local Repo File Create a new file /etc/yum.repos.d/local.repo with the following content:\n✅ If you copied the ISO contents: [LocalRepo] name=Local Repository baseurl=file:///var/www/html/yumrepo enabled=1 gpgcheck=0 🔁 If using the ISO directly (without copying): [LocalRepo] name=Local Repository baseurl=file:///mnt/iso enabled=1 gpgcheck=0 Example is given below: 🔄 4. Clean YUM and Check the Repository yum clean all yum repolist You should now see LocalRepo listed in the repository list.\n🌐 5. (Optional) Serve the Repo via HTTP This is useful if you want to share the repo with other machines.\nInstall Apache: yum install -y httpd systemctl enable --now httpd Allow Apache Access with SELinux (if enabled): chcon -R -t httpd_sys_content_t /var/www/html/yumrepo Update the Repo File: Edit /etc/yum.repos.d/local.repo to use HTTP:\n[LocalRepo] name=Local Repository baseurl=http://localhost/yumrepo enabled=1 gpgcheck=0 ✅ Done! You now have a local YUM repository set up using an ISO image. You can use it offline, or serve it to multiple machines via HTTP.\n📊 Linux Monitoring Monitoring Linux is critical for performance tuning, capacity planning, and troubleshooting. Below are essential CLI tools for real-time and historical system monitoring.\n🧠 1. CPU and Memory Monitoring top — real-time system performance top Press M to sort by memory. Press P to sort by CPU usage. htop — enhanced top (colorful UI) htop Install via: sudo apt install htop or sudo dnf install htop\nvmstat — memory, processes, and system info vmstat 1 5 1 5: sample every second for 5 times free — memory usage free -h 💿 2. Disk Monitoring df — disk space usage df -h du — directory size du -sh /var/log iostat — CPU and I/O stats iostat -xz 1 3 Install via: sudo apt install sysstat or sudo dnf install sysstat\n🌐 3. Network Monitoring ip a or ifconfig — IP addresses ip a ss — socket statistics (replacement for netstat) ss -tuln -tuln: TCP/UDP listening sockets without resolving names netstat — old but useful netstat -plntu Might require net-tools package.\nnload — network bandwidth usage nload Install: sudo apt install nload or sudo dnf install nload\n📈 4. System Activity Reports sar — historical performance stats sar -u 1 3 Collects CPU usage every 1 second, 3 times.\nEnable sar: sudo systemctl enable sysstat sudo systemctl start sysstat 🔍 5. Process \u0026 Service Monitoring ps — process status ps aux | grep nginx pidstat — individual process usage pidstat -p \u003cPID\u003e systemctl — service status systemctl status nginx 🧪 6. Other Useful Tools Tool Description Install Command iotop Show I/O usage per process sudo apt install iotop glances All-in-one monitoring dashboard sudo apt install glances atop Advanced top-like monitor sudo apt install atop dstat Realtime resource monitor sudo apt install dstat ✅ Summary Table Resource Command Notes CPU top, htop, sar Real-time and historical usage Memory free, vmstat RAM and swap Disk df, du, iostat Disk space and I/O Network ss, netstat, nload Connections \u0026 bandwidth Processes ps, pidstat Process info and PID usage Services systemctl Service status 🔁 Automating Monitoring Reports You can use cron to schedule logs and save stats:\n*/5 * * * * sar -u 1 5 \u003e\u003e /var/log/cpu_usage.log Linux monitoring is essential to keep your systems healthy and responsive. Regular usage of these tools helps you stay ahead of issues before they impact users.",
    "description": "📦 What is Package Management? Linux uses package managers to install, update, and remove software efficiently while resolving dependencies.\n🧰 1. Debian/Ubuntu: apt (Advanced Package Tool) Update package list: sudo apt update Upgrade packages: sudo apt upgrade Install a package: sudo apt install package-name Remove a package: sudo apt remove package-name Remove unused packages: sudo apt autoremove Search for a package: apt search nginx 🍱 2. RHEL/CentOS/Rocky: yum and dnf On RHEL 8+ and Fedora, use dnf instead of yum.",
    "tags": [],
    "title": "Linux Package Management: Day 05",
    "uri": "/part05/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Kubernetes Security Practice Questions with Answers (CKS) 1. ImagePolicyWebhook Objective: Ensure all images are verified via an external webhook.\nSteps:\nCreate the configuration file /etc/kubernetes/confcontrol/webhook-config.yaml: apiVersion: apiserver.config.k8s.io/v1 kind: AdmissionConfiguration plugins: - name: ImagePolicyWebhook configuration: imagePolicy: kubeConfigFile: /etc/kubernetes/confcontrol/image-webhook-config.yaml allowTTL: 30 denyTTL: 30 retryBackoff: 500 defaultAllow: false Create the webhook kubeconfig at /etc/kubernetes/confcontrol/image-webhook-config.yaml: apiVersion: v1 kind: Config clusters: - name: image-policy cluster: server: https://webhook.kplabs.internal certificate-authority: /etc/kubernetes/pki/ca.crt users: - name: image-policy user: client-certificate: /etc/kubernetes/pki/apiserver.crt client-key: /etc/kubernetes/pki/apiserver.key contexts: - name: image-policy context: cluster: image-policy user: image-policy current-context: image-policy Modify kube-apiserver manifest to include: --admission-control-config-file=/etc/kubernetes/confcontrol/webhook-config.yaml --enable-admission-plugins=ImagePolicyWebhook Create a pod to verify: kubectl run nginx --image=nginx If the pod fails, get error log: journalctl -u kubelet \u003e /tmp/error.log 2. AppArmor Objective: Load and enforce an AppArmor profile.\nSteps:\nDownload and load the profile: wget https://raw.githubusercontent.com/zealvora/myrepo/master/cks/apparmor-profile -P /etc/apparmor.d apparmor_parser -r /etc/apparmor.d/apparmor-profile Create a deployment using AppArmor: apiVersion: apps/v1 kind: Deployment metadata: name: pod-deploy spec: replicas: 2 selector: matchLabels: app: busybox template: metadata: labels: app: busybox annotations: container.apparmor.security.beta.kubernetes.io/busybox-container: localhost/apparmor-profile spec: containers: - name: busybox-container image: busybox command: [\"sleep\", \"36000\"] 3. Auditing Objective: Configure audit policy with different log levels.\nSteps:\nCreate /etc/kubernetes/audit-policy.yaml: apiVersion: audit.k8s.io/v1 kind: Policy rules: - level: Metadata resources: - group: \"\" resources: [\"pods\"] Edit kube-apiserver manifest: --audit-policy-file=/etc/kubernetes/audit-policy.yaml --audit-log-path=/var/log/kubernetes/kube-apiserver-audit.log 4. PodSecurityPolicy (PSP) (Note: Deprecated in newer Kubernetes versions) Objective: Create a PSP that denies privilege escalation.\nSteps:\nCreate the PSP: apiVersion: policy/v1beta1 kind: PodSecurityPolicy metadata: name: restricted spec: privileged: false allowPrivilegeEscalation: false requiredDropCapabilities: - ALL volumes: - '*' runAsUser: rule: 'MustRunAsNonRoot' seLinux: rule: 'RunAsAny' fsGroup: rule: 'RunAsAny' supplementalGroups: rule: 'RunAsAny' Create ClusterRole and bind it: apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: psp:restricted rules: - apiGroups: - policy resourceNames: - restricted resources: - podsecuritypolicies verbs: - use --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: psp:restricted namespace: default roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: psp:restricted subjects: - kind: User name: dev-user apiGroup: rbac.authorization.k8s.io 5. Seccomp Objective: Apply a seccomp profile to a pod.\nSteps:\napiVersion: v1 kind: Pod metadata: name: seccomp-demo annotations: seccomp.security.alpha.kubernetes.io/pod: localhost/my-seccomp-profile.json spec: containers: - name: mycontainer image: nginx Make sure your profile is placed in /var/lib/kubelet/seccomp.\n6. NetworkPolicy Objective: Restrict ingress/egress traffic.\nExample: Allow only frontend to talk to backend:\napiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: allow-frontend namespace: default spec: podSelector: matchLabels: role: backend ingress: - from: - podSelector: matchLabels: role: frontend 7. RBAC Objective: Create role and bind to user.\nSteps:\napiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: namespace: default name: pod-reader rules: - apiGroups: [\"\"] resources: [\"pods\"] verbs: [\"get\", \"watch\", \"list\"] --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: read-pods namespace: default subjects: - kind: User name: jane apiGroup: rbac.authorization.k8s.io roleRef: kind: Role name: pod-reader apiGroup: rbac.authorization.k8s.io 8. Secrets Objective: Encrypt secrets at rest.\nSteps:\nCreate encryption config: apiVersion: apiserver.config.k8s.io/v1 kind: EncryptionConfiguration resources: - resources: - secrets providers: - aescbc: keys: - name: key1 secret: \u003cbase64-encoded-secret\u003e - identity: {} Apply to kube-apiserver: --encryption-provider-config=/etc/kubernetes/encryption-config.yaml 9. ServiceAccount Token Projection Objective: Configure pods to use projected tokens.\nSteps:\napiVersion: v1 kind: Pod metadata: name: mypod spec: serviceAccountName: my-sa containers: - name: mycontainer image: busybox volumeMounts: - name: token mountPath: /var/run/secrets/tokens readOnly: true volumes: - name: token projected: sources: - serviceAccountToken: path: mytoken expirationSeconds: 3600 audience: myaudience 10. CIS Benchmark Tools Objective: Scan cluster for security compliance.\nTools:\nkube-bench: Runs CIS benchmark tests.\nkube-bench node kube-hunter: Security audit tool for Kubernetes clusters.\nkube-hunter --remote \u003cCLUSTER-IP\u003e Question 1: Creating a Single Container Pod apiVersion: v1 kind: Pod metadata: name: nirlabs-nginx spec: containers:\nname: mycontainer image: mynirlabs/kubernetes:nginx Question 2: Commands and Arguments apiVersion: v1 kind: Pod metadata: name: nirlabs-cmdargs spec: containers:\nname: cmdcontainer image: busybox command: [“sleep”] args: [“3600”] Question 3: Exposing Ports for Pods apiVersion: v1 kind: Pod metadata: name: nirlabs-ports spec: containers:\nname: nginx image: nginx ports: containerPort: 80 Question 4: Arguments for Logging apiVersion: v1 kind: Pod metadata: name: nirlabs-logging spec: containers:\nname: logging-container image: nginx args: /bin/sh -c i=0; while true; do echo “$i: $(date)” » /var/log/1.log; echo “$(date) INFO $i” » /var/log/2.log; i=$((i+1)); sleep 1; done Part 2 - Question 1: Labels apiVersion: v1 kind: Pod metadata: name: nirlabs-label labels: env: production app: webserver spec: containers:\nname: nginx-container image: nginx Part 2 - Question 2: Deployments apiVersion: apps/v1 kind: Deployment metadata: labels: app: nginx name: nirlabs-deployment spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nirlabs-deployment image: nginx\nPart 2 - Question 3: Rolling Updates and Rollbacks apiVersion: apps/v1 kind: Deployment metadata: labels: app: nginx name: nirlabs-updates spec: replicas: 2 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nirlabs-updates image: nginx\nPart 2 - Question 4: Labels and Selectors apiVersion: apps/v1 kind: Deployment metadata: name: nirlabs-selector spec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nirlabs-updates image: nginx nodeSelector: disktype: ssd\nPart 2 - Question 5: CronJob apiVersion: batch/v1beta1 kind: CronJob metadata: name: nirlabs-job spec: schedule: “*/1 * * * *” jobTemplate: spec: template: spec: containers: - name: hello image: busybox args: - /bin/sh - -c - date restartPolicy: OnFailure\nPart 2 - Question 6: CronJob with Timeout apiVersion: batch/v1beta1 kind: CronJob metadata: name: nirlabs-cron spec: schedule: “*/1 * * * *” jobTemplate: spec: activeDeadlineSeconds: 10 template: spec: containers: - name: hello image: busybox command: [“curl”, “nirlabs.in/ping”] restartPolicy: OnFailure\nPart 2 - Question 7: Deployment Configuration apiVersion: apps/v1 kind: Deployment metadata: name: nirlabs-configuration spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nirlabs-configuration image: nginx strategy: rollingUpdate: maxSurge: 30% maxUnavailable: 0",
    "description": "Kubernetes Security Practice Questions with Answers (CKS) 1. ImagePolicyWebhook Objective: Ensure all images are verified via an external webhook.\nSteps:\nCreate the configuration file /etc/kubernetes/confcontrol/webhook-config.yaml: apiVersion: apiserver.config.k8s.io/v1 kind: AdmissionConfiguration plugins: - name: ImagePolicyWebhook configuration: imagePolicy: kubeConfigFile: /etc/kubernetes/confcontrol/image-webhook-config.yaml allowTTL: 30 denyTTL: 30 retryBackoff: 500 defaultAllow: false Create the webhook kubeconfig at /etc/kubernetes/confcontrol/image-webhook-config.yaml: apiVersion: v1 kind: Config clusters: - name: image-policy cluster: server: https://webhook.kplabs.internal certificate-authority: /etc/kubernetes/pki/ca.crt users: - name: image-policy user: client-certificate: /etc/kubernetes/pki/apiserver.crt client-key: /etc/kubernetes/pki/apiserver.key contexts: - name: image-policy context: cluster: image-policy user: image-policy current-context: image-policy Modify kube-apiserver manifest to include: --admission-control-config-file=/etc/kubernetes/confcontrol/webhook-config.yaml --enable-admission-plugins=ImagePolicyWebhook Create a pod to verify: kubectl run nginx --image=nginx If the pod fails, get error log: journalctl -u kubelet \u003e /tmp/error.log 2. AppArmor Objective: Load and enforce an AppArmor profile.",
    "tags": [],
    "title": "**Exam**",
    "uri": "/k8s/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Topics to cover 01 Learning Grep 02 Learning Redirection commands 03 Learning Cut Commands 04 Learning Sed 05 Learning Find 06 Learning Uniq 🔍 grep Commands Cheat Sheet 1️⃣ Basic Search: Search for the word “tree” in a file grep \"tree\" /etc/tree.txt 2️⃣ Case-insensitive Search: Search for “tree”, ignoring case grep -i \"tree\" /etc/tree.txt 3️⃣ Search with Line Numbers: Search for “tree” and display line numbers grep -n \"tree\" /etc/tree.txt 4️⃣ Count Matches: Count the number of lines that match “tree” grep -c \"tree\" /etc/tree.txt 5️⃣ Invert Match: Display lines that do NOT contain “tree” grep -v \"tree\" /etc/tree.txt 6️⃣ Show Matching Part Only: Show only the part of the line that matches “tree” grep -o \"tree\" /etc/tree.txt 7️⃣ Extended Regex: Search for “ram” or “ravan” using extended regex grep -E \"ram|ravan\" /etc/ram.txt 8️⃣ Whole Word Match: Match the word “tree” exactly (not part of another word) grep -w \"tree\" /etc/tree.txt 9️⃣ Display File Name Only: Show filenames that contain the word “tree” grep -l \"tree\" *.txt 🔟 Display File Name Only (No Match): Show filenames that do NOT contain the word “tree” grep -L \"tree\" *.txt 1️⃣1️⃣ Recursive Search: Search for “tree” in all files recursively within a directory grep -r \"tree\" /path/to/dir/ 1️⃣2️⃣ Recursive Search (Case-insensitive): Search for “tree” recursively, ignoring case grep -ir \"tree\" /path/to/dir/ 1️⃣3️⃣ Search for Multiple Patterns: Search for either “tree” or “forest” in a file grep -E \"tree|forest\" /etc/trees.txt 1️⃣4️⃣ Suppress Errors: Suppress error messages (e.g., for files that can’t be read) grep \"tree\" * 2\u003e/dev/null 1️⃣5️⃣ Show Lines with Multiple Matches: Show lines that contain both “tree” and “forest” grep \"tree\" /etc/trees.txt | grep \"forest\" 1️⃣6️⃣ Use with Pipes: Filter results from another command, such as ps or dmesg ps aux | grep \"nginx\" # Find running processes related to nginx dmesg | grep -i \"error\" # Look for \"error\" in system logs 1️⃣7️⃣ Use with xargs: Search for “ERROR” in all .log files listed in files.txt cat files.txt | xargs grep \"ERROR\" 🔴 grep Redirection Commands 1️⃣ Redirect Standard Output to a File (Overwrite) grep \"tree\" /etc/tree.txt \u003e output.txt 2️⃣ Append Standard Output to a File grep \"tree\" /etc/tree.txt \u003e\u003e output.txt 3️⃣ Redirect Errors to a File (Overwrite) grep \"tree\" /etc/tree.txt 2\u003e error_log.txt 4️⃣ Append Errors to a File grep \"tree\" /etc/tree.txt 2\u003e\u003e error_log.txt 5️⃣ Redirect Both Standard Output and Errors to the Same File grep \"tree\" /etc/tree.txt \u003e output.txt 2\u003e\u00261 6️⃣ Append Both Standard Output and Errors to the Same File grep \"tree\" /etc/tree.txt \u003e\u003e output.txt 2\u003e\u00261 7️⃣ Suppress Errors and Redirect Output to a File grep \"tree\" /etc/tree.txt \u003e output.txt 2\u003e/dev/null 8️⃣ Redirect Both Output and Errors to null (Suppress All Output) grep \"tree\" /etc/tree.txt \u003e /dev/null 2\u003e\u00261 9️⃣ Redirect Both Errors and Output to a Separate File (If You Need Both) grep \"tree\" /etc/tree.txt 1\u003e output.txt 2\u003e error_log.txt 🔟 Redirect Only Errors to null (Suppress Errors) grep \"tree\" /etc/tree.txt 2\u003e/dev/null ✂️ cut Commands Cheat Sheet 1️⃣ Cut by delimiter: Extract the first column from a comma-separated file cut -d ',' -f 1 /path/to/file.csv 2️⃣ Cut by delimiter and show multiple columns: Extract the first and second columns cut -d ',' -f 1,2 /path/to/file.csv 3️⃣ Cut by character position: Extract the first 5 characters from each line cut -c 1-5 /path/to/file.txt 4️⃣ Cut by byte position: Extract the first 5 bytes from each line cut -b 1-5 /path/to/file.txt 5️⃣ Remove the first column: Skip the first column and print the rest (tab-delimited) cut -f 2- /path/to/file.txt 6️⃣ Show specific columns by field delimiter: Extract the third and fourth columns from a pipe-separated file cut -d '|' -f 3,4 /path/to/file.txt 7️⃣ Cut with a specific field delimiter and show the 2nd to 4th columns cut -d ':' -f 2-4 /etc/passwd 8️⃣ Cut by character positions for the first 3 characters cut -c 1-3 /path/to/file.txt 9️⃣ Cut by delimiter and show the last field (if no delimiter specified, the whole line is considered one field) cut -d ':' -f 7 /etc/passwd 🔟 Cut with input from a pipeline: Extract the second column from the output of the ps command ps aux | cut -d ' ' -f 2 1️⃣1️⃣ Cut by character range and input from pipeline: Extract the first 10 characters of each line in a file cat /path/to/file.txt | cut -c 1-10 1️⃣2️⃣ Remove the last column: Use cut to skip the last column of a tab-separated file cut -f 1- --complement /path/to/file.txt 📝 sed Commands Cheat Sheet 1️⃣ Basic Substitution: Replace “old” with “new” in a file sed 's/old/new/' /path/to/file.txt 2️⃣ Global Substitution: Replace all occurrences of “old” with “new” in a file sed 's/old/new/g' /path/to/file.txt 3️⃣ In-place Substitution: Replace “old” with “new” directly in the file (without creating a backup) sed -i 's/old/new/g' /path/to/file.txt 4️⃣ Substitution with Backup: Replace “old” with “new” and create a backup of the original file sed -i.bak 's/old/new/g' /path/to/file.txt 5️⃣ Delete Lines: Delete lines that match a pattern sed '/pattern/d' /path/to/file.txt 6️⃣ Print Lines: Print only the lines that match a pattern sed -n '/pattern/p' /path/to/file.txt 7️⃣ Replace Only on a Specific Line: Replace “old” with “new” only on line 3 sed '3s/old/new/' /path/to/file.txt 8️⃣ Delete a Range of Lines: Delete lines 3 to 5 from a file sed '3,5d' /path/to/file.txt 9️⃣ Replace Multiple Lines: Replace lines from 3 to 5 with a new string sed '3,5c\\New content' /path/to/file.txt 🔟 Insert Text Before a Line: Insert “new line” before line 2 sed '2i\\new line' /path/to/file.txt 1️⃣1️⃣ Append Text After a Line: Append “new line” after line 2 sed '2a\\new line' /path/to/file.txt 🔍 find Commands Cheat Sheet 1️⃣ Basic Search: Find all files with the .txt extension in the current directory find . -name \"*.txt\" 2️⃣ Search in a Specific Directory: Find all .log files in the /var/log directory find /var/log -name \"*.log\" 3️⃣ Search for Files Modified in the Last N Days: Find files modified in the last 7 days find . -type f -mtime -7 4️⃣ Search for Files Larger than N Bytes: Find files larger than 100MB find . -type f -size +100M 5️⃣ Search for Empty Files: Find all empty files find . -type f -empty 6️⃣ Find Files by Permissions: Find all files with 777 permissions find . -type f -perm 0777 7️⃣ Find Files Owned by a Specific User: Find all files owned by user “john” find . -type f -user john 8️⃣ Execute a Command on Found Files: Find all .log files and delete them find . -name \"*.log\" -exec rm -f {} \\; 9️⃣ Search for Directories Only: Find all directories in the current directory find . -type d 🔟 Search for Files Modified in the Last N Minutes: Find files modified in the last 30 minutes find . -type f -mmin -30 1️⃣1️⃣ Search for Files by Group: Find all files that belong to group “staff” find . -type f -group staff 1️⃣2️⃣ Find Files by Name with Case Insensitivity: Find .jpg files, case-insensitive find . -iname \"*.jpg\" 1️⃣3️⃣ Limit Search Depth: Find files only in the top level of directories (depth 1) find . -maxdepth 1 -type f 1️⃣4️⃣ Search for Files Modified After a Specific Date: Find files modified after January 1, 2020 find . -type f -newermt \"2020-01-01\" 🦄 uniq Commands Cheat Sheet 1️⃣ Remove Duplicate Lines: Remove consecutive duplicate lines in a file uniq /path/to/file.txt 2️⃣ Count Occurrences: Show the number of occurrences of each line in the file uniq -c /path/to/file.txt 3️⃣ Display Only Duplicates: Show only the lines that are repeated (duplicates) uniq -d /path/to/file.txt 4️⃣ Display Lines that Are Not Duplicated: Show lines that are not repeated in the file uniq -u /path/to/file.txt 5️⃣ Skip N Fields: Skip the first field when checking for duplicates (useful for space-separated fields) uniq -f 1 /path/to/file.txt 6️⃣ Ignore Case When Comparing: Remove duplicates, ignoring case uniq -i /path/to/file.txt 7️⃣ Compare N Characters: Compare the first N characters of each line for duplicates uniq -w 5 /path/to/file.txt 8️⃣ Use a Separator: Use a custom separator when displaying duplicates uniq -s 2 /path/to/file.txt 9️⃣ Redirect Output to a New File: Remove duplicates and store the result in a new file uniq /path/to/file.txt \u003e /path/to/output.txt 🔟 Count Duplicates in Input: Pipe input to uniq and count occurrences echo -e \"apple\\napple\\nbanana\" | uniq -c 1️⃣1️⃣ Remove Duplicates from Sorted Data: Sort data and then remove duplicates sort /path/to/file.txt | uniq 1️⃣2️⃣ Use with Pipe: Count unique words in the output of a cat command cat /path/to/file.txt | sort | uniq -c",
    "description": "Topics to cover 01 Learning Grep 02 Learning Redirection commands 03 Learning Cut Commands 04 Learning Sed 05 Learning Find 06 Learning Uniq 🔍 grep Commands Cheat Sheet 1️⃣ Basic Search: Search for the word “tree” in a file grep \"tree\" /etc/tree.txt 2️⃣ Case-insensitive Search: Search for “tree”, ignoring case grep -i \"tree\" /etc/tree.txt 3️⃣ Search with Line Numbers: Search for “tree” and display line numbers grep -n \"tree\" /etc/tree.txt 4️⃣ Count Matches: Count the number of lines that match “tree” grep -c \"tree\" /etc/tree.txt 5️⃣ Invert Match: Display lines that do NOT contain “tree” grep -v \"tree\" /etc/tree.txt 6️⃣ Show Matching Part Only: Show only the part of the line that matches “tree” grep -o \"tree\" /etc/tree.txt 7️⃣ Extended Regex: Search for “ram” or “ravan” using extended regex grep -E \"ram|ravan\" /etc/ram.txt 8️⃣ Whole Word Match: Match the word “tree” exactly (not part of another word) grep -w \"tree\" /etc/tree.txt 9️⃣ Display File Name Only: Show filenames that contain the word “tree” grep -l \"tree\" *.txt 🔟 Display File Name Only (No Match): Show filenames that do NOT contain the word “tree” grep -L \"tree\" *.txt 1️⃣1️⃣ Recursive Search: Search for “tree” in all files recursively within a directory grep -r \"tree\" /path/to/dir/ 1️⃣2️⃣ Recursive Search (Case-insensitive): Search for “tree” recursively, ignoring case grep -ir \"tree\" /path/to/dir/ 1️⃣3️⃣ Search for Multiple Patterns: Search for either “tree” or “forest” in a file grep -E \"tree|forest\" /etc/trees.txt 1️⃣4️⃣ Suppress Errors: Suppress error messages (e.g., for files that can’t be read) grep \"tree\" * 2\u003e/dev/null 1️⃣5️⃣ Show Lines with Multiple Matches: Show lines that contain both “tree” and “forest” grep \"tree\" /etc/trees.txt | grep \"forest\" 1️⃣6️⃣ Use with Pipes: Filter results from another command, such as ps or dmesg ps aux | grep \"nginx\" # Find running processes related to nginx dmesg | grep -i \"error\" # Look for \"error\" in system logs 1️⃣7️⃣ Use with xargs: Search for “ERROR” in all .log files listed in files.txt cat files.txt | xargs grep \"ERROR\" 🔴 grep Redirection Commands 1️⃣ Redirect Standard Output to a File (Overwrite) grep \"tree\" /etc/tree.txt \u003e output.txt 2️⃣ Append Standard Output to a File grep \"tree\" /etc/tree.txt \u003e\u003e output.txt 3️⃣ Redirect Errors to a File (Overwrite) grep \"tree\" /etc/tree.txt 2\u003e error_log.txt 4️⃣ Append Errors to a File grep \"tree\" /etc/tree.txt 2\u003e\u003e error_log.txt 5️⃣ Redirect Both Standard Output and Errors to the Same File grep \"tree\" /etc/tree.txt \u003e output.txt 2\u003e\u00261 6️⃣ Append Both Standard Output and Errors to the Same File grep \"tree\" /etc/tree.txt \u003e\u003e output.txt 2\u003e\u00261 7️⃣ Suppress Errors and Redirect Output to a File grep \"tree\" /etc/tree.txt \u003e output.txt 2\u003e/dev/null 8️⃣ Redirect Both Output and Errors to null (Suppress All Output) grep \"tree\" /etc/tree.txt \u003e /dev/null 2\u003e\u00261 9️⃣ Redirect Both Errors and Output to a Separate File (If You Need Both) grep \"tree\" /etc/tree.txt 1\u003e output.txt 2\u003e error_log.txt 🔟 Redirect Only Errors to null (Suppress Errors) grep \"tree\" /etc/tree.txt 2\u003e/dev/null ✂️ cut Commands Cheat Sheet 1️⃣ Cut by delimiter: Extract the first column from a comma-separated file cut -d ',' -f 1 /path/to/file.csv 2️⃣ Cut by delimiter and show multiple columns: Extract the first and second columns cut -d ',' -f 1,2 /path/to/file.csv 3️⃣ Cut by character position: Extract the first 5 characters from each line cut -c 1-5 /path/to/file.txt 4️⃣ Cut by byte position: Extract the first 5 bytes from each line cut -b 1-5 /path/to/file.txt 5️⃣ Remove the first column: Skip the first column and print the rest (tab-delimited) cut -f 2- /path/to/file.txt 6️⃣ Show specific columns by field delimiter: Extract the third and fourth columns from a pipe-separated file cut -d '|' -f 3,4 /path/to/file.txt 7️⃣ Cut with a specific field delimiter and show the 2nd to 4th columns cut -d ':' -f 2-4 /etc/passwd 8️⃣ Cut by character positions for the first 3 characters cut -c 1-3 /path/to/file.txt 9️⃣ Cut by delimiter and show the last field (if no delimiter specified, the whole line is considered one field) cut -d ':' -f 7 /etc/passwd 🔟 Cut with input from a pipeline: Extract the second column from the output of the ps command ps aux | cut -d ' ' -f 2 1️⃣1️⃣ Cut by character range and input from pipeline: Extract the first 10 characters of each line in a file cat /path/to/file.txt | cut -c 1-10 1️⃣2️⃣ Remove the last column: Use cut to skip the last column of a tab-separated file cut -f 1- --complement /path/to/file.txt 📝 sed Commands Cheat Sheet 1️⃣ Basic Substitution: Replace “old” with “new” in a file sed 's/old/new/' /path/to/file.txt 2️⃣ Global Substitution: Replace all occurrences of “old” with “new” in a file sed 's/old/new/g' /path/to/file.txt 3️⃣ In-place Substitution: Replace “old” with “new” directly in the file (without creating a backup) sed -i 's/old/new/g' /path/to/file.txt 4️⃣ Substitution with Backup: Replace “old” with “new” and create a backup of the original file sed -i.bak 's/old/new/g' /path/to/file.txt 5️⃣ Delete Lines: Delete lines that match a pattern sed '/pattern/d' /path/to/file.txt 6️⃣ Print Lines: Print only the lines that match a pattern sed -n '/pattern/p' /path/to/file.txt 7️⃣ Replace Only on a Specific Line: Replace “old” with “new” only on line 3 sed '3s/old/new/' /path/to/file.txt 8️⃣ Delete a Range of Lines: Delete lines 3 to 5 from a file sed '3,5d' /path/to/file.txt 9️⃣ Replace Multiple Lines: Replace lines from 3 to 5 with a new string sed '3,5c\\New content' /path/to/file.txt 🔟 Insert Text Before a Line: Insert “new line” before line 2 sed '2i\\new line' /path/to/file.txt 1️⃣1️⃣ Append Text After a Line: Append “new line” after line 2 sed '2a\\new line' /path/to/file.txt 🔍 find Commands Cheat Sheet 1️⃣ Basic Search: Find all files with the .txt extension in the current directory find . -name \"*.txt\" 2️⃣ Search in a Specific Directory: Find all .log files in the /var/log directory find /var/log -name \"*.log\" 3️⃣ Search for Files Modified in the Last N Days: Find files modified in the last 7 days find . -type f -mtime -7 4️⃣ Search for Files Larger than N Bytes: Find files larger than 100MB find . -type f -size +100M 5️⃣ Search for Empty Files: Find all empty files find . -type f -empty 6️⃣ Find Files by Permissions: Find all files with 777 permissions find . -type f -perm 0777 7️⃣ Find Files Owned by a Specific User: Find all files owned by user “john” find . -type f -user john 8️⃣ Execute a Command on Found Files: Find all .log files and delete them find . -name \"*.log\" -exec rm -f {} \\; 9️⃣ Search for Directories Only: Find all directories in the current directory find . -type d 🔟 Search for Files Modified in the Last N Minutes: Find files modified in the last 30 minutes find . -type f -mmin -30 1️⃣1️⃣ Search for Files by Group: Find all files that belong to group “staff” find . -type f -group staff 1️⃣2️⃣ Find Files by Name with Case Insensitivity: Find .jpg files, case-insensitive find . -iname \"*.jpg\" 1️⃣3️⃣ Limit Search Depth: Find files only in the top level of directories (depth 1) find . -maxdepth 1 -type f 1️⃣4️⃣ Search for Files Modified After a Specific Date: Find files modified after January 1, 2020 find . -type f -newermt \"2020-01-01\" 🦄 uniq Commands Cheat Sheet 1️⃣ Remove Duplicate Lines: Remove consecutive duplicate lines in a file uniq /path/to/file.txt 2️⃣ Count Occurrences: Show the number of occurrences of each line in the file uniq -c /path/to/file.txt 3️⃣ Display Only Duplicates: Show only the lines that are repeated (duplicates) uniq -d /path/to/file.txt 4️⃣ Display Lines that Are Not Duplicated: Show lines that are not repeated in the file uniq -u /path/to/file.txt 5️⃣ Skip N Fields: Skip the first field when checking for duplicates (useful for space-separated fields) uniq -f 1 /path/to/file.txt 6️⃣ Ignore Case When Comparing: Remove duplicates, ignoring case uniq -i /path/to/file.txt 7️⃣ Compare N Characters: Compare the first N characters of each line for duplicates uniq -w 5 /path/to/file.txt 8️⃣ Use a Separator: Use a custom separator when displaying duplicates uniq -s 2 /path/to/file.txt 9️⃣ Redirect Output to a New File: Remove duplicates and store the result in a new file uniq /path/to/file.txt \u003e /path/to/output.txt 🔟 Count Duplicates in Input: Pipe input to uniq and count occurrences echo -e \"apple\\napple\\nbanana\" | uniq -c 1️⃣1️⃣ Remove Duplicates from Sorted Data: Sort data and then remove duplicates sort /path/to/file.txt | uniq 1️⃣2️⃣ Use with Pipe: Count unique words in the output of a cat command cat /path/to/file.txt | sort | uniq -c",
    "tags": [],
    "title": "Day 06",
    "uri": "/part06/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Topics to cover 01 Curl 02 Openssl Curl most used command 1️⃣ Basic GET request: Send a GET request to a URL curl https://example.com 2️⃣ GET request with headers: Send a GET request with custom headers curl -H \"Accept: application/json\" https://example.com/api/data 3️⃣ GET request with multiple headers: Send a GET request with multiple custom headers curl -H \"Accept: application/json\" -H \"Authorization: Bearer \u003ctoken\u003e\" https://example.com/api/data 4️⃣ GET request and save output to a file: Download content and save it to a file curl -o output.html https://example.com 5️⃣ Silent GET request: Send a GET request without progress or error messages curl -s https://example.com 6️⃣ Verbose output: Show detailed information about the request curl -v https://example.com 7️⃣ Follow redirects: Automatically follow HTTP redirects curl -L https://example.com 8️⃣ POST request with form data: Send form data in a POST request curl -X POST -d \"username=user\u0026password=pass\" https://example.com/login 9️⃣ POST JSON data: Send JSON data in a POST request curl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\",\"age\":30}' https://example.com/api/users 🔟 PUT request with JSON: Send JSON data in a PUT request curl -X PUT -H \"Content-Type: application/json\" -d '{\"name\":\"Updated\"}' https://example.com/api/users/1 1️⃣1️⃣ DELETE request: Send a DELETE request curl -X DELETE https://example.com/api/users/1 1️⃣2️⃣ Upload file with POST: Upload a file in a POST request curl -X POST -F \"file=@/path/to/file.txt\" https://example.com/upload 1️⃣3️⃣ Download file with progress bar: Download a file with a progress indicator curl -O https://example.com/file.zip 1️⃣4️⃣ Download file to a custom name: Save the downloaded file with a custom name curl -o newname.zip https://example.com/file.zip 1️⃣5️⃣ Resume a partially downloaded file: Resume downloading a file from where it left off curl -C - -O https://example.com/file.zip 1️⃣6️⃣ FTP upload: Upload a file to an FTP server curl -T file.txt ftp://ftp.example.com/ --user username:password 1️⃣7️⃣ Send cookies: Send cookies with the request curl -b \"name=value\" https://example.com 1️⃣8️⃣ Save cookies to a file: Save cookies from the request to a file curl -c cookies.txt https://example.com 1️⃣9️⃣ Use cookies from a file: Send cookies from a file with the request curl -b cookies.txt https://example.com 2️⃣0️⃣ HTTP authentication (Basic Auth): Send HTTP Basic Authentication curl -u username:password https://example.com 2️⃣1️⃣ Use a proxy: Send a request through a proxy server curl -x http://proxy.example.com:8080 https://example.com 2️⃣2️⃣ Limit download speed: Limit the download speed to a specific rate curl --limit-rate 100k https://example.com 2️⃣3️⃣ Use a specific request method (e.g., PATCH): Send a PATCH request curl -X PATCH -d '{\"status\":\"active\"}' -H \"Content-Type: application/json\" https://example.com/api/resource 2️⃣4️⃣ Upload multiple files with form: Upload multiple files using form data curl -F \"file1=@file1.txt\" -F \"file2=@file2.txt\" https://example.com/upload 2️⃣5️⃣ Upload file with a specific content type: Upload a file with a specified content type curl -F \"file=@file.json;type=application/json\" https://example.com/upload Openssl Commands 1️⃣ Generate a Self-Signed Certificate: Create a self-signed SSL certificate with a private key openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt 2️⃣ Generate a Private Key: Generate a private RSA key openssl genpkey -algorithm RSA -out private.key 3️⃣ Generate a Public Key: Generate a public key from a private key openssl rsa -in private.key -pubout -out public.key 4️⃣ Convert PEM to DER: Convert a PEM-encoded certificate to DER format openssl x509 -in certificate.pem -outform DER -out certificate.der 5️⃣ Convert DER to PEM: Convert a DER-encoded certificate to PEM format openssl x509 -in certificate.der -inform DER -out certificate.pem -outform PEM 6️⃣ View Certificate Information: View details about an SSL certificate openssl x509 -in certificate.crt -text -noout 7️⃣ Verify Certificate: Verify if a certificate is valid for a specific domain openssl s_client -connect example.com:443 -showcerts 8️⃣ Create a CSR (Certificate Signing Request): Generate a CSR using a private key openssl req -new -key private.key -out request.csr 9️⃣ Sign a CSR with a CA (Certificate Authority): Sign a CSR with a CA certificate openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out signed.crt -days 365 🔟 Check SSL Certificate Expiry: Check the expiration date of an SSL certificate openssl x509 -in certificate.crt -noout -enddate 1️⃣1️⃣ Create a PKCS12 File: Convert a private key and certificate to a PKCS12 file openssl pkcs12 -export -in certificate.crt -inkey private.key -out certificate.p12 1️⃣2️⃣ Extract Certificate from PKCS12 File: Extract a certificate from a PKCS12 file openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.crt 1️⃣3️⃣ Extract Private Key from PKCS12 File: Extract the private key from a PKCS12 file openssl pkcs12 -in certificate.p12 -nocerts -out private.key 1️⃣4️⃣ Encrypt a File with AES: Encrypt a file using AES encryption openssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.txt 1️⃣5️⃣ Decrypt a File with AES: Decrypt a file that was encrypted with AES openssl enc -d -aes-256-cbc -in encrypted.txt -out decrypted.txt 1️⃣6️⃣ Generate a Diffie-Hellman Parameters File: Generate a DH parameters file openssl dhparam -out dhparams.pem 2048 1️⃣7️⃣ Create an SSL/TLS Server Certificate: Generate a server certificate from a CSR openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 1️⃣8️⃣ Test SSL Connection: Test an SSL connection to a server openssl s_client -connect example.com:443 1️⃣9️⃣ Generate an MD5 Hash of a File: Generate an MD5 hash of a file openssl dgst -md5 file.txt 2️⃣0️⃣ Generate a SHA256 Hash of a File: Generate a SHA256 hash of a file openssl dgst -sha256 file.txt 1️⃣ Generate a Self-Signed Certificate: Create a self-signed SSL certificate with a private key openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt 2️⃣ Generate a Private Key: Generate a private RSA key openssl genpkey -algorithm RSA -out private.key 3️⃣ Generate a Public Key: Generate a public key from a private key openssl rsa -in private.key -pubout -out public.key 4️⃣ Convert PEM to DER: Convert a PEM-encoded certificate to DER format openssl x509 -in certificate.pem -outform DER -out certificate.der 5️⃣ Convert DER to PEM: Convert a DER-encoded certificate to PEM format openssl x509 -in certificate.der -inform DER -out certificate.pem -outform PEM 6️⃣ View Certificate Information: View details about an SSL certificate openssl x509 -in certificate.crt -text -noout 7️⃣ Verify Certificate: Verify if a certificate is valid for a specific domain openssl s_client -connect example.com:443 -showcerts 8️⃣ Create a CSR (Certificate Signing Request): Generate a CSR using a private key openssl req -new -key private.key -out request.csr 9️⃣ Sign a CSR with a CA (Certificate Authority): Sign a CSR with a CA certificate openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out signed.crt -days 365 🔟 Check SSL Certificate Expiry: Check the expiration date of an SSL certificate openssl x509 -in certificate.crt -noout -enddate 1️⃣1️⃣ Create a PKCS12 File: Convert a private key and certificate to a PKCS12 file openssl pkcs12 -export -in certificate.crt -inkey private.key -out certificate.p12 1️⃣2️⃣ Extract Certificate from PKCS12 File: Extract a certificate from a PKCS12 file openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.crt 1️⃣3️⃣ Extract Private Key from PKCS12 File: Extract the private key from a PKCS12 file openssl pkcs12 -in certificate.p12 -nocerts -out private.key 1️⃣4️⃣ Encrypt a File with AES: Encrypt a file using AES encryption openssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.txt 1️⃣5️⃣ Decrypt a File with AES: Decrypt a file that was encrypted with AES openssl enc -d -aes-256-cbc -in encrypted.txt -out decrypted.txt 1️⃣6️⃣ Generate a Diffie-Hellman Parameters File: Generate a DH parameters file openssl dhparam -out dhparams.pem 2048 1️⃣7️⃣ Create an SSL/TLS Server Certificate: Generate a server certificate from a CSR openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 1️⃣8️⃣ Test SSL Connection: Test an SSL connection to a server openssl s_client -connect example.com:443 1️⃣9️⃣ Generate an MD5 Hash of a File: Generate an MD5 hash of a file openssl dgst -md5 file.txt 2️⃣0️⃣ Generate a SHA256 Hash of a File: Generate a SHA256 hash of a file openssl dgst -sha256 file.txt",
    "description": "Topics to cover 01 Curl 02 Openssl Curl most used command 1️⃣ Basic GET request: Send a GET request to a URL curl https://example.com 2️⃣ GET request with headers: Send a GET request with custom headers curl -H \"Accept: application/json\" https://example.com/api/data 3️⃣ GET request with multiple headers: Send a GET request with multiple custom headers curl -H \"Accept: application/json\" -H \"Authorization: Bearer \u003ctoken\u003e\" https://example.com/api/data 4️⃣ GET request and save output to a file: Download content and save it to a file curl -o output.html https://example.com 5️⃣ Silent GET request: Send a GET request without progress or error messages curl -s https://example.com 6️⃣ Verbose output: Show detailed information about the request curl -v https://example.com 7️⃣ Follow redirects: Automatically follow HTTP redirects curl -L https://example.com 8️⃣ POST request with form data: Send form data in a POST request curl -X POST -d \"username=user\u0026password=pass\" https://example.com/login 9️⃣ POST JSON data: Send JSON data in a POST request curl -X POST -H \"Content-Type: application/json\" -d '{\"name\":\"John\",\"age\":30}' https://example.com/api/users 🔟 PUT request with JSON: Send JSON data in a PUT request curl -X PUT -H \"Content-Type: application/json\" -d '{\"name\":\"Updated\"}' https://example.com/api/users/1 1️⃣1️⃣ DELETE request: Send a DELETE request curl -X DELETE https://example.com/api/users/1 1️⃣2️⃣ Upload file with POST: Upload a file in a POST request curl -X POST -F \"file=@/path/to/file.txt\" https://example.com/upload 1️⃣3️⃣ Download file with progress bar: Download a file with a progress indicator curl -O https://example.com/file.zip 1️⃣4️⃣ Download file to a custom name: Save the downloaded file with a custom name curl -o newname.zip https://example.com/file.zip 1️⃣5️⃣ Resume a partially downloaded file: Resume downloading a file from where it left off curl -C - -O https://example.com/file.zip 1️⃣6️⃣ FTP upload: Upload a file to an FTP server curl -T file.txt ftp://ftp.example.com/ --user username:password 1️⃣7️⃣ Send cookies: Send cookies with the request curl -b \"name=value\" https://example.com 1️⃣8️⃣ Save cookies to a file: Save cookies from the request to a file curl -c cookies.txt https://example.com 1️⃣9️⃣ Use cookies from a file: Send cookies from a file with the request curl -b cookies.txt https://example.com 2️⃣0️⃣ HTTP authentication (Basic Auth): Send HTTP Basic Authentication curl -u username:password https://example.com 2️⃣1️⃣ Use a proxy: Send a request through a proxy server curl -x http://proxy.example.com:8080 https://example.com 2️⃣2️⃣ Limit download speed: Limit the download speed to a specific rate curl --limit-rate 100k https://example.com 2️⃣3️⃣ Use a specific request method (e.g., PATCH): Send a PATCH request curl -X PATCH -d '{\"status\":\"active\"}' -H \"Content-Type: application/json\" https://example.com/api/resource 2️⃣4️⃣ Upload multiple files with form: Upload multiple files using form data curl -F \"file1=@file1.txt\" -F \"file2=@file2.txt\" https://example.com/upload 2️⃣5️⃣ Upload file with a specific content type: Upload a file with a specified content type curl -F \"file=@file.json;type=application/json\" https://example.com/upload Openssl Commands 1️⃣ Generate a Self-Signed Certificate: Create a self-signed SSL certificate with a private key openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt 2️⃣ Generate a Private Key: Generate a private RSA key openssl genpkey -algorithm RSA -out private.key 3️⃣ Generate a Public Key: Generate a public key from a private key openssl rsa -in private.key -pubout -out public.key 4️⃣ Convert PEM to DER: Convert a PEM-encoded certificate to DER format openssl x509 -in certificate.pem -outform DER -out certificate.der 5️⃣ Convert DER to PEM: Convert a DER-encoded certificate to PEM format openssl x509 -in certificate.der -inform DER -out certificate.pem -outform PEM 6️⃣ View Certificate Information: View details about an SSL certificate openssl x509 -in certificate.crt -text -noout 7️⃣ Verify Certificate: Verify if a certificate is valid for a specific domain openssl s_client -connect example.com:443 -showcerts 8️⃣ Create a CSR (Certificate Signing Request): Generate a CSR using a private key openssl req -new -key private.key -out request.csr 9️⃣ Sign a CSR with a CA (Certificate Authority): Sign a CSR with a CA certificate openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out signed.crt -days 365 🔟 Check SSL Certificate Expiry: Check the expiration date of an SSL certificate openssl x509 -in certificate.crt -noout -enddate 1️⃣1️⃣ Create a PKCS12 File: Convert a private key and certificate to a PKCS12 file openssl pkcs12 -export -in certificate.crt -inkey private.key -out certificate.p12 1️⃣2️⃣ Extract Certificate from PKCS12 File: Extract a certificate from a PKCS12 file openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.crt 1️⃣3️⃣ Extract Private Key from PKCS12 File: Extract the private key from a PKCS12 file openssl pkcs12 -in certificate.p12 -nocerts -out private.key 1️⃣4️⃣ Encrypt a File with AES: Encrypt a file using AES encryption openssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.txt 1️⃣5️⃣ Decrypt a File with AES: Decrypt a file that was encrypted with AES openssl enc -d -aes-256-cbc -in encrypted.txt -out decrypted.txt 1️⃣6️⃣ Generate a Diffie-Hellman Parameters File: Generate a DH parameters file openssl dhparam -out dhparams.pem 2048 1️⃣7️⃣ Create an SSL/TLS Server Certificate: Generate a server certificate from a CSR openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 1️⃣8️⃣ Test SSL Connection: Test an SSL connection to a server openssl s_client -connect example.com:443 1️⃣9️⃣ Generate an MD5 Hash of a File: Generate an MD5 hash of a file openssl dgst -md5 file.txt 2️⃣0️⃣ Generate a SHA256 Hash of a File: Generate a SHA256 hash of a file openssl dgst -sha256 file.txt 1️⃣ Generate a Self-Signed Certificate: Create a self-signed SSL certificate with a private key openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt 2️⃣ Generate a Private Key: Generate a private RSA key openssl genpkey -algorithm RSA -out private.key 3️⃣ Generate a Public Key: Generate a public key from a private key openssl rsa -in private.key -pubout -out public.key 4️⃣ Convert PEM to DER: Convert a PEM-encoded certificate to DER format openssl x509 -in certificate.pem -outform DER -out certificate.der 5️⃣ Convert DER to PEM: Convert a DER-encoded certificate to PEM format openssl x509 -in certificate.der -inform DER -out certificate.pem -outform PEM 6️⃣ View Certificate Information: View details about an SSL certificate openssl x509 -in certificate.crt -text -noout 7️⃣ Verify Certificate: Verify if a certificate is valid for a specific domain openssl s_client -connect example.com:443 -showcerts 8️⃣ Create a CSR (Certificate Signing Request): Generate a CSR using a private key openssl req -new -key private.key -out request.csr 9️⃣ Sign a CSR with a CA (Certificate Authority): Sign a CSR with a CA certificate openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out signed.crt -days 365 🔟 Check SSL Certificate Expiry: Check the expiration date of an SSL certificate openssl x509 -in certificate.crt -noout -enddate 1️⃣1️⃣ Create a PKCS12 File: Convert a private key and certificate to a PKCS12 file openssl pkcs12 -export -in certificate.crt -inkey private.key -out certificate.p12 1️⃣2️⃣ Extract Certificate from PKCS12 File: Extract a certificate from a PKCS12 file openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.crt 1️⃣3️⃣ Extract Private Key from PKCS12 File: Extract the private key from a PKCS12 file openssl pkcs12 -in certificate.p12 -nocerts -out private.key 1️⃣4️⃣ Encrypt a File with AES: Encrypt a file using AES encryption openssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.txt 1️⃣5️⃣ Decrypt a File with AES: Decrypt a file that was encrypted with AES openssl enc -d -aes-256-cbc -in encrypted.txt -out decrypted.txt 1️⃣6️⃣ Generate a Diffie-Hellman Parameters File: Generate a DH parameters file openssl dhparam -out dhparams.pem 2048 1️⃣7️⃣ Create an SSL/TLS Server Certificate: Generate a server certificate from a CSR openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 1️⃣8️⃣ Test SSL Connection: Test an SSL connection to a server openssl s_client -connect example.com:443 1️⃣9️⃣ Generate an MD5 Hash of a File: Generate an MD5 hash of a file openssl dgst -md5 file.txt 2️⃣0️⃣ Generate a SHA256 Hash of a File: Generate a SHA256 hash of a file openssl dgst -sha256 file.txt",
    "tags": [],
    "title": "Day 07",
    "uri": "/part07/index.html"
  },
  {
    "breadcrumb": "",
    "content": "Topics to cover 01 Gitalab Installation 02 Curl 03 Openssl 🚀 Introduction to GitLab GitLab is a web-based DevOps lifecycle tool that provides a Git repository manager with built-in features like:\nIssue tracking Continuous Integration/Continuous Deployment (CI/CD) Code review Project management Wiki and more It enables teams to collaborate on code, automate testing, and deploy software efficiently.\n🔧 What Is Git? Before diving into GitLab, it’s important to understand Git:\nGit is a version control system that lets you track code changes. It allows multiple developers to work on the same project simultaneously. GitLab builds on Git by providing a collaborative platform for managing and deploying code.\n🌐 GitLab vs GitHub vs Bitbucket Feature GitLab GitHub Bitbucket CI/CD Built-in ✅ Yes ⚠️ Needs Actions ✅ Yes Self-hosted ✅ Available ✅ Enterprise ✅ Available Open Source ✅ Core version ❌ ❌ 🔑 Key Features of GitLab Repositories: Git-based version control for code. CI/CD Pipelines: Automate building, testing, and deploying your code. Merge Requests: Review and approve code changes. Issue Tracking: Built-in project management tools. Security \u0026 Compliance: SAST, DAST, container scanning, etc. Wiki \u0026 Docs: Project documentation support. 🛠️ GitLab Editions GitLab SaaS: Hosted on GitLab.com GitLab Self-Managed: You install and run GitLab on your own server Versions: Free – Core features Premium – Enhanced CI/CD and support Ultimate – Security, compliance, and performance features 📦 Basic GitLab Workflow Clone the Repository\ngit clone https://gitlab.com/username/project.git Create a Branch\ngit checkout -b feature-branch Make Changes and Commit\ngit add . git commit -m \"Added new feature\" Push to GitLab\ngit push origin feature-branch Create a Merge Request (MR) via the GitLab UI\nCode Review and Merge into the main branch\n📈 CI/CD Pipeline Example .gitlab-ci.yml file defines your pipeline:\nstages: - build - test - deploy build-job: stage: build script: - echo \"Building the app...\" test-job: stage: test script: - echo \"Running tests...\" deploy-job: stage: deploy script: - echo \"Deploying the app...\" ✅ Why Use GitLab? All-in-one DevOps platform Improves collaboration and code quality Automates the software delivery lifecycle Scalable for both small teams and large enterprises 📚 Learn More Official site: https://about.gitlab.com Docs: https://docs.gitlab.com GitLab CI/CD: https://docs.gitlab.com/ee/ci GitLab helps you code, collaborate, and deploy — all in one place. 💻🚀\nGitlab Installation Create a Linux vm with 8GB of RAM , 2CPU min and 50GB of Disk space Have one public Domain Follow the steps given here 🚀 Most Common curl Commands curl is a command-line tool used for transferring data to or from a server using various protocols such as HTTP, HTTPS, FTP, and more.\n🌐 1. Test Connectivity (Like telnet for HTTP) To check if a service is reachable and responding on a specific port:\ncurl -v telnet://hostname:port Example:\ncurl -v telnet://example.com:80 Works similar to telnet, but only for protocols curl supports.\n📥 2. Download a File (Like wget) curl -O https://example.com/file.tar.gz -O: Saves the file with its original name. Download and rename:\ncurl -o newname.tar.gz https://example.com/file.tar.gz 📤 3. Upload a File (Using POST) curl -F \"file=@/path/to/file.txt\" https://example.com/upload Used for uploading files via web forms.\n🔄 4. Make a POST Request curl -X POST -d \"username=user\u0026password=pass\" https://example.com/login Or with JSON:\ncurl -X POST -H \"Content-Type: application/json\" \\ -d '{\"username\":\"user\", \"password\":\"pass\"}' \\ https://example.com/api/login 🔍 5. View HTTP Headers Only curl -I https://example.com Shows only the response headers (HEAD request).\n🧪 6. Check HTTP Status Code curl -o /dev/null -s -w \"%{http_code}\\n\" https://example.com Only prints the HTTP response code like 200, 404, etc.\n🪪 7. Send Custom Headers (e.g. API Tokens) curl -H \"Authorization: Bearer \u003ctoken\u003e\" https://api.example.com/data 🧰 8. Debug Full Request/Response curl -v https://example.com Use -v (verbose) or --trace for full request/response logs.\n🔁 9. Follow Redirects curl -L https://short.url/link Follows HTTP 3xx redirects (like a shortened URL).\n📡 10. Download from FTP Server curl -u username:password ftp://ftp.example.com/file.zip -O 💡 Tips Add -k to ignore SSL certificate validation (not recommended for production): curl -k https://example.com Add -s for silent mode (no progress bar or errors). Use -u user:pass for basic auth. 📚 Learn More Official Docs: https://curl.se/docs/ Protocols Supported: HTTP, HTTPS, FTP, SFTP, SCP, LDAP, and more curl is like a Swiss Army knife for HTTP and beyond — learn it once, use it everywhere. 🔧🌍\nOpenssl Commands 1️⃣ Generate a Self-Signed Certificate: Create a self-signed SSL certificate with a private key openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt 2️⃣ Generate a Private Key: Generate a private RSA key openssl genpkey -algorithm RSA -out private.key 3️⃣ Generate a Public Key: Generate a public key from a private key openssl rsa -in private.key -pubout -out public.key 4️⃣ Convert PEM to DER: Convert a PEM-encoded certificate to DER format openssl x509 -in certificate.pem -outform DER -out certificate.der 5️⃣ Convert DER to PEM: Convert a DER-encoded certificate to PEM format openssl x509 -in certificate.der -inform DER -out certificate.pem -outform PEM 6️⃣ View Certificate Information: View details about an SSL certificate openssl x509 -in certificate.crt -text -noout 7️⃣ Verify Certificate: Verify if a certificate is valid for a specific domain openssl s_client -connect example.com:443 -showcerts 8️⃣ Create a CSR (Certificate Signing Request): Generate a CSR using a private key openssl req -new -key private.key -out request.csr 9️⃣ Sign a CSR with a CA (Certificate Authority): Sign a CSR with a CA certificate openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out signed.crt -days 365 🔟 Check SSL Certificate Expiry: Check the expiration date of an SSL certificate openssl x509 -in certificate.crt -noout -enddate 1️⃣1️⃣ Create a PKCS12 File: Convert a private key and certificate to a PKCS12 file openssl pkcs12 -export -in certificate.crt -inkey private.key -out certificate.p12 1️⃣2️⃣ Extract Certificate from PKCS12 File: Extract a certificate from a PKCS12 file openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.crt 1️⃣3️⃣ Extract Private Key from PKCS12 File: Extract the private key from a PKCS12 file openssl pkcs12 -in certificate.p12 -nocerts -out private.key 1️⃣4️⃣ Encrypt a File with AES: Encrypt a file using AES encryption openssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.txt 1️⃣5️⃣ Decrypt a File with AES: Decrypt a file that was encrypted with AES openssl enc -d -aes-256-cbc -in encrypted.txt -out decrypted.txt 1️⃣6️⃣ Generate a Diffie-Hellman Parameters File: Generate a DH parameters file openssl dhparam -out dhparams.pem 2048 1️⃣7️⃣ Create an SSL/TLS Server Certificate: Generate a server certificate from a CSR openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 1️⃣8️⃣ Test SSL Connection: Test an SSL connection to a server openssl s_client -connect example.com:443 1️⃣9️⃣ Generate an MD5 Hash of a File: Generate an MD5 hash of a file openssl dgst -md5 file.txt 2️⃣0️⃣ Generate a SHA256 Hash of a File: Generate a SHA256 hash of a file openssl dgst -sha256 file.txt 1️⃣ Generate a Self-Signed Certificate: Create a self-signed SSL certificate with a private key openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt 2️⃣ Generate a Private Key: Generate a private RSA key openssl genpkey -algorithm RSA -out private.key 3️⃣ Generate a Public Key: Generate a public key from a private key openssl rsa -in private.key -pubout -out public.key 4️⃣ Convert PEM to DER: Convert a PEM-encoded certificate to DER format openssl x509 -in certificate.pem -outform DER -out certificate.der 5️⃣ Convert DER to PEM: Convert a DER-encoded certificate to PEM format openssl x509 -in certificate.der -inform DER -out certificate.pem -outform PEM 6️⃣ View Certificate Information: View details about an SSL certificate openssl x509 -in certificate.crt -text -noout 7️⃣ Verify Certificate: Verify if a certificate is valid for a specific domain openssl s_client -connect example.com:443 -showcerts 8️⃣ Create a CSR (Certificate Signing Request): Generate a CSR using a private key openssl req -new -key private.key -out request.csr 9️⃣ Sign a CSR with a CA (Certificate Authority): Sign a CSR with a CA certificate openssl x509 -req -in request.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out signed.crt -days 365 🔟 Check SSL Certificate Expiry: Check the expiration date of an SSL certificate openssl x509 -in certificate.crt -noout -enddate 1️⃣1️⃣ Create a PKCS12 File: Convert a private key and certificate to a PKCS12 file openssl pkcs12 -export -in certificate.crt -inkey private.key -out certificate.p12 1️⃣2️⃣ Extract Certificate from PKCS12 File: Extract a certificate from a PKCS12 file openssl pkcs12 -in certificate.p12 -clcerts -nokeys -out certificate.crt 1️⃣3️⃣ Extract Private Key from PKCS12 File: Extract the private key from a PKCS12 file openssl pkcs12 -in certificate.p12 -nocerts -out private.key 1️⃣4️⃣ Encrypt a File with AES: Encrypt a file using AES encryption openssl enc -aes-256-cbc -salt -in plaintext.txt -out encrypted.txt 1️⃣5️⃣ Decrypt a File with AES: Decrypt a file that was encrypted with AES openssl enc -d -aes-256-cbc -in encrypted.txt -out decrypted.txt 1️⃣6️⃣ Generate a Diffie-Hellman Parameters File: Generate a DH parameters file openssl dhparam -out dhparams.pem 2048 1️⃣7️⃣ Create an SSL/TLS Server Certificate: Generate a server certificate from a CSR openssl req -new -newkey rsa:2048 -nodes -keyout server.key -out server.csr openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365 1️⃣8️⃣ Test SSL Connection: Test an SSL connection to a server openssl s_client -connect example.com:443 1️⃣9️⃣ Generate an MD5 Hash of a File: Generate an MD5 hash of a file openssl dgst -md5 file.txt 2️⃣0️⃣ Generate a SHA256 Hash of a File: Generate a SHA256 hash of a file openssl dgst -sha256 file.txt",
    "description": "Topics to cover 01 Gitalab Installation 02 Curl 03 Openssl 🚀 Introduction to GitLab GitLab is a web-based DevOps lifecycle tool that provides a Git repository manager with built-in features like:\nIssue tracking Continuous Integration/Continuous Deployment (CI/CD) Code review Project management Wiki and more It enables teams to collaborate on code, automate testing, and deploy software efficiently.\n🔧 What Is Git? Before diving into GitLab, it’s important to understand Git:\nGit is a version control system that lets you track code changes. It allows multiple developers to work on the same project simultaneously. GitLab builds on Git by providing a collaborative platform for managing and deploying code.",
    "tags": [],
    "title": "Day 08",
    "uri": "/part08/index.html"
  },
  {
    "breadcrumb": "",
    "content": "1. Getting Started with Ansible Overview on Ansible Why use Ansible 2. Ansible Architecture Control node Managed nodes Inventory Modules Tasks Playbooks Lab Environment 3. Pre-requisites to Setup Ansible Control node requirements Managed node requirements Update /etc/hosts on all the hosts Install mandatory pre-requisites on Ansible client nodes 4. Installing Ansible Install using package manager on RHEL 8 Install using package manager on CentOS 8 Install using pip 5. Configuring Ansible Create normal user Configure password-less authentication Verify password-less SSH authentication Configure privilege escalation using sudo Verify Ansible connectivity Total Duration: 8 hrs\n6. Ansible Configuration File (ansible.cfg) [defaults] section [ssh_connection] section [persistent_connection] section [colors] section 7. Using Ansible Ad-hoc Commands Overview Sample ad-hoc command examples How Ansible works with modules Control the number of hosts for parallel execution (forks) Transfer file from Ansible Engine to Managed Nodes Download file from managed nodes to controller node Copy files locally on the remote server (managed node) Create or Remove file and directory Remove a file from the managed nodes Execute commands with root privileges Working with packages using yum module Execute ad-hoc commands as different user 8. Ansible Inventory Files Dynamic inventory Static inventory Provide hosts as an input argument Groups in an inventory file Groups of groups Regular expressions with an inventory file Variables in inventory 9. Working with Managed Nodes Without Python Total Duration: 8 hrs\n10. Working with Managed Nodes with Password (Not Passphrase) 11. Jinja2 Templates and Syntax Variables Use built-in filters Configure VSFTPD using Jinja2 templates 12. Ansible Facts System default facts User defined facts 13. Ansible Variables and Data Types Creating valid variable names Built-in variables Defining variables in inventory Defining variable in project Defining variables in playbook Defining variables using command line Accessing variables Using register module to store output of any command Using set_fact module to create a new variable Prompt for user input with vars_prompt Read and access variables from separate YAML or JSON file Precedence 14. YAML Syntax in Ansible Playbooks What is YAML? YAML file formatting Create or Modify .vimrc Constructing your Ansible playbook Total Duration: 8 hrs\n15. Introduction to Ansible Playbooks What are Ansible Playbooks Examples Example-1: Your first playbook to install single package Example-2: Install multiple packages on different managed nodes Example-3: Disable gathering facts module Example-4: Assign custom name to the play and tasks Example-5: Execute playbook as shell scripts Example-6: Print debug message with playbooks Example-7: Increase verbosity level of playbook Example-8: Perform syntax check Example-9: Perform dry run of playbooks 16. Use Visual Code Studio to Write Playbooks (GUI) Download Visual Studio Code Repo Access Visual Code Studio Install Ansible Extension Configure Visual Studio to use Ansible Create playbook using Visual Studio 17. Using Operators in Ansible Arithmetic Operators Comparison Operators Test Operators Logical Operators 18. Ansible Conditional Statements Using when statement Using failed_when statement Print message with fail Using changed_when statement",
    "description": "1. Getting Started with Ansible Overview on Ansible Why use Ansible 2. Ansible Architecture Control node Managed nodes Inventory Modules Tasks Playbooks Lab Environment 3. Pre-requisites to Setup Ansible Control node requirements Managed node requirements Update /etc/hosts on all the hosts Install mandatory pre-requisites on Ansible client nodes 4. Installing Ansible Install using package manager on RHEL 8 Install using package manager on CentOS 8 Install using pip 5. Configuring Ansible Create normal user Configure password-less authentication Verify password-less SSH authentication Configure privilege escalation using sudo Verify Ansible connectivity Total Duration: 8 hrs",
    "tags": [],
    "title": "Ansible",
    "uri": "/ansible/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Categories",
    "uri": "/categories/index.html"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": [],
    "title": "Tags",
    "uri": "/tags/index.html"
  }
]
